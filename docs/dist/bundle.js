/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 42);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
if (process.env.NODE_ENV === 'production') {
    module.exports = __webpack_require__(43);
}
else {
    module.exports = __webpack_require__(44);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var warning = function () { };
if (process.env.NODE_ENV !== 'production') {
    warning = function (condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
            args[key - 2] = arguments[key];
        }
        if (format === undefined) {
            throw new Error('`warning(condition, format, ...args)` requires a warning ' +
                'message argument');
        }
        if (format.length < 10 || (/^[s\W]*$/).test(format)) {
            throw new Error('The warning format should be able to uniquely identify this ' +
                'warning. Please, use a more descriptive format than: ' + format);
        }
        if (!condition) {
            var argIndex = 0;
            var message = 'Warning: ' +
                format.replace(/%s/g, function () {
                    return args[argIndex++];
                });
            if (typeof console !== 'undefined') {
                console.error(message);
            }
            try {
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            }
            catch (x) { }
        }
    };
}
module.exports = warning;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        }
        else {
            cachedSetTimeout = defaultSetTimout;
        }
    }
    catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        }
        else {
            cachedClearTimeout = defaultClearTimeout;
        }
    }
    catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
}());
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    }
    catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        }
        catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    }
    catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        }
        catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    }
    else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}
function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() { }
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) { return []; };
process.binding = function (name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function () { return '/'; };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () { return 0; };


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (process.env.NODE_ENV !== 'production') {
    var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
        Symbol.for &&
        Symbol.for('react.element')) ||
        0xeac7;
    var isValidElement = function (object) {
        return typeof object === 'object' &&
            object !== null &&
            object.$$typeof === REACT_ELEMENT_TYPE;
    };
    // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod
    var throwOnDirectAccess = true;
    module.exports = __webpack_require__(55)(isValidElement, throwOnDirectAccess);
}
else {
    // By explicitly using `prop-types` you are opting into new production behavior.
    // http://fb.me/prop-types-in-prod
    module.exports = __webpack_require__(56)();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */
var invariant = function (condition, format, a, b, c, d, e, f) {
    if (process.env.NODE_ENV !== 'production') {
        if (format === undefined) {
            throw new Error('invariant requires an error message argument');
        }
    }
    if (!condition) {
        var error;
        if (format === undefined) {
            error = new Error('Minified exception occurred; use the non-minified dev environment ' +
                'for the full error message and additional helpful warnings.');
        }
        else {
            var args = [a, b, c, d, e, f];
            var argIndex = 0;
            error = new Error(format.replace(/%s/g, function () { return args[argIndex++]; }));
            error.name = 'Invariant Violation';
        }
        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
    }
};
module.exports = invariant;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */
function makeEmptyFunction(arg) {
    return function () {
        return arg;
    };
}
/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() { };
emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
    return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
};
module.exports = emptyFunction;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined');
    }
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) {
            return false;
        }
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') {
            return false;
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for (var i = 0; i < 10; i++) {
            test2['_' + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') {
            return false;
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join('') !==
            'abcdefghijklmnopqrst') {
            return false;
        }
        return true;
    }
    catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
                to[key] = from[key];
            }
        }
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
                if (propIsEnumerable.call(from, symbols[i])) {
                    to[symbols[i]] = from[symbols[i]];
                }
            }
        }
    }
    return to;
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */
var validateFormat = function validateFormat(format) { };
if (process.env.NODE_ENV !== 'production') {
    validateFormat = function validateFormat(format) {
        if (format === undefined) {
            throw new Error('invariant requires an error message argument');
        }
    };
}
function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);
    if (!condition) {
        var error;
        if (format === undefined) {
            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        }
        else {
            var args = [a, b, c, d, e, f];
            var argIndex = 0;
            error = new Error(format.replace(/%s/g, function () {
                return args[argIndex++];
            }));
            error.name = 'Invariant Violation';
        }
        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
    }
}
module.exports = invariant;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
    return path.charAt(0) === '/' ? path : '/' + path;
};
var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
    return path.charAt(0) === '/' ? path.substr(1) : path;
};
var hasBasename = exports.hasBasename = function hasBasename(path, prefix) {
    return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
};
var stripBasename = exports.stripBasename = function stripBasename(path, prefix) {
    return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
};
var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
    return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
};
var parsePath = exports.parsePath = function parsePath(path) {
    var pathname = path || '/';
    var search = '';
    var hash = '';
    var hashIndex = pathname.indexOf('#');
    if (hashIndex !== -1) {
        hash = pathname.substr(hashIndex);
        pathname = pathname.substr(0, hashIndex);
    }
    var searchIndex = pathname.indexOf('?');
    if (searchIndex !== -1) {
        search = pathname.substr(searchIndex);
        pathname = pathname.substr(0, searchIndex);
    }
    return {
        pathname: pathname,
        search: search === '?' ? '' : search,
        hash: hash === '#' ? '' : hash
    };
};
var createPath = exports.createPath = function createPath(location) {
    var pathname = location.pathname, search = location.search, hash = location.hash;
    var path = pathname || '/';
    if (search && search !== '?')
        path += search.charAt(0) === '?' ? search : '?' + search;
    if (hash && hash !== '#')
        path += hash.charAt(0) === '#' ? hash : '#' + hash;
    return path;
};


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addLeadingSlash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return stripLeadingSlash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return hasBasename; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return stripBasename; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return stripTrailingSlash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return parsePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createPath; });
var addLeadingSlash = function addLeadingSlash(path) {
    return path.charAt(0) === '/' ? path : '/' + path;
};
var stripLeadingSlash = function stripLeadingSlash(path) {
    return path.charAt(0) === '/' ? path.substr(1) : path;
};
var hasBasename = function hasBasename(path, prefix) {
    return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
};
var stripBasename = function stripBasename(path, prefix) {
    return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
};
var stripTrailingSlash = function stripTrailingSlash(path) {
    return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
};
var parsePath = function parsePath(path) {
    var pathname = path || '/';
    var search = '';
    var hash = '';
    var hashIndex = pathname.indexOf('#');
    if (hashIndex !== -1) {
        hash = pathname.substr(hashIndex);
        pathname = pathname.substr(0, hashIndex);
    }
    var searchIndex = pathname.indexOf('?');
    if (searchIndex !== -1) {
        search = pathname.substr(searchIndex);
        pathname = pathname.substr(0, searchIndex);
    }
    return {
        pathname: pathname,
        search: search === '?' ? '' : search,
        hash: hash === '#' ? '' : hash
    };
};
var createPath = function createPath(location) {
    var pathname = location.pathname, search = location.search, hash = location.hash;
    var path = pathname || '/';
    if (search && search !== '?')
        path += search.charAt(0) === '?' ? search : '?' + search;
    if (hash && hash !== '#')
        path += hash.charAt(0) === '#' ? hash : '#' + hash;
    return path;
};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

var emptyObject = {};
if (process.env.NODE_ENV !== 'production') {
    Object.freeze(emptyObject);
}
module.exports = emptyObject;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

var emptyFunction = __webpack_require__(5);
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var warning = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
    var printWarning = function printWarning(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
            console.error(message);
        }
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        }
        catch (x) { }
    };
    warning = function warning(condition, format) {
        if (format === undefined) {
            throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (format.indexOf('Failed Composite propType: ') === 0) {
            return; // Ignore CompositeComponent proptype check.
        }
        if (!condition) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                args[_key2 - 2] = arguments[_key2];
            }
            printWarning.apply(undefined, [format].concat(args));
        }
    };
}
module.exports = warning;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return locationsAreEqual; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_resolve_pathname__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_value_equal__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__PathUtils__ = __webpack_require__(9);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };



var createLocation = function createLocation(path, state, key, currentLocation) {
    var location = void 0;
    if (typeof path === 'string') {
        // Two-arg form: push(path, state)
        location = Object(__WEBPACK_IMPORTED_MODULE_2__PathUtils__["d" /* parsePath */])(path);
        location.state = state;
    }
    else {
        // One-arg form: push(location)
        location = _extends({}, path);
        if (location.pathname === undefined)
            location.pathname = '';
        if (location.search) {
            if (location.search.charAt(0) !== '?')
                location.search = '?' + location.search;
        }
        else {
            location.search = '';
        }
        if (location.hash) {
            if (location.hash.charAt(0) !== '#')
                location.hash = '#' + location.hash;
        }
        else {
            location.hash = '';
        }
        if (state !== undefined && location.state === undefined)
            location.state = state;
    }
    try {
        location.pathname = decodeURI(location.pathname);
    }
    catch (e) {
        if (e instanceof URIError) {
            throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
        }
        else {
            throw e;
        }
    }
    if (key)
        location.key = key;
    if (currentLocation) {
        // Resolve incomplete/relative pathname relative to current location.
        if (!location.pathname) {
            location.pathname = currentLocation.pathname;
        }
        else if (location.pathname.charAt(0) !== '/') {
            location.pathname = Object(__WEBPACK_IMPORTED_MODULE_0_resolve_pathname__["default"])(location.pathname, currentLocation.pathname);
        }
    }
    else {
        // When there is no prior location and pathname is empty, set it to /
        if (!location.pathname) {
            location.pathname = '/';
        }
    }
    return location;
};
var locationsAreEqual = function locationsAreEqual(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && Object(__WEBPACK_IMPORTED_MODULE_1_value_equal__["default"])(a.state, b.state);
};


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["Routes"] = Routes;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_router_dom__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Table_of_contents_routes_config__ = __webpack_require__(41);



function Routes() {
    return __WEBPACK_IMPORTED_MODULE_0_react__["createElement"](__WEBPACK_IMPORTED_MODULE_1_react_router_dom__["c" /* Switch */], null, ROUTES);
}
const ROUTES = __WEBPACK_IMPORTED_MODULE_2__components_Table_of_contents_routes_config__["a" /* routes_config */].map((r) => __WEBPACK_IMPORTED_MODULE_0_react__["createElement"](__WEBPACK_IMPORTED_MODULE_1_react_router_dom__["b" /* Route */], { key: r.name, exact: r.exact !== false, path: r.path ? r.path : `/${r.name}`, component: __webpack_require__(94)(`./${r.name}`)[r.name] }));


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["About_me"] = About_me;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);

function About_me() {
    return __WEBPACK_IMPORTED_MODULE_0_react__["createElement"]("div", null, "Hi from about me");
}


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["Every_story_needs_a_beginning"] = Every_story_needs_a_beginning;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);

function Every_story_needs_a_beginning() {
    return (__WEBPACK_IMPORTED_MODULE_0_react__["createElement"]("div", null, "once upon a time..."));
}


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["Ghosts_of_the_past"] = Ghosts_of_the_past;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);

function Ghosts_of_the_past() {
    return (__WEBPACK_IMPORTED_MODULE_0_react__["createElement"]("div", null, "Buuuhuuuhuu"));
}


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["Not_found"] = Not_found;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);

function Not_found() {
    return (__WEBPACK_IMPORTED_MODULE_0_react__["createElement"]("div", null, "404"));
}


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
    var invariant = __webpack_require__(7);
    var warning = __webpack_require__(11);
    var ReactPropTypesSecret = __webpack_require__(19);
    var loggedTypeFailures = {};
}
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (process.env.NODE_ENV !== 'production') {
        for (var typeSpecName in typeSpecs) {
            if (typeSpecs.hasOwnProperty(typeSpecName)) {
                var error;
                // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.
                try {
                    // This is intentionally an invariant that gets caught. It's the same
                    // behavior as without this statement except with a better message.
                    invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
                    error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                }
                catch (ex) {
                    error = ex;
                }
                warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
                if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                    // Only monitor this failure once because there tends to be a lot of the
                    // same error.
                    loggedTypeFailures[error.message] = true;
                    var stack = getStack ? getStack() : '';
                    warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
                }
            }
        }
    }
}
module.exports = checkPropTypes;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BrowserRouter__ = __webpack_require__(54);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__BrowserRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__HashRouter__ = __webpack_require__(58);
/* unused harmony reexport HashRouter */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Link__ = __webpack_require__(37);
/* unused harmony reexport Link */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__MemoryRouter__ = __webpack_require__(60);
/* unused harmony reexport MemoryRouter */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__NavLink__ = __webpack_require__(63);
/* unused harmony reexport NavLink */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Prompt__ = __webpack_require__(66);
/* unused harmony reexport Prompt */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Redirect__ = __webpack_require__(68);
/* unused harmony reexport Redirect */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Route__ = __webpack_require__(38);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_7__Route__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Router__ = __webpack_require__(23);
/* unused harmony reexport Router */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__StaticRouter__ = __webpack_require__(74);
/* unused harmony reexport StaticRouter */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Switch__ = __webpack_require__(76);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_10__Switch__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__matchPath__ = __webpack_require__(78);
/* unused harmony reexport matchPath */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__withRouter__ = __webpack_require__(79);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_12__withRouter__["a"]; });




























/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
exports.locationsAreEqual = exports.createLocation = undefined;
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };
var _resolvePathname = __webpack_require__(34);
var _resolvePathname2 = _interopRequireDefault(_resolvePathname);
var _valueEqual = __webpack_require__(35);
var _valueEqual2 = _interopRequireDefault(_valueEqual);
var _PathUtils = __webpack_require__(8);
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
    var location = void 0;
    if (typeof path === 'string') {
        // Two-arg form: push(path, state)
        location = (0, _PathUtils.parsePath)(path);
        location.state = state;
    }
    else {
        // One-arg form: push(location)
        location = _extends({}, path);
        if (location.pathname === undefined)
            location.pathname = '';
        if (location.search) {
            if (location.search.charAt(0) !== '?')
                location.search = '?' + location.search;
        }
        else {
            location.search = '';
        }
        if (location.hash) {
            if (location.hash.charAt(0) !== '#')
                location.hash = '#' + location.hash;
        }
        else {
            location.hash = '';
        }
        if (state !== undefined && location.state === undefined)
            location.state = state;
    }
    try {
        location.pathname = decodeURI(location.pathname);
    }
    catch (e) {
        if (e instanceof URIError) {
            throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
        }
        else {
            throw e;
        }
    }
    if (key)
        location.key = key;
    if (currentLocation) {
        // Resolve incomplete/relative pathname relative to current location.
        if (!location.pathname) {
            location.pathname = currentLocation.pathname;
        }
        else if (location.pathname.charAt(0) !== '/') {
            location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
        }
    }
    else {
        // When there is no prior location and pathname is empty, set it to /
        if (!location.pathname) {
            location.pathname = '/';
        }
    }
    return location;
};
var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var _warning = __webpack_require__(1);
var _warning2 = _interopRequireDefault(_warning);
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var createTransitionManager = function createTransitionManager() {
    var prompt = null;
    var setPrompt = function setPrompt(nextPrompt) {
        (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');
        prompt = nextPrompt;
        return function () {
            if (prompt === nextPrompt)
                prompt = null;
        };
    };
    var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
        // TODO: If another transition starts while we're still confirming
        // the previous one, we may end up in a weird state. Figure out the
        // best way to handle this.
        if (prompt != null) {
            var result = typeof prompt === 'function' ? prompt(location, action) : prompt;
            if (typeof result === 'string') {
                if (typeof getUserConfirmation === 'function') {
                    getUserConfirmation(result, callback);
                }
                else {
                    (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');
                    callback(true);
                }
            }
            else {
                // Return false from a transition hook to cancel the transition.
                callback(result !== false);
            }
        }
        else {
            callback(true);
        }
    };
    var listeners = [];
    var appendListener = function appendListener(fn) {
        var isActive = true;
        var listener = function listener() {
            if (isActive)
                fn.apply(undefined, arguments);
        };
        listeners.push(listener);
        return function () {
            isActive = false;
            listeners = listeners.filter(function (item) {
                return item !== listener;
            });
        };
    };
    var notifyListeners = function notifyListeners() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        listeners.forEach(function (listener) {
            return listener.apply(undefined, args);
        });
    };
    return {
        setPrompt: setPrompt,
        confirmTransitionTo: confirmTransitionTo,
        appendListener: appendListener,
        notifyListeners: notifyListeners
    };
};
exports.default = createTransitionManager;


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Router__ = __webpack_require__(24);
// Written in this round about way for babel-transform-imports

/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Router__["a" /* default */]);


/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _possibleConstructorReturn(self, call) { if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * The public API for putting history on context.
 */
var Router = function (_React$Component) {
    _inherits(Router, _React$Component);
    function Router() {
        var _temp, _this, _ret;
        _classCallCheck(this, Router);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            match: _this.computeMatch(_this.props.history.location.pathname)
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    Router.prototype.getChildContext = function getChildContext() {
        return {
            router: _extends({}, this.context.router, {
                history: this.props.history,
                route: {
                    location: this.props.history.location,
                    match: this.state.match
                }
            })
        };
    };
    Router.prototype.computeMatch = function computeMatch(pathname) {
        return {
            path: '/',
            url: '/',
            params: {},
            isExact: pathname === '/'
        };
    };
    Router.prototype.componentWillMount = function componentWillMount() {
        var _this2 = this;
        var _props = this.props, children = _props.children, history = _props.history;
        __WEBPACK_IMPORTED_MODULE_1_invariant___default()(children == null || __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.count(children) === 1, 'A <Router> may have only one child element');
        // Do this here so we can setState when a <Redirect> changes the
        // location in componentWillMount. This happens e.g. when doing
        // server rendering using a <StaticRouter>.
        this.unlisten = history.listen(function () {
            _this2.setState({
                match: _this2.computeMatch(history.location.pathname)
            });
        });
    };
    Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(this.props.history === nextProps.history, 'You cannot change <Router history>');
    };
    Router.prototype.componentWillUnmount = function componentWillUnmount() {
        this.unlisten();
    };
    Router.prototype.render = function render() {
        var children = this.props.children;
        return children ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.only(children) : null;
    };
    return Router;
}(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component);
Router.propTypes = {
    history: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
    children: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.node
};
Router.contextTypes = {
    router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
};
Router.childContextTypes = {
    router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (Router);


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_path_to_regexp__);

var patternCache = {};
var cacheLimit = 10000;
var cacheCount = 0;
var compilePath = function compilePath(pattern, options) {
    var cacheKey = '' + options.end + options.strict + options.sensitive;
    var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});
    if (cache[pattern])
        return cache[pattern];
    var keys = [];
    var re = __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default()(pattern, keys, options);
    var compiledPattern = { re: re, keys: keys };
    if (cacheCount < cacheLimit) {
        cache[pattern] = compiledPattern;
        cacheCount++;
    }
    return compiledPattern;
};
/**
 * Public API for matching a URL pathname to a path pattern.
 */
var matchPath = function matchPath(pathname) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (typeof options === 'string')
        options = { path: options };
    var _options = options, _options$path = _options.path, path = _options$path === undefined ? '/' : _options$path, _options$exact = _options.exact, exact = _options$exact === undefined ? false : _options$exact, _options$strict = _options.strict, strict = _options$strict === undefined ? false : _options$strict, _options$sensitive = _options.sensitive, sensitive = _options$sensitive === undefined ? false : _options$sensitive;
    var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }), re = _compilePath.re, keys = _compilePath.keys;
    var match = re.exec(pathname);
    if (!match)
        return null;
    var url = match[0], values = match.slice(1);
    var isExact = pathname === url;
    if (exact && !isExact)
        return null;
    return {
        path: path,
        url: path === '/' && url === '' ? '/' : url,
        isExact: isExact,
        params: keys.reduce(function (memo, key, index) {
            memo[key.name] = values[index];
            return memo;
        }, {})
    };
};
/* harmony default export */ __webpack_exports__["a"] = (matchPath);


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);

var createTransitionManager = function createTransitionManager() {
    var prompt = null;
    var setPrompt = function setPrompt(nextPrompt) {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(prompt == null, 'A history supports only one prompt at a time');
        prompt = nextPrompt;
        return function () {
            if (prompt === nextPrompt)
                prompt = null;
        };
    };
    var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
        // TODO: If another transition starts while we're still confirming
        // the previous one, we may end up in a weird state. Figure out the
        // best way to handle this.
        if (prompt != null) {
            var result = typeof prompt === 'function' ? prompt(location, action) : prompt;
            if (typeof result === 'string') {
                if (typeof getUserConfirmation === 'function') {
                    getUserConfirmation(result, callback);
                }
                else {
                    __WEBPACK_IMPORTED_MODULE_0_warning___default()(false, 'A history needs a getUserConfirmation function in order to use a prompt message');
                    callback(true);
                }
            }
            else {
                // Return false from a transition hook to cancel the transition.
                callback(result !== false);
            }
        }
        else {
            callback(true);
        }
    };
    var listeners = [];
    var appendListener = function appendListener(fn) {
        var isActive = true;
        var listener = function listener() {
            if (isActive)
                fn.apply(undefined, arguments);
        };
        listeners.push(listener);
        return function () {
            isActive = false;
            listeners = listeners.filter(function (item) {
                return item !== listener;
            });
        };
    };
    var notifyListeners = function notifyListeners() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        listeners.forEach(function (listener) {
            return listener.apply(undefined, args);
        });
    };
    return {
        setPrompt: setPrompt,
        confirmTransitionTo: confirmTransitionTo,
        appendListener: appendListener,
        notifyListeners: notifyListeners
    };
};
/* harmony default export */ __webpack_exports__["a"] = (createTransitionManager);


/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return css; });
/* unused harmony export keyframes */
/* unused harmony export injectGlobal */
/* unused harmony export isStyledComponent */
/* unused harmony export consolidateStreamedStyles */
/* unused harmony export ThemeProvider */
/* unused harmony export withTheme */
/* unused harmony export ServerStyleSheet */
/* unused harmony export StyleSheetManager */
/* unused harmony export __DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_is_plain_object__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_is_plain_object___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_is_plain_object__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_stylis__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_stylis___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_stylis__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_stylis_rule_sheet__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_stylis_rule_sheet___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_stylis_rule_sheet__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_hoist_non_react_statics__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_hoist_non_react_statics___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_hoist_non_react_statics__);






/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */
var _uppercasePattern = /([A-Z])/g;
/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate$2(string) {
    return string.replace(_uppercasePattern, '-$1').toLowerCase();
}
var hyphenate_1 = hyphenate$2;
var hyphenate = hyphenate_1;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
    return hyphenate(string).replace(msPattern, '-ms-');
}
var hyphenateStyleName_1 = hyphenateStyleName;
// 
var objToCss = function objToCss(obj, prevKey) {
    var css = Object.keys(obj).filter(function (key) {
        var chunk = obj[key];
        return chunk !== undefined && chunk !== null && chunk !== false && chunk !== '';
    }).map(function (key) {
        if (__WEBPACK_IMPORTED_MODULE_0_is_plain_object___default()(obj[key]))
            return objToCss(obj[key], key);
        return hyphenateStyleName_1(key) + ': ' + obj[key] + ';';
    }).join(' ');
    return prevKey ? prevKey + ' {\n  ' + css + '\n}' : css;
};
var flatten = function flatten(chunks, executionContext) {
    return chunks.reduce(function (ruleSet, chunk) {
        /* Remove falsey values */
        if (chunk === undefined || chunk === null || chunk === false || chunk === '') {
            return ruleSet;
        }
        /* Flatten ruleSet */
        if (Array.isArray(chunk)) {
            return [].concat(ruleSet, flatten(chunk, executionContext));
        }
        /* Handle other components */
        if (chunk.hasOwnProperty('styledComponentId')) {
            // $FlowFixMe not sure how to make this pass
            return [].concat(ruleSet, ['.' + chunk.styledComponentId]);
        }
        /* Either execute or defer the function */
        if (typeof chunk === 'function') {
            return executionContext ? ruleSet.concat.apply(ruleSet, flatten([chunk(executionContext)], executionContext)) : ruleSet.concat(chunk);
        }
        /* Handle objects */
        return ruleSet.concat(
        // $FlowFixMe have to add %checks somehow to isPlainObject
        __WEBPACK_IMPORTED_MODULE_0_is_plain_object___default()(chunk) ? objToCss(chunk) : chunk.toString());
    }, []);
};
// 
// NOTE: This stylis instance is only used to split rules from SSR'd style tags
var stylisSplitter = new __WEBPACK_IMPORTED_MODULE_1_stylis___default.a({
    global: false,
    cascade: false,
    keyframe: false,
    prefix: false,
    compress: false,
    semicolon: true
});
var stylis = new __WEBPACK_IMPORTED_MODULE_1_stylis___default.a({
    global: false,
    cascade: true,
    keyframe: false,
    prefix: true,
    compress: false,
    semicolon: false // NOTE: This means "autocomplete missing semicolons"
});
// Wrap `insertRulePlugin to build a list of rules,
// and then make our own plugin to return the rules. This
// makes it easier to hook into the existing SSR architecture
var parsingRules = [];
// eslint-disable-next-line consistent-return
var returnRulesPlugin = function returnRulesPlugin(context) {
    if (context === -2) {
        var parsedRules = parsingRules;
        parsingRules = [];
        return parsedRules;
    }
};
var parseRulesPlugin = __WEBPACK_IMPORTED_MODULE_2_stylis_rule_sheet___default()(function (rule) {
    parsingRules.push(rule);
});
stylis.use([parseRulesPlugin, returnRulesPlugin]);
stylisSplitter.use([parseRulesPlugin, returnRulesPlugin]);
var stringifyRules = function stringifyRules(rules, selector, prefix) {
    var flatCSS = rules.join('').replace(/^\s*\/\/.*$/gm, ''); // replace JS comments
    var cssStr = selector && prefix ? prefix + ' ' + selector + ' { ' + flatCSS + ' }' : flatCSS;
    return stylis(prefix || !selector ? '' : selector, cssStr);
};
var splitByRules = function splitByRules(css) {
    return stylisSplitter('', css);
};
// 
function isStyledComponent(target) {
    return typeof target === 'function' && typeof target.styledComponentId === 'string';
}
// 
/* This function is DEPRECATED and will be removed on the next major version release.
 * It was needed to rehydrate all style blocks prepended to chunks before React
 * tries to rehydrate its HTML stream. Since the master StyleSheet will now detect
 * the use of streamed style tags and will perform the rehydration earlier when needed
 * this function will not be needed anymore */
function consolidateStreamedStyles() {
    if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line no-console
        console.warn('styled-components automatically does streaming SSR rehydration now.\n' + 'Calling consolidateStreamedStyles manually is no longer necessary and a noop now.\n' + '- Please remove the consolidateStreamedStyles call from your client.');
    }
}
// 
/* eslint-disable no-bitwise */
/* This is the "capacity" of our alphabet i.e. 2x26 for all letters plus their capitalised
 * counterparts */
var charsLength = 52;
/* start at 75 for 'a' until 'z' (25) and then start at 65 for capitalised letters */
var getAlphabeticChar = function getAlphabeticChar(code) {
    return String.fromCharCode(code + (code > 25 ? 39 : 97));
};
/* input a number, usually a hash and convert it to base-52 */
var generateAlphabeticName = function generateAlphabeticName(code) {
    var name = '';
    var x = void 0;
    /* get a char and divide by alphabet-length */
    for (x = code; x > charsLength; x = Math.floor(x / charsLength)) {
        name = getAlphabeticChar(x % charsLength) + name;
    }
    return getAlphabeticChar(x % charsLength) + name;
};
// 
var interleave = (function (strings, interpolations) {
    return interpolations.reduce(function (array, interp, i) {
        return array.concat(interp, strings[i + 1]);
    }, [strings[0]]);
});
// 
var css = (function (strings) {
    for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        interpolations[_key - 1] = arguments[_key];
    }
    return flatten(interleave(strings, interpolations));
});
var stream = {};
// 
var SC_ATTR = 'data-styled-components';
var SC_STREAM_ATTR = 'data-styled-streamed';
var CONTEXT_KEY = '__styled-components-stylesheet__';
var IS_BROWSER = typeof window !== 'undefined' && 'HTMLElement' in window;
var DISABLE_SPEEDY = typeof false === 'boolean' && false || process.env.NODE_ENV !== 'production';
// 
var SC_COMPONENT_ID = /^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm;
var extractComps = (function (maybeCSS) {
    var css = '' + (maybeCSS || ''); // Definitely a string, and a clone
    var existingComponents = [];
    css.replace(SC_COMPONENT_ID, function (match, componentId, matchIndex) {
        existingComponents.push({ componentId: componentId, matchIndex: matchIndex });
        return match;
    });
    return existingComponents.map(function (_ref, i) {
        var componentId = _ref.componentId, matchIndex = _ref.matchIndex;
        var nextComp = existingComponents[i + 1];
        var cssFromDOM = nextComp ? css.slice(matchIndex, nextComp.matchIndex) : css.slice(matchIndex);
        return { componentId: componentId, cssFromDOM: cssFromDOM };
    });
});
// 
/* eslint-disable camelcase, no-undef */
var getNonce = (function () {
    return  true ? __webpack_require__.nc : null;
});
// 
// Helper to call a given function, only once
var once = (function (cb) {
    var called = false;
    return function () {
        if (!called) {
            called = true;
            cb();
        }
    };
});
var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
};
var createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
                descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function (Constructor, protoProps, staticProps) {
        if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
            defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};
var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};
var objectWithoutProperties = function (obj, keys) {
    var target = {};
    for (var i in obj) {
        if (keys.indexOf(i) >= 0)
            continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
        target[i] = obj[i];
    }
    return target;
};
var possibleConstructorReturn = function (self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
};
// 
/* These are helpers for the StyleTags to keep track of the injected
 * rule names for each (component) ID that they're keeping track of.
 * They're crucial for detecting whether a name has already been
 * injected.
 * (This excludes rehydrated names) */
/* adds a new ID:name pairing to a names dictionary */
var addNameForId = function addNameForId(names, id, name) {
    if (name) {
        // eslint-disable-next-line no-param-reassign
        var namesForId = names[id] || (names[id] = Object.create(null));
        namesForId[name] = true;
    }
};
/* resets an ID entirely by overwriting it in the dictionary */
var resetIdNames = function resetIdNames(names, id) {
    // eslint-disable-next-line no-param-reassign
    names[id] = Object.create(null);
};
/* factory for a names dictionary checking the existance of an ID:name pairing */
var hasNameForId = function hasNameForId(names) {
    return function (id, name) {
        return names[id] !== undefined && names[id][name];
    };
};
/* stringifies names for the html/element output */
var stringifyNames = function stringifyNames(names) {
    var str = '';
    // eslint-disable-next-line guard-for-in
    for (var id in names) {
        str += Object.keys(names[id]).join(' ') + ' ';
    }
    return str.trim();
};
/* clones the nested names dictionary */
var cloneNames = function cloneNames(names) {
    var clone = Object.create(null);
    // eslint-disable-next-line guard-for-in
    for (var id in names) {
        clone[id] = _extends({}, names[id]);
    }
    return clone;
};
// 
/* These are helpers that deal with the insertRule (aka speedy) API
 * They are used in the StyleTags and specifically the speedy tag
 */
/* retrieve a sheet for a given style tag */
var sheetForTag = function sheetForTag(tag) {
    // $FlowFixMe
    if (tag.sheet)
        return tag.sheet;
    /* Firefox quirk requires us to step through all stylesheets to find one owned by the given tag */
    var size = document.styleSheets.length;
    for (var i = 0; i < size; i += 1) {
        var sheet = document.styleSheets[i];
        // $FlowFixMe
        if (sheet.ownerNode === tag)
            return sheet;
    }
    /* we should always be able to find a tag */
    throw new Error();
};
/* insert a rule safely and return whether it was actually injected */
var safeInsertRule = function safeInsertRule(sheet, cssRule, index) {
    /* abort early if cssRule string is falsy */
    if (!cssRule)
        return false;
    var maxIndex = sheet.cssRules.length;
    try {
        /* use insertRule and cap passed index with maxIndex (no of cssRules) */
        sheet.insertRule(cssRule, index <= maxIndex ? index : maxIndex);
    }
    catch (err) {
        /* any error indicates an invalid rule */
        return false;
    }
    return true;
};
/* deletes `size` rules starting from `removalIndex` */
var deleteRules = function deleteRules(sheet, removalIndex, size) {
    var lowerBound = removalIndex - size;
    for (var i = removalIndex; i >= lowerBound; i -= 1) {
        sheet.deleteRule(i);
    }
};
// 
/* eslint-disable flowtype/object-type-delimiter */
/* eslint-disable react/prop-types */
/* this error is used for makeStyleTag */
var parentNodeUnmountedErr = process.env.NODE_ENV !== 'production' ? '\nTrying to insert a new style tag, but the given Node is unmounted!\n- Are you using a custom target that isn\'t mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n'.trim() : '';
/* this error is used for tags */
var throwCloneTagErr = function throwCloneTagErr() {
    throw new Error(process.env.NODE_ENV !== 'production' ? '\nThe clone method cannot be used on the client!\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n'.trim() : '');
};
/* this marker separates component styles and is important for rehydration */
var makeTextMarker = function makeTextMarker(id) {
    return '\n/* sc-component-id: ' + id + ' */\n';
};
/* add up all numbers in array up until and including the index */
var addUpUntilIndex = function addUpUntilIndex(sizes, index) {
    var totalUpToIndex = 0;
    for (var i = 0; i <= index; i += 1) {
        totalUpToIndex += sizes[i];
    }
    return totalUpToIndex;
};
/* create a new style tag after lastEl */
var makeStyleTag = function makeStyleTag(target, tagEl, insertBefore) {
    var el = document.createElement('style');
    el.setAttribute(SC_ATTR, '');
    var nonce = getNonce();
    if (nonce) {
        el.setAttribute('nonce', nonce);
    }
    /* Work around insertRule quirk in EdgeHTML */
    el.appendChild(document.createTextNode(''));
    if (target && !tagEl) {
        /* Append to target when no previous element was passed */
        target.appendChild(el);
    }
    else {
        if (!tagEl || !target || !tagEl.parentNode) {
            throw new Error(parentNodeUnmountedErr);
        }
        /* Insert new style tag after the previous one */
        tagEl.parentNode.insertBefore(el, insertBefore ? tagEl : tagEl.nextSibling);
    }
    return el;
};
/* takes a css factory function and outputs an html styled tag factory */
var wrapAsHtmlTag = function wrapAsHtmlTag(css, names) {
    return function (additionalAttrs) {
        var nonce = getNonce();
        var attrs = [nonce && 'nonce="' + nonce + '"', SC_ATTR + '="' + stringifyNames(names) + '"', additionalAttrs];
        var htmlAttr = attrs.filter(Boolean).join(' ');
        return '<style ' + htmlAttr + '>' + css() + '</style>';
    };
};
/* takes a css factory function and outputs an element factory */
var wrapAsElement = function wrapAsElement(css, names) {
    return function () {
        var _props;
        var props = (_props = {}, _props[SC_ATTR] = stringifyNames(names), _props);
        var nonce = getNonce();
        if (nonce) {
            // $FlowFixMe
            props.nonce = nonce;
        }
        // eslint-disable-next-line react/no-danger
        return __WEBPACK_IMPORTED_MODULE_3_react___default.a.createElement('style', _extends({}, props, { dangerouslySetInnerHTML: { __html: css() } }));
    };
};
var getIdsFromMarkersFactory = function getIdsFromMarkersFactory(markers) {
    return function () {
        return Object.keys(markers);
    };
};
/* speedy tags utilise insertRule */
var makeSpeedyTag = function makeSpeedyTag(el, getImportRuleTag) {
    var names = Object.create(null);
    var markers = Object.create(null);
    var sizes = [];
    var extractImport = getImportRuleTag !== undefined;
    /* indicates whther getImportRuleTag was called */
    var usedImportRuleTag = false;
    var insertMarker = function insertMarker(id) {
        var prev = markers[id];
        if (prev !== undefined) {
            return prev;
        }
        var marker = markers[id] = sizes.length;
        sizes.push(0);
        resetIdNames(names, id);
        return marker;
    };
    var insertRules = function insertRules(id, cssRules, name) {
        var marker = insertMarker(id);
        var sheet = sheetForTag(el);
        var insertIndex = addUpUntilIndex(sizes, marker);
        var injectedRules = 0;
        var importRules = [];
        var cssRulesSize = cssRules.length;
        for (var i = 0; i < cssRulesSize; i += 1) {
            var cssRule = cssRules[i];
            var mayHaveImport = extractImport; /* @import rules are reordered to appear first */
            if (mayHaveImport && cssRule.indexOf('@import') !== -1) {
                importRules.push(cssRule);
            }
            else if (safeInsertRule(sheet, cssRule, insertIndex + injectedRules)) {
                mayHaveImport = false;
                injectedRules += 1;
            }
        }
        if (extractImport && importRules.length > 0) {
            usedImportRuleTag = true;
            // $FlowFixMe
            getImportRuleTag().insertRules(id + '-import', importRules);
        }
        sizes[marker] += injectedRules; /* add up no of injected rules */
        addNameForId(names, id, name);
    };
    var removeRules = function removeRules(id) {
        var marker = markers[id];
        if (marker === undefined)
            return;
        var size = sizes[marker];
        var sheet = sheetForTag(el);
        var removalIndex = addUpUntilIndex(sizes, marker);
        deleteRules(sheet, removalIndex, size);
        sizes[marker] = 0;
        resetIdNames(names, id);
        if (extractImport && usedImportRuleTag) {
            // $FlowFixMe
            getImportRuleTag().removeRules(id + '-import');
        }
    };
    var css = function css() {
        var _sheetForTag = sheetForTag(el), cssRules = _sheetForTag.cssRules;
        var str = '';
        var i = 0;
        // eslint-disable-next-line guard-for-in
        for (var id in markers) {
            str += makeTextMarker(id);
            var end = markers[id] + i;
            for (; i < end; i += 1) {
                str += cssRules[i].cssText;
            }
        }
        return str;
    };
    return {
        styleTag: el,
        getIds: getIdsFromMarkersFactory(markers),
        hasNameForId: hasNameForId(names),
        insertMarker: insertMarker,
        insertRules: insertRules,
        removeRules: removeRules,
        css: css,
        toHTML: wrapAsHtmlTag(css, names),
        toElement: wrapAsElement(css, names),
        clone: throwCloneTagErr
    };
};
var makeBrowserTag = function makeBrowserTag(el, getImportRuleTag) {
    var names = Object.create(null);
    var markers = Object.create(null);
    var extractImport = getImportRuleTag !== undefined;
    var makeTextNode = function makeTextNode(id) {
        return document.createTextNode(makeTextMarker(id));
    };
    /* indicates whther getImportRuleTag was called */
    var usedImportRuleTag = false;
    var insertMarker = function insertMarker(id) {
        var prev = markers[id];
        if (prev !== undefined) {
            return prev;
        }
        var marker = markers[id] = makeTextNode(id);
        el.appendChild(marker);
        names[id] = Object.create(null);
        return marker;
    };
    var insertRules = function insertRules(id, cssRules, name) {
        var marker = insertMarker(id);
        var importRules = [];
        var cssRulesSize = cssRules.length;
        for (var i = 0; i < cssRulesSize; i += 1) {
            var rule = cssRules[i];
            var mayHaveImport = extractImport;
            if (mayHaveImport && rule.indexOf('@import') !== -1) {
                importRules.push(rule);
            }
            else {
                mayHaveImport = false;
                var separator = i === cssRulesSize - 1 ? '' : ' ';
                marker.appendData('' + rule + separator);
            }
        }
        addNameForId(names, id, name);
        if (extractImport && importRules.length > 0) {
            usedImportRuleTag = true;
            // $FlowFixMe
            getImportRuleTag().insertRules(id + '-import', importRules);
        }
    };
    var removeRules = function removeRules(id) {
        var marker = markers[id];
        if (marker === undefined)
            return;
        /* create new empty text node and replace the current one */
        var newMarker = makeTextNode(id);
        el.replaceChild(newMarker, marker);
        markers[id] = newMarker;
        resetIdNames(names, id);
        if (extractImport && usedImportRuleTag) {
            // $FlowFixMe
            getImportRuleTag().removeRules(id + '-import');
        }
    };
    var css = function css() {
        var str = '';
        // eslint-disable-next-line guard-for-in
        for (var id in markers) {
            str += markers[id].data;
        }
        return str;
    };
    return {
        styleTag: el,
        getIds: getIdsFromMarkersFactory(markers),
        hasNameForId: hasNameForId(names),
        insertMarker: insertMarker,
        insertRules: insertRules,
        removeRules: removeRules,
        css: css,
        toHTML: wrapAsHtmlTag(css, names),
        toElement: wrapAsElement(css, names),
        clone: throwCloneTagErr
    };
};
var makeServerTagInternal = function makeServerTagInternal(namesArg, markersArg) {
    var names = namesArg === undefined ? Object.create(null) : namesArg;
    var markers = markersArg === undefined ? Object.create(null) : markersArg;
    var insertMarker = function insertMarker(id) {
        var prev = markers[id];
        if (prev !== undefined) {
            return prev;
        }
        return markers[id] = [''];
    };
    var insertRules = function insertRules(id, cssRules, name) {
        var marker = insertMarker(id);
        marker[0] += cssRules.join(' ');
        addNameForId(names, id, name);
    };
    var removeRules = function removeRules(id) {
        var marker = markers[id];
        if (marker === undefined)
            return;
        marker[0] = '';
        resetIdNames(names, id);
    };
    var css = function css() {
        var str = '';
        // eslint-disable-next-line guard-for-in
        for (var id in markers) {
            var cssForId = markers[id][0];
            if (cssForId) {
                str += makeTextMarker(id) + cssForId;
            }
        }
        return str;
    };
    var clone = function clone() {
        var namesClone = cloneNames(names);
        var markersClone = Object.create(null);
        // eslint-disable-next-line guard-for-in
        for (var id in markers) {
            markersClone[id] = [markers[id][0]];
        }
        return makeServerTagInternal(namesClone, markersClone);
    };
    var tag = {
        styleTag: null,
        getIds: getIdsFromMarkersFactory(markers),
        hasNameForId: hasNameForId(names),
        insertMarker: insertMarker,
        insertRules: insertRules,
        removeRules: removeRules,
        css: css,
        toHTML: wrapAsHtmlTag(css, names),
        toElement: wrapAsElement(css, names),
        clone: clone
    };
    return tag;
};
var makeServerTag = function makeServerTag() {
    return makeServerTagInternal();
};
var makeTag = function makeTag(target, tagEl, forceServer, insertBefore, getImportRuleTag) {
    if (IS_BROWSER && !forceServer) {
        var el = makeStyleTag(target, tagEl, insertBefore);
        if (DISABLE_SPEEDY) {
            return makeBrowserTag(el, getImportRuleTag);
        }
        else {
            return makeSpeedyTag(el, getImportRuleTag);
        }
    }
    return makeServerTag();
};
/* wraps a given tag so that rehydration is performed once when necessary */
var makeRehydrationTag = function makeRehydrationTag(tag, els, extracted, names, immediateRehydration) {
    /* rehydration function that adds all rules to the new tag */
    var rehydrate = once(function () {
        /* add all extracted components to the new tag */
        for (var i = 0; i < extracted.length; i += 1) {
            var _extracted$i = extracted[i], componentId = _extracted$i.componentId, cssFromDOM = _extracted$i.cssFromDOM;
            var cssRules = splitByRules(cssFromDOM);
            tag.insertRules(componentId, cssRules);
        }
        /* remove old HTMLStyleElements, since they have been rehydrated */
        for (var _i = 0; _i < els.length; _i += 1) {
            var el = els[_i];
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
        }
    });
    if (immediateRehydration)
        rehydrate();
    return _extends({}, tag, {
        /* add rehydration hook to insertion methods */
        insertMarker: function insertMarker(id) {
            rehydrate();
            return tag.insertMarker(id);
        },
        insertRules: function insertRules(id, cssRules, name) {
            rehydrate();
            return tag.insertRules(id, cssRules, name);
        }
    });
};
// 
/* determine the maximum number of components before tags are sharded */
var MAX_SIZE = void 0;
if (IS_BROWSER) {
    /* in speedy mode we can keep a lot more rules in a sheet before a slowdown can be expected */
    MAX_SIZE = DISABLE_SPEEDY ? 40 : 1000;
}
else {
    /* for servers we do not need to shard at all */
    MAX_SIZE = -1;
}
var sheetRunningId = 0;
var master = void 0;
var StyleSheet = function () {
    /* a map from ids to tags */
    /* deferred rules for a given id */
    /* this is used for not reinjecting rules via hasNameForId() */
    /* when rules for an id are removed using remove() we have to ignore rehydratedNames for it */
    /* a list of tags belonging to this StyleSheet */
    /* a tag for import rules */
    /* current capacity until a new tag must be created */
    /* children (aka clones) of this StyleSheet inheriting all and future injections */
    function StyleSheet() {
        var _this = this;
        var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : IS_BROWSER ? document.head : null;
        var forceServer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        classCallCheck(this, StyleSheet);
        this.getImportRuleTag = function () {
            var importRuleTag = _this.importRuleTag;
            if (importRuleTag !== undefined) {
                return importRuleTag;
            }
            var firstTag = _this.tags[0];
            var insertBefore = true;
            return _this.importRuleTag = makeTag(_this.target, firstTag ? firstTag.styleTag : null, _this.forceServer, insertBefore);
        };
        this.id = sheetRunningId += 1;
        this.sealed = false;
        this.forceServer = forceServer;
        this.target = forceServer ? null : target;
        this.tagMap = {};
        this.deferred = {};
        this.rehydratedNames = {};
        this.ignoreRehydratedNames = {};
        this.tags = [];
        this.capacity = 1;
        this.clones = [];
    }
    /* rehydrate all SSR'd style tags */
    StyleSheet.prototype.rehydrate = function rehydrate() {
        if (!IS_BROWSER || this.forceServer) {
            return this;
        }
        var els = [];
        var names = [];
        var extracted = [];
        var isStreamed = false;
        /* retrieve all of our SSR style elements from the DOM */
        var nodes = document.querySelectorAll('style[' + SC_ATTR + ']');
        var nodesSize = nodes.length;
        /* abort rehydration if no previous style tags were found */
        if (nodesSize === 0) {
            return this;
        }
        for (var i = 0; i < nodesSize; i += 1) {
            // $FlowFixMe: We can trust that all elements in this query are style elements
            var el = nodes[i];
            /* check if style tag is a streamed tag */
            isStreamed = !!el.getAttribute(SC_STREAM_ATTR) || isStreamed;
            /* retrieve all component names */
            var elNames = (el.getAttribute(SC_ATTR) || '').trim().split(/\s+/);
            var elNamesSize = elNames.length;
            for (var j = 0; j < elNamesSize; j += 1) {
                var name = elNames[j];
                /* add rehydrated name to sheet to avoid readding styles */
                this.rehydratedNames[name] = true;
                names.push(name);
            }
            /* extract all components and their CSS */
            extracted = extracted.concat(extractComps(el.textContent));
            /* store original HTMLStyleElement */
            els.push(el);
        }
        /* abort rehydration if nothing was extracted */
        var extractedSize = extracted.length;
        if (extractedSize === 0) {
            return this;
        }
        /* create a tag to be used for rehydration */
        var tag = this.makeTag(null);
        var rehydrationTag = makeRehydrationTag(tag, els, extracted, names, isStreamed);
        /* reset capacity and adjust MAX_SIZE by the initial size of the rehydration */
        this.capacity = Math.max(1, MAX_SIZE - extractedSize);
        this.tags.push(rehydrationTag);
        /* retrieve all component ids */
        for (var _j = 0; _j < extractedSize; _j += 1) {
            this.tagMap[extracted[_j].componentId] = rehydrationTag;
        }
        return this;
    };
    /* retrieve a "master" instance of StyleSheet which is typically used when no other is available
     * The master StyleSheet is targeted by injectGlobal, keyframes, and components outside of any
      * StyleSheetManager's context */
    /* reset the internal "master" instance */
    StyleSheet.reset = function reset() {
        var forceServer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        master = new StyleSheet(undefined, forceServer).rehydrate();
    };
    /* adds "children" to the StyleSheet that inherit all of the parents' rules
     * while their own rules do not affect the parent */
    StyleSheet.prototype.clone = function clone() {
        var sheet = new StyleSheet(this.target, this.forceServer);
        /* add to clone array */
        this.clones.push(sheet);
        /* clone all tags */
        sheet.tags = this.tags.map(function (tag) {
            var ids = tag.getIds();
            var newTag = tag.clone();
            /* reconstruct tagMap */
            for (var i = 0; i < ids.length; i += 1) {
                sheet.tagMap[ids[i]] = newTag;
            }
            return newTag;
        });
        /* clone other maps */
        sheet.rehydratedNames = _extends({}, this.rehydratedNames);
        sheet.deferred = _extends({}, this.deferred);
        return sheet;
    };
    /* force StyleSheet to create a new tag on the next injection */
    StyleSheet.prototype.sealAllTags = function sealAllTags() {
        this.capacity = 1;
        this.sealed = true;
    };
    StyleSheet.prototype.makeTag = function makeTag$$1(tag) {
        var lastEl = tag ? tag.styleTag : null;
        var insertBefore = false;
        return makeTag(this.target, lastEl, this.forceServer, insertBefore, this.getImportRuleTag);
    };
    /* get a tag for a given componentId, assign the componentId to one, or shard */
    StyleSheet.prototype.getTagForId = function getTagForId(id) {
        /* simply return a tag, when the componentId was already assigned one */
        var prev = this.tagMap[id];
        if (prev !== undefined && !this.sealed) {
            return prev;
        }
        var tag = this.tags[this.tags.length - 1];
        /* shard (create a new tag) if the tag is exhausted (See MAX_SIZE) */
        this.capacity -= 1;
        if (this.capacity === 0) {
            this.capacity = MAX_SIZE;
            this.sealed = false;
            tag = this.makeTag(tag);
            this.tags.push(tag);
        }
        return this.tagMap[id] = tag;
    };
    /* mainly for injectGlobal to check for its id */
    StyleSheet.prototype.hasId = function hasId(id) {
        return this.tagMap[id] !== undefined;
    };
    /* caching layer checking id+name to already have a corresponding tag and injected rules */
    StyleSheet.prototype.hasNameForId = function hasNameForId(id, name) {
        /* exception for rehydrated names which are checked separately */
        if (this.ignoreRehydratedNames[id] === undefined && this.rehydratedNames[name]) {
            return true;
        }
        var tag = this.tagMap[id];
        return tag !== undefined && tag.hasNameForId(id, name);
    };
    /* registers a componentId and registers it on its tag */
    StyleSheet.prototype.deferredInject = function deferredInject(id, cssRules) {
        /* don't inject when the id is already registered */
        if (this.tagMap[id] !== undefined)
            return;
        var clones = this.clones;
        for (var i = 0; i < clones.length; i += 1) {
            clones[i].deferredInject(id, cssRules);
        }
        this.getTagForId(id).insertMarker(id);
        this.deferred[id] = cssRules;
    };
    /* injects rules for a given id with a name that will need to be cached */
    StyleSheet.prototype.inject = function inject(id, cssRules, name) {
        var clones = this.clones;
        for (var i = 0; i < clones.length; i += 1) {
            clones[i].inject(id, cssRules, name);
        }
        /* add deferred rules for component */
        var injectRules = cssRules;
        var deferredRules = this.deferred[id];
        if (deferredRules !== undefined) {
            injectRules = deferredRules.concat(injectRules);
            delete this.deferred[id];
        }
        var tag = this.getTagForId(id);
        tag.insertRules(id, injectRules, name);
    };
    /* removes all rules for a given id, which doesn't remove its marker but resets it */
    StyleSheet.prototype.remove = function remove(id) {
        var tag = this.tagMap[id];
        if (tag === undefined)
            return;
        var clones = this.clones;
        for (var i = 0; i < clones.length; i += 1) {
            clones[i].remove(id);
        }
        /* remove all rules from the tag */
        tag.removeRules(id);
        /* ignore possible rehydrated names */
        this.ignoreRehydratedNames[id] = true;
        /* delete possible deferred rules */
        delete this.deferred[id];
    };
    StyleSheet.prototype.toHTML = function toHTML() {
        return this.tags.map(function (tag) {
            return tag.toHTML();
        }).join('');
    };
    StyleSheet.prototype.toReactElements = function toReactElements() {
        var id = this.id;
        return this.tags.map(function (tag, i) {
            var key = 'sc-' + id + '-' + i;
            return Object(__WEBPACK_IMPORTED_MODULE_3_react__["cloneElement"])(tag.toElement(), { key: key });
        });
    };
    createClass(StyleSheet, null, [{
            key: 'master',
            get: function get$$1() {
                return master || (master = new StyleSheet().rehydrate());
            }
            /* NOTE: This is just for backwards-compatibility with jest-styled-components */
        }, {
            key: 'instance',
            get: function get$$1() {
                return StyleSheet.master;
            }
        }]);
    return StyleSheet;
}();
var _StyleSheetManager$ch;
// 
/* this error is used for makeStyleTag */
var targetPropErr = process.env.NODE_ENV !== 'production' ? '\nThe StyleSheetManager expects a valid target or sheet prop!\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n'.trim() : '';
var StyleSheetManager = function (_Component) {
    inherits(StyleSheetManager, _Component);
    function StyleSheetManager() {
        classCallCheck(this, StyleSheetManager);
        return possibleConstructorReturn(this, _Component.apply(this, arguments));
    }
    StyleSheetManager.prototype.getChildContext = function getChildContext() {
        var _ref;
        return _ref = {}, _ref[CONTEXT_KEY] = this.sheetInstance, _ref;
    };
    StyleSheetManager.prototype.componentWillMount = function componentWillMount() {
        if (this.props.sheet) {
            this.sheetInstance = this.props.sheet;
        }
        else if (this.props.target) {
            this.sheetInstance = new StyleSheet(this.props.target);
        }
        else {
            throw new Error(targetPropErr);
        }
    };
    StyleSheetManager.prototype.render = function render() {
        /* eslint-disable react/prop-types */
        // Flow v0.43.1 will report an error accessing the `children` property,
        // but v0.47.0 will not. It is necessary to use a type cast instead of
        // a "fixme" comment to satisfy both Flow versions.
        return __WEBPACK_IMPORTED_MODULE_3_react___default.a.Children.only(this.props.children);
    };
    return StyleSheetManager;
}(__WEBPACK_IMPORTED_MODULE_3_react__["Component"]);
StyleSheetManager.childContextTypes = (_StyleSheetManager$ch = {}, _StyleSheetManager$ch[CONTEXT_KEY] = __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.instanceOf(StyleSheet), __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.instanceOf(ServerStyleSheet)]).isRequired, _StyleSheetManager$ch);
process.env.NODE_ENV !== "production" ? StyleSheetManager.propTypes = {
    sheet: __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.instanceOf(StyleSheet), __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.instanceOf(ServerStyleSheet)]),
    target: __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.shape({
        appendChild: __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.func.isRequired
    })
} : void 0;
// 
/* eslint-disable no-underscore-dangle */
/* this error is used for makeStyleTag */
var sheetClosedErr = process.env.NODE_ENV !== 'production' ? '\nCan\'t collect styles once you\'ve consumed a ServerStyleSheet\'s styles!\nServerStyleSheet is a one off instance for each server-side render cycle.\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n'.trim() : '';
var streamBrowserErr = process.env.NODE_ENV !== 'production' ? 'Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.' : '';
var ServerStyleSheet = function () {
    function ServerStyleSheet() {
        classCallCheck(this, ServerStyleSheet);
        /* The master sheet might be reset, so keep a reference here */
        this.masterSheet = StyleSheet.master;
        this.instance = this.masterSheet.clone();
        this.closed = false;
    }
    ServerStyleSheet.prototype.complete = function complete() {
        if (!this.closed) {
            /* Remove closed StyleSheets from the master sheet */
            var index = this.masterSheet.clones.indexOf(this.instance);
            this.masterSheet.clones.splice(index, 1);
            this.closed = true;
        }
    };
    ServerStyleSheet.prototype.collectStyles = function collectStyles(children) {
        if (this.closed) {
            throw new Error(sheetClosedErr);
        }
        return __WEBPACK_IMPORTED_MODULE_3_react___default.a.createElement(StyleSheetManager, { sheet: this.instance }, children);
    };
    ServerStyleSheet.prototype.getStyleTags = function getStyleTags() {
        this.complete();
        return this.instance.toHTML();
    };
    ServerStyleSheet.prototype.getStyleElement = function getStyleElement() {
        this.complete();
        return this.instance.toReactElements();
    };
    ServerStyleSheet.prototype.interleaveWithNodeStream = function interleaveWithNodeStream(readableStream) {
        var _this = this;
        {
            throw new Error(streamBrowserErr);
        }
        /* the tag index keeps track of which tags have already been emitted */
        var instance = this.instance;
        var instanceTagIndex = 0;
        var streamAttr = SC_STREAM_ATTR + '="true"';
        var ourStream = new stream.Readable();
        // $FlowFixMe
        ourStream._read = function () { };
        readableStream.on('data', function (chunk) {
            var tags = instance.tags;
            var html = '';
            /* retrieve html for each new style tag */
            for (; instanceTagIndex < tags.length; instanceTagIndex += 1) {
                var tag = tags[instanceTagIndex];
                html += tag.toHTML(streamAttr);
            }
            /* force our StyleSheets to emit entirely new tags */
            instance.sealAllTags();
            /* prepend style html to chunk */
            ourStream.push(html + chunk);
        });
        readableStream.on('end', function () {
            _this.complete();
            ourStream.push(null);
        });
        readableStream.on('error', function (err) {
            _this.complete();
            ourStream.emit('error', err);
        });
        return ourStream;
    };
    return ServerStyleSheet;
}();
// 
var LIMIT = 200;
var createWarnTooManyClasses = (function (displayName) {
    var generatedClasses = {};
    var warningSeen = false;
    return function (className) {
        if (!warningSeen) {
            generatedClasses[className] = true;
            if (Object.keys(generatedClasses).length >= LIMIT) {
                // Unable to find latestRule in test environment.
                /* eslint-disable no-console, prefer-template */
                console.warn('Over ' + LIMIT + ' classes were generated for component ' + displayName + '. \n' + 'Consider using the attrs method, together with a style object for frequently changed styles.\n' + 'Example:\n' + '  const Component = styled.div.attrs({\n' + '    style: ({ background }) => ({\n' + '      background,\n' + '    }),\n' + '  })`width: 100%;`\n\n' + '  <Component />');
                warningSeen = true;
                generatedClasses = {};
            }
        }
    };
});
// 
/* eslint-disable max-len */
/**
 * Trying to avoid the unknown-prop errors on styled components by filtering by
 * React's attribute whitelist.
 *
 * To regenerate this regex:
 *
 * 1. `npm i -g regexgen` (https://github.com/devongovett/regexgen)
 * 2. Run `regexgen` with the list of space-separated words below as input
 * 3. Surround the emitted regex with this: `/^(GENERATED_REGEX)$/` -- this will ensure a full string match
 *    and no false positives from partials
 **/
/*
children dangerouslySetInnerHTML key ref autoFocus defaultValue valueLink defaultChecked checkedLink innerHTML suppressContentEditableWarning onFocusIn onFocusOut className onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onReset onClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onAnimationStart onAnimationEnd onAnimationIteration onTransitionEnd onCopyCapture onCutCapture onPasteCapture onCompositionEndCapture onCompositionStartCapture onCompositionUpdateCapture onKeyDownCapture onKeyPressCapture onKeyUpCapture onFocusCapture onBlurCapture onChangeCapture onInputCapture onSubmitCapture onResetCapture onClickCapture onContextMenuCapture onDoubleClickCapture onDragCapture onDragEndCapture onDragEnterCapture onDragExitCapture onDragLeaveCapture onDragOverCapture onDragStartCapture onDropCapture onMouseDownCapture onMouseEnterCapture onMouseLeaveCapture onMouseMoveCapture onMouseOutCapture onMouseOverCapture onMouseUpCapture onSelectCapture onTouchCancelCapture onTouchEndCapture onTouchMoveCapture onTouchStartCapture onScrollCapture onWheelCapture onAbortCapture onCanPlayCapture onCanPlayThroughCapture onDurationChangeCapture onEmptiedCapture onEncryptedCapture onEndedCapture onErrorCapture onLoadedDataCapture onLoadedMetadataCapture onLoadStartCapture onPauseCapture onPlayCapture onPlayingCapture onProgressCapture onRateChangeCapture onSeekedCapture onSeekingCapture onStalledCapture onSuspendCapture onTimeUpdateCapture onVolumeChangeCapture onWaitingCapture onLoadCapture onAnimationStartCapture onAnimationEndCapture onAnimationIterationCapture onTransitionEndCapture accept acceptCharset accessKey action allowFullScreen allowTransparency alt as async autoComplete autoPlay capture cellPadding cellSpacing charSet challenge checked cite classID className cols colSpan content contentEditable contextMenu controlsList controls coords crossOrigin data dateTime default defer dir disabled download draggable encType form formAction formEncType formMethod formNoValidate formTarget frameBorder headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media mediaGroup method min minLength multiple muted name nonce noValidate open optimum pattern placeholder playsInline poster preload profile radioGroup readOnly referrerPolicy rel required reversed role rows rowSpan sandbox scope scoped scrolling seamless selected shape size sizes span spellCheck src srcDoc srcLang srcSet start step style summary tabIndex target title type useMap value width wmode wrap about datatype inlist prefix property resource typeof vocab autoCapitalize autoCorrect autoSave color itemProp itemScope itemType itemID itemRef results security unselectable accentHeight accumulate additive alignmentBaseline allowReorder alphabetic amplitude arabicForm ascent attributeName attributeType autoReverse azimuth baseFrequency baseProfile baselineShift bbox begin bias by calcMode capHeight clip clipPath clipRule clipPathUnits colorInterpolation colorInterpolationFilters colorProfile colorRendering contentScriptType contentStyleType cursor cx cy d decelerate descent diffuseConstant direction display divisor dominantBaseline dur dx dy edgeMode elevation enableBackground end exponent externalResourcesRequired fill fillOpacity fillRule filter filterRes filterUnits floodColor floodOpacity focusable fontFamily fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontWeight format from fx fy g1 g2 glyphName glyphOrientationHorizontal glyphOrientationVertical glyphRef gradientTransform gradientUnits hanging horizAdvX horizOriginX ideographic imageRendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes lengthAdjust letterSpacing lightingColor limitingConeAngle local markerEnd markerMid markerStart markerHeight markerUnits markerWidth mask maskContentUnits maskUnits mathematical mode numOctaves offset opacity operator order orient orientation origin overflow overlinePosition overlineThickness paintOrder panose1 pathLength patternContentUnits patternTransform patternUnits pointerEvents points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits r radius refX refY renderingIntent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry scale seed shapeRendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stopColor stopOpacity strikethroughPosition strikethroughThickness string stroke strokeDasharray strokeDashoffset strokeLinecap strokeLinejoin strokeMiterlimit strokeOpacity strokeWidth surfaceScale systemLanguage tableValues targetX targetY textAnchor textDecoration textRendering textLength to transform u1 u2 underlinePosition underlineThickness unicode unicodeBidi unicodeRange unitsPerEm vAlphabetic vHanging vIdeographic vMathematical values vectorEffect version vertAdvY vertOriginX vertOriginY viewBox viewTarget visibility widths wordSpacing writingMode x xHeight x1 x2 xChannelSelector xlinkActuate xlinkArcrole xlinkHref xlinkRole xlinkShow xlinkTitle xlinkType xmlBase xmlns xmlnsXlink xmlLang xmlSpace y y1 y2 yChannelSelector z zoomAndPan
*/
/* eslint-enable max-len */
var ATTRIBUTE_REGEX = /^((?:s(?:uppressContentEditableWarn|croll|pac)|(?:shape|image|text)Render|(?:letter|word)Spac|vHang|hang)ing|(?:on(?:AnimationIteration|C(?:o(?:mposition(?:Update|Start|End)|ntextMenu|py)|anPlayThrough|anPlay|hange|lick|ut)|(?:(?:Duration|Volume|Rate)Chang|(?:MouseLea|(?:Touch|Mouse)Mo|DragLea)v|Paus)e|Loaded(?:Metad|D)ata|(?:Animation|Touch|Load|Drag)Start|(?:(?:T(?:ransition|ouch)|Animation)E|Suspe)nd|DoubleClick|(?:TouchCanc|Whe)el|(?:Mouse(?:Ent|Ov)e|Drag(?:Ent|Ov)e|Erro)r|TimeUpdate|(?:E(?:n(?:crypt|d)|mpti)|S(?:tall|eek))ed|MouseDown|P(?:rogress|laying)|(?:MouseOu|DragExi|S(?:elec|ubmi)|Rese|Inpu)t|KeyPress|DragEnd|Key(?:Down|Up)|(?:Wait|Seek)ing|(?:MouseU|Dro)p|Scroll|Paste|Focus|Abort|Drag|Play|Load|Blur)Captur|alignmentBaselin|(?:limitingConeAng|xlink(?:(?:Arcr|R)o|Tit)|s(?:urfaceSca|ty|ca)|unselectab|baseProfi|fontSty|(?:focus|dragg)ab|multip|profi|tit)l|d(?:ominantBaselin|efaultValu)|a(?:uto(?:Capitaliz|Revers|Sav)|dditiv)|(?:(?:formNoValid|xlinkActu|noValid|accumul|rot)a|autoComple|decelera)t|(?:(?:attribute|item)T|datat)yp|(?:attribute|glyph)Nam|playsInlin|(?:formE|e)ncTyp|(?:writing|input|edge)Mod|(?:xlinkTy|itemSco|keyTy|slo)p|(?:amplitu|mo)d|(?:xmlSpa|non)c|fillRul|(?:dateTi|na)m|r(?:esourc|ol)|xmlBas|wmod)e|(?:glyphOrientationHorizont|loc)al|(?:externalResourcesRequir|select|revers|mut)ed|c(?:o(?:lorInterpolationFilter|ord)s|o(?:lor(?:Interpolation)?|nt(?:rols|ent))|(?:ontentS(?:cript|tyle)Typ|o(?:ntentEditab|lorProfi)l|l(?:assNam|ipRul)|a(?:lcMod|ptur)|it)e|olorRendering|l(?:ipPathUnits|assID)|(?:ontrolsLis|apHeigh)t|h(?:eckedLink|a(?:llenge|rSet)|ildren|ecked)|ell(?:Spac|Padd)ing|o(?:ntextMenu|ls)|(?:rossOrigi|olSpa)n|lip(?:Path)?|ursor|[xy])|glyphOrientationVertical|d(?:angerouslySetInnerHTML|efaultChecked|ownload|isabled|isplay|[xy])|(?:s(?:trikethroughThickn|eaml)es|(?:und|ov)erlineThicknes|r(?:equiredExtension|adiu)|(?:requiredFeatur|tableValu|stitchTil|numOctav|filterR)e|key(?:(?:Splin|Tim)e|Param)|autoFocu|header|bia)s|(?:(?:st(?:rikethroughPosi|dDevia)|(?:und|ov)erlinePosi|(?:textDecor|elev)a|orienta)tio|(?:strokeLinejo|orig)i|formActio|zoomAndPa|onFocusI|directio|(?:vers|act)io|rowSpa|begi|ico)n|o(?:n(?:AnimationIteration|C(?:o(?:mposition(?:Update|Start|End)|ntextMenu|py)|anPlayThrough|anPlay|hange|lick|ut)|(?:(?:Duration|Volume|Rate)Chang|(?:MouseLea|(?:Touch|Mouse)Mo|DragLea)v|Paus)e|Loaded(?:Metad|D)ata|(?:Animation|Touch|Load|Drag)Start|(?:(?:T(?:ransition|ouch)|Animation)E|Suspe)nd|DoubleClick|(?:TouchCanc|Whe)el|(?:Mouse(?:Ent|Ov)e|Drag(?:Ent|Ov)e|Erro)r|TimeUpdate|(?:E(?:n(?:crypt|d)|mpti)|S(?:tall|eek))ed|MouseDown|P(?:rogress|laying)|(?:MouseOu|DragExi|S(?:elec|ubmi)|Rese|Inpu)t|KeyPress|DragEnd|Key(?:Down|Up)|(?:Wait|Seek)ing|(?:MouseU|Dro)p|Scroll|Paste|Focus|Abort|Drag|Play|Load|Blur)|rient)|p(?:reserveA(?:spectRatio|lpha)|ointsAt[X-Z]|anose1)|(?:patternContent|ma(?:sk(?:Content)?|rker)|primitive|gradient|pattern|filter)Units|(?:gradientT|patternT|t)ransform|(?:(?:allowTranspar|baseFrequ)enc|re(?:ferrerPolic|adOnl)|(?:(?:st(?:roke|op)O|floodO|fillO|o)pac|integr|secur)it|visibilit|fontFamil|accessKe|propert|summar)y|(?:strokeMiterlimi|(?:specularConsta|repeatCou|fontVaria)n|(?:(?:specularE|e)xpon|renderingInt|asc)en|d(?:iffuseConsta|esce)n|(?:fontSizeAdju|lengthAdju|manife)s|baselineShif|vectorEffec|(?:(?:mar(?:ker|gin)|x)H|accentH|fontW)eigh|a(?:utoCorrec|bou)|markerStar|onFocusOu|intercep|restar|forma|inlis|heigh|lis)t|(?:(?:st(?:rokeDasho|artO)|o)ffs|acceptChars|formTarg|viewTarg|srcS)et|(?:(?:enableBackgrou|markerE)n|s(?:p(?:readMetho|ee)|ee)|formMetho|m(?:arkerMi|etho)|preloa|kin)d|k(?:ernel(?:UnitLength|Matrix)|[1-4])|(?:[xy]ChannelSelect|lightingCol|textAnch|floodCol|stopCol|operat|htmlF)or|(?:allowFullScre|hidd)en|strokeDasharray|systemLanguage|(?:strokeLineca|itemPro|useMa|wra|loo)p|v(?:Mathematical|ert(?:Origin[XY]|AdvY)|alues|ocab)|(?:pointerEve|keyPoi)nts|unicodeRange|(?:(?:allowReord|placehold|frameBord|paintOrd|post|ord)e|repeatDu|d(?:efe|u))r|mathematical|(?:vI|i)deographic|h(?:oriz(?:Origin|Adv)X|ttpEquiv)|u(?:nicodeBidi|[12])|(?:fontStretc|hig)h|(?:(?:mar(?:ker|gin)W|strokeW)id|azimu)th|vAlphabetic|mediaGroup|spellCheck|(?:unitsPerE|optimu|fro)m|r(?:adioGroup|e(?:sults|f[XY]|l)|ows|[xy])|(?:xmlnsXl|valueL)ink|a(?:rabicForm|l(?:phabetic|t)|sync)|pathLength|(?:text|m(?:in|ax))Length|innerHTML|xlinkShow|(?:xlinkHr|glyphR)ef|r(?:e(?:quired|sult|f))?|o(?:verflow|pen)|(?:tabInde|(?:sand|b)bo|viewBo)x|(?:(?:href|xml|src)La|kerni)ng|f(?:o(?:ntSize|rm)|il(?:ter|l))|autoPlay|unicode|p(?:attern|oints)|t(?:arget[XY]|o)|i(?:temRef|n2|s)|divisor|d(?:efault|ata|ir)?|srcDoc|s(?:coped|te(?:m[hv]|p)|pan)|(?:width|size)s|(?:stri|la)ng|prefix|itemID|s(?:t(?:roke|art)|hape|cope|rc)|a(?:ccept|s)|t(?:arget|ype)|typeof|width|value|x(?:mlns)?|label|m(?:edia|a(?:sk|x)|in)|size|href|k(?:ey)?|end|low|x[12]|i[dn]|y[12]|g[12]|by|f[xy]|[yz])$/;
/* From DOMProperty */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
var isCustomAttribute = RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$'));
var validAttr = (function (name) {
    return ATTRIBUTE_REGEX.test(name) || isCustomAttribute(name.toLowerCase());
});
// 
function isTag(target) {
    return typeof target === 'string';
}
// 
/* eslint-disable no-undef */
function getComponentName(target) {
    return target.displayName || target.name || 'Component';
}
// 
var determineTheme = (function (props, fallbackTheme, defaultProps) {
    // Props should take precedence over ThemeProvider, which should take precedence over
    // defaultProps, but React automatically puts defaultProps on props.
    /* eslint-disable react/prop-types */
    var isDefaultTheme = defaultProps && props.theme === defaultProps.theme;
    var theme = props.theme && !isDefaultTheme ? props.theme : fallbackTheme;
    /* eslint-enable */
    return theme;
});
// 
var escapeRegex = /[[\].#*$><+~=|^:(),"'`-]+/g;
var dashesAtEnds = /(^-|-$)/g;
/**
 * TODO: Explore using CSS.escape when it becomes more available
 * in evergreen browsers.
 */
function escape(str) {
    return str
        .replace(escapeRegex, '-')
        .replace(dashesAtEnds, '');
}
// 
/**
 * Creates a broadcast that can be listened to, i.e. simple event emitter
 *
 * @see https://github.com/ReactTraining/react-broadcast
 */
var createBroadcast = function createBroadcast(initialState) {
    var listeners = {};
    var id = 0;
    var state = initialState;
    function publish(nextState) {
        state = nextState;
        // eslint-disable-next-line guard-for-in, no-restricted-syntax
        for (var key in listeners) {
            var listener = listeners[key];
            if (listener === undefined) {
                // eslint-disable-next-line no-continue
                continue;
            }
            listener(state);
        }
    }
    function subscribe(listener) {
        var currentId = id;
        listeners[currentId] = listener;
        id += 1;
        listener(state);
        return currentId;
    }
    function unsubscribe(unsubID) {
        listeners[unsubID] = undefined;
    }
    return { publish: publish, subscribe: subscribe, unsubscribe: unsubscribe };
};
var _ThemeProvider$childC;
var _ThemeProvider$contex;
// 
/* globals React$Element */
// NOTE: DO NOT CHANGE, changing this is a semver major change!
var CHANNEL = '__styled-components__';
var CHANNEL_NEXT = CHANNEL + 'next__';
var CONTEXT_CHANNEL_SHAPE = __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.shape({
    getTheme: __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.func,
    subscribe: __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.func,
    unsubscribe: __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.func
});
var warnChannelDeprecated = void 0;
if (process.env.NODE_ENV !== 'production') {
    warnChannelDeprecated = once(function () {
        // eslint-disable-next-line no-console
        console.error('Warning: Usage of `context.' + CHANNEL + '` as a function is deprecated. It will be replaced with the object on `.context.' + CHANNEL_NEXT + '` in a future version.');
    });
}
var isFunction = function isFunction(test) {
    return typeof test === 'function';
};
/**
 * Provide a theme to an entire react component tree via context and event listeners (have to do
 * both context and event emitter as pure components block context updates)
 */
var ThemeProvider = function (_Component) {
    inherits(ThemeProvider, _Component);
    function ThemeProvider() {
        classCallCheck(this, ThemeProvider);
        var _this = possibleConstructorReturn(this, _Component.call(this));
        _this.unsubscribeToOuterId = -1;
        _this.getTheme = _this.getTheme.bind(_this);
        return _this;
    }
    ThemeProvider.prototype.componentWillMount = function componentWillMount() {
        var _this2 = this;
        // If there is a ThemeProvider wrapper anywhere around this theme provider, merge this theme
        // with the outer theme
        var outerContext = this.context[CHANNEL_NEXT];
        if (outerContext !== undefined) {
            this.unsubscribeToOuterId = outerContext.subscribe(function (theme) {
                _this2.outerTheme = theme;
                if (_this2.broadcast !== undefined) {
                    _this2.publish(_this2.props.theme);
                }
            });
        }
        this.broadcast = createBroadcast(this.getTheme());
    };
    ThemeProvider.prototype.getChildContext = function getChildContext() {
        var _this3 = this, _babelHelpers$extends;
        return _extends({}, this.context, (_babelHelpers$extends = {}, _babelHelpers$extends[CHANNEL_NEXT] = {
            getTheme: this.getTheme,
            subscribe: this.broadcast.subscribe,
            unsubscribe: this.broadcast.unsubscribe
        }, _babelHelpers$extends[CHANNEL] = function (subscriber) {
            if (process.env.NODE_ENV !== 'production') {
                warnChannelDeprecated();
            }
            // Patch the old `subscribe` provide via `CHANNEL` for older clients.
            var unsubscribeId = _this3.broadcast.subscribe(subscriber);
            return function () {
                return _this3.broadcast.unsubscribe(unsubscribeId);
            };
        }, _babelHelpers$extends));
    };
    ThemeProvider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.theme !== nextProps.theme) {
            this.publish(nextProps.theme);
        }
    };
    ThemeProvider.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.unsubscribeToOuterId !== -1) {
            this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeToOuterId);
        }
    };
    // Get the theme from the props, supporting both (outerTheme) => {} as well as object notation
    ThemeProvider.prototype.getTheme = function getTheme(passedTheme) {
        var theme = passedTheme || this.props.theme;
        if (isFunction(theme)) {
            var mergedTheme = theme(this.outerTheme);
            if (process.env.NODE_ENV !== 'production' && !__WEBPACK_IMPORTED_MODULE_0_is_plain_object___default()(mergedTheme)) {
                throw new Error(process.env.NODE_ENV !== 'production' ? '[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!' : '');
            }
            return mergedTheme;
        }
        if (!__WEBPACK_IMPORTED_MODULE_0_is_plain_object___default()(theme)) {
            throw new Error(process.env.NODE_ENV !== 'production' ? '[ThemeProvider] Please make your theme prop a plain object' : '');
        }
        return _extends({}, this.outerTheme, theme);
    };
    ThemeProvider.prototype.publish = function publish(theme) {
        this.broadcast.publish(this.getTheme(theme));
    };
    ThemeProvider.prototype.render = function render() {
        if (!this.props.children) {
            return null;
        }
        return __WEBPACK_IMPORTED_MODULE_3_react___default.a.Children.only(this.props.children);
    };
    return ThemeProvider;
}(__WEBPACK_IMPORTED_MODULE_3_react__["Component"]);
ThemeProvider.childContextTypes = (_ThemeProvider$childC = {}, _ThemeProvider$childC[CHANNEL] = __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.func, _ThemeProvider$childC[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _ThemeProvider$childC);
ThemeProvider.contextTypes = (_ThemeProvider$contex = {}, _ThemeProvider$contex[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _ThemeProvider$contex);
// 
// HACK for generating all static styles without needing to allocate
// an empty execution context every single time...
var STATIC_EXECUTION_CONTEXT = {};
var _StyledComponent = (function (ComponentStyle, constructWithOptions) {
    var identifiers = {};
    /* We depend on components having unique IDs */
    var generateId = function generateId(_displayName, parentComponentId) {
        var displayName = typeof _displayName !== 'string' ? 'sc' : escape(_displayName);
        var componentId = void 0;
        /**
         * only fall back to hashing the component injection order if
         * a proper displayName isn't provided by the babel plugin
         */
        if (!_displayName) {
            var nr = (identifiers[displayName] || 0) + 1;
            identifiers[displayName] = nr;
            componentId = displayName + '-' + ComponentStyle.generateName(displayName + nr);
        }
        else {
            componentId = displayName + '-' + ComponentStyle.generateName(displayName);
        }
        return parentComponentId !== undefined ? parentComponentId + '-' + componentId : componentId;
    };
    var BaseStyledComponent = function (_Component) {
        inherits(BaseStyledComponent, _Component);
        function BaseStyledComponent() {
            var _temp, _this, _ret;
            classCallCheck(this, BaseStyledComponent);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.attrs = {}, _this.state = {
                theme: null,
                generatedClassName: ''
            }, _this.unsubscribeId = -1, _temp), possibleConstructorReturn(_this, _ret);
        }
        BaseStyledComponent.prototype.unsubscribeFromContext = function unsubscribeFromContext() {
            if (this.unsubscribeId !== -1) {
                this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeId);
            }
        };
        BaseStyledComponent.prototype.buildExecutionContext = function buildExecutionContext(theme, props) {
            var attrs = this.constructor.attrs;
            var context = _extends({}, props, { theme: theme });
            if (attrs === undefined) {
                return context;
            }
            this.attrs = Object.keys(attrs).reduce(function (acc, key) {
                var attr = attrs[key];
                // eslint-disable-next-line no-param-reassign
                acc[key] = typeof attr === 'function' ? attr(context) : attr;
                return acc;
            }, {});
            return _extends({}, context, this.attrs);
        };
        BaseStyledComponent.prototype.generateAndInjectStyles = function generateAndInjectStyles(theme, props) {
            var _constructor = this.constructor, attrs = _constructor.attrs, componentStyle = _constructor.componentStyle, warnTooManyClasses = _constructor.warnTooManyClasses;
            var styleSheet = this.context[CONTEXT_KEY] || StyleSheet.master;
            // staticaly styled-components don't need to build an execution context object,
            // and shouldn't be increasing the number of class names
            if (componentStyle.isStatic && attrs === undefined) {
                return componentStyle.generateAndInjectStyles(STATIC_EXECUTION_CONTEXT, styleSheet);
            }
            else {
                var executionContext = this.buildExecutionContext(theme, props);
                var className = componentStyle.generateAndInjectStyles(executionContext, styleSheet);
                if (process.env.NODE_ENV !== 'production' && warnTooManyClasses !== undefined) {
                    warnTooManyClasses(className);
                }
                return className;
            }
        };
        BaseStyledComponent.prototype.componentWillMount = function componentWillMount() {
            var _this2 = this;
            var componentStyle = this.constructor.componentStyle;
            var styledContext = this.context[CHANNEL_NEXT];
            // If this is a staticaly-styled component, we don't need to the theme
            // to generate or build styles.
            if (componentStyle.isStatic) {
                var generatedClassName = this.generateAndInjectStyles(STATIC_EXECUTION_CONTEXT, this.props);
                this.setState({ generatedClassName: generatedClassName });
                // If there is a theme in the context, subscribe to the event emitter. This
                // is necessary due to pure components blocking context updates, this circumvents
                // that by updating when an event is emitted
            }
            else if (styledContext !== undefined) {
                var subscribe = styledContext.subscribe;
                this.unsubscribeId = subscribe(function (nextTheme) {
                    // This will be called once immediately
                    var theme = determineTheme(_this2.props, nextTheme, _this2.constructor.defaultProps);
                    var generatedClassName = _this2.generateAndInjectStyles(theme, _this2.props);
                    _this2.setState({ theme: theme, generatedClassName: generatedClassName });
                });
            }
            else {
                // eslint-disable-next-line react/prop-types
                var theme = this.props.theme || {};
                var _generatedClassName = this.generateAndInjectStyles(theme, this.props);
                this.setState({ theme: theme, generatedClassName: _generatedClassName });
            }
        };
        BaseStyledComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            var _this3 = this;
            // If this is a staticaly-styled component, we don't need to listen to
            // props changes to update styles
            var componentStyle = this.constructor.componentStyle;
            if (componentStyle.isStatic) {
                return;
            }
            this.setState(function (oldState) {
                var theme = determineTheme(nextProps, oldState.theme, _this3.constructor.defaultProps);
                var generatedClassName = _this3.generateAndInjectStyles(theme, nextProps);
                return { theme: theme, generatedClassName: generatedClassName };
            });
        };
        BaseStyledComponent.prototype.componentWillUnmount = function componentWillUnmount() {
            this.unsubscribeFromContext();
        };
        BaseStyledComponent.prototype.render = function render() {
            var _this4 = this;
            // eslint-disable-next-line react/prop-types
            var innerRef = this.props.innerRef;
            var generatedClassName = this.state.generatedClassName;
            var _constructor2 = this.constructor, styledComponentId = _constructor2.styledComponentId, target = _constructor2.target;
            var isTargetTag = isTag(target);
            var className = [
                // eslint-disable-next-line react/prop-types
                this.props.className, styledComponentId, this.attrs.className, generatedClassName
            ].filter(Boolean).join(' ');
            var baseProps = _extends({}, this.attrs, {
                className: className
            });
            if (isStyledComponent(target)) {
                baseProps.innerRef = innerRef;
            }
            else {
                baseProps.ref = innerRef;
            }
            var propsForElement = Object.keys(this.props).reduce(function (acc, propName) {
                // Don't pass through non HTML tags through to HTML elements
                // always omit innerRef
                if (propName !== 'innerRef' && propName !== 'className' && (!isTargetTag || validAttr(propName))) {
                    // eslint-disable-next-line no-param-reassign
                    acc[propName] = _this4.props[propName];
                }
                return acc;
            }, baseProps);
            return Object(__WEBPACK_IMPORTED_MODULE_3_react__["createElement"])(target, propsForElement);
        };
        return BaseStyledComponent;
    }(__WEBPACK_IMPORTED_MODULE_3_react__["Component"]);
    var createStyledComponent = function createStyledComponent(target, options, rules) {
        var _StyledComponent$cont;
        var _options$displayName = options.displayName, displayName = _options$displayName === undefined ? isTag(target) ? 'styled.' + target : 'Styled(' + getComponentName(target) + ')' : _options$displayName, _options$componentId = options.componentId, componentId = _options$componentId === undefined ? generateId(options.displayName, options.parentComponentId) : _options$componentId, _options$ParentCompon = options.ParentComponent, ParentComponent = _options$ParentCompon === undefined ? BaseStyledComponent : _options$ParentCompon, extendingRules = options.rules, attrs = options.attrs;
        var styledComponentId = options.displayName && options.componentId ? escape(options.displayName) + '-' + options.componentId : componentId;
        var componentStyle = new ComponentStyle(extendingRules === undefined ? rules : extendingRules.concat(rules), attrs, styledComponentId);
        var StyledComponent = function (_ParentComponent) {
            inherits(StyledComponent, _ParentComponent);
            function StyledComponent() {
                classCallCheck(this, StyledComponent);
                return possibleConstructorReturn(this, _ParentComponent.apply(this, arguments));
            }
            StyledComponent.withComponent = function withComponent(tag) {
                var previousComponentId = options.componentId, optionsToCopy = objectWithoutProperties(options, ['componentId']);
                var newComponentId = previousComponentId && previousComponentId + '-' + (isTag(tag) ? tag : escape(getComponentName(tag)));
                var newOptions = _extends({}, optionsToCopy, {
                    componentId: newComponentId,
                    ParentComponent: StyledComponent
                });
                return createStyledComponent(tag, newOptions, rules);
            };
            createClass(StyledComponent, null, [{
                    key: 'extend',
                    get: function get$$1() {
                        var rulesFromOptions = options.rules, parentComponentId = options.componentId, optionsToCopy = objectWithoutProperties(options, ['rules', 'componentId']);
                        var newRules = rulesFromOptions === undefined ? rules : rulesFromOptions.concat(rules);
                        var newOptions = _extends({}, optionsToCopy, {
                            rules: newRules,
                            parentComponentId: parentComponentId,
                            ParentComponent: StyledComponent
                        });
                        return constructWithOptions(createStyledComponent, target, newOptions);
                    }
                }]);
            return StyledComponent;
        }(ParentComponent);
        StyledComponent.contextTypes = (_StyledComponent$cont = {}, _StyledComponent$cont[CHANNEL] = __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.func, _StyledComponent$cont[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _StyledComponent$cont[CONTEXT_KEY] = __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.instanceOf(StyleSheet), __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.instanceOf(ServerStyleSheet)]), _StyledComponent$cont);
        StyledComponent.displayName = displayName;
        StyledComponent.styledComponentId = styledComponentId;
        StyledComponent.attrs = attrs;
        StyledComponent.componentStyle = componentStyle;
        StyledComponent.target = target;
        if (process.env.NODE_ENV !== 'production') {
            StyledComponent.warnTooManyClasses = createWarnTooManyClasses(displayName);
        }
        return StyledComponent;
    };
    return createStyledComponent;
});
// Source: https://github.com/garycourt/murmurhash-js/blob/master/murmurhash2_gc.js
function murmurhash(str) {
    var l = str.length | 0, h = l | 0, i = 0, k;
    while (l >= 4) {
        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
        k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
        k ^= k >>> 24;
        k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
        h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;
        l -= 4;
        ++i;
    }
    switch (l) {
        case 3:
            h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            h ^= str.charCodeAt(i) & 0xff;
            h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
    }
    h ^= h >>> 13;
    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
    h ^= h >>> 15;
    return h >>> 0;
}
// 
var areStylesCacheable = IS_BROWSER;
var isStaticRules = function isStaticRules(rules, attrs) {
    for (var i = 0; i < rules.length; i += 1) {
        var rule = rules[i];
        // recursive case
        if (Array.isArray(rule) && !isStaticRules(rule)) {
            return false;
        }
        else if (typeof rule === 'function' && !isStyledComponent(rule)) {
            // functions are allowed to be static if they're just being
            // used to get the classname of a nested styled copmonent
            return false;
        }
    }
    if (attrs !== undefined) {
        // eslint-disable-next-line guard-for-in, no-restricted-syntax
        for (var key in attrs) {
            var value = attrs[key];
            if (typeof value === 'function') {
                return false;
            }
        }
    }
    return true;
};
var isHRMEnabled = typeof module !== 'undefined' && module.hot && process.env.NODE_ENV !== 'production';
/*
 ComponentStyle is all the CSS-specific stuff, not
 the React-specific stuff.
 */
var _ComponentStyle = (function (nameGenerator, flatten, stringifyRules) {
    /* combines hashStr (murmurhash) and nameGenerator for convenience */
    var generateRuleHash = function generateRuleHash(str) {
        return nameGenerator(murmurhash(str));
    };
    var ComponentStyle = function () {
        function ComponentStyle(rules, attrs, componentId) {
            classCallCheck(this, ComponentStyle);
            this.rules = rules;
            this.isStatic = !isHRMEnabled && isStaticRules(rules, attrs);
            this.componentId = componentId;
            if (!StyleSheet.master.hasId(componentId)) {
                var placeholder = process.env.NODE_ENV !== 'production' ? ['.' + componentId + ' {}'] : [];
                StyleSheet.master.deferredInject(componentId, placeholder);
            }
        }
        /*
         * Flattens a rule set into valid CSS
         * Hashes it, wraps the whole chunk in a .hash1234 {}
         * Returns the hash to be injected on render()
         * */
        ComponentStyle.prototype.generateAndInjectStyles = function generateAndInjectStyles(executionContext, styleSheet) {
            var isStatic = this.isStatic, componentId = this.componentId, lastClassName = this.lastClassName;
            if (areStylesCacheable && isStatic && lastClassName !== undefined) {
                return lastClassName;
            }
            var flatCSS = flatten(this.rules, executionContext);
            var name = generateRuleHash(this.componentId + flatCSS.join(''));
            if (!styleSheet.hasNameForId(componentId, name)) {
                var css = stringifyRules(flatCSS, '.' + name);
                styleSheet.inject(this.componentId, css, name);
            }
            this.lastClassName = name;
            return name;
        };
        ComponentStyle.generateName = function generateName(str) {
            return generateRuleHash(str);
        };
        return ComponentStyle;
    }();
    return ComponentStyle;
});
// 
// Thanks to ReactDOMFactories for this handy list!
var domElements = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr',
    // SVG
    'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];
// 
var _styled = (function (styledComponent, constructWithOptions) {
    var styled = function styled(tag) {
        return constructWithOptions(styledComponent, tag);
    };
    // Shorthands for all valid HTML Elements
    domElements.forEach(function (domElement) {
        styled[domElement] = styled(domElement);
    });
    return styled;
});
// 
var replaceWhitespace = function replaceWhitespace(str) {
    return str.replace(/\s|\\n/g, '');
};
var _keyframes = (function (nameGenerator, stringifyRules, css) {
    return function () {
        var styleSheet = StyleSheet.master;
        var rules = css.apply(undefined, arguments);
        var name = nameGenerator(murmurhash(replaceWhitespace(JSON.stringify(rules))));
        var id = 'sc-keyframes-' + name;
        if (!styleSheet.hasNameForId(id, name)) {
            styleSheet.inject(id, stringifyRules(rules, name, '@keyframes'), name);
        }
        return name;
    };
});
// 
var _injectGlobal = (function (stringifyRules, css) {
    var injectGlobal = function injectGlobal() {
        var styleSheet = StyleSheet.master;
        var rules = css.apply(undefined, arguments);
        var hash = murmurhash(JSON.stringify(rules));
        var id = 'sc-global-' + hash;
        if (!styleSheet.hasId(id)) {
            styleSheet.inject(id, stringifyRules(rules));
        }
    };
    return injectGlobal;
});
// 
var _constructWithOptions = (function (css) {
    var constructWithOptions = function constructWithOptions(componentConstructor, tag) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        if (typeof tag !== 'string' && typeof tag !== 'function') {
            throw new Error(process.env.NODE_ENV !== 'production' ? 'Cannot create styled-component for component: ' + String(tag) : '');
        }
        /* This is callable directly as a template function */
        // $FlowFixMe: Not typed to avoid destructuring arguments
        var templateFunction = function templateFunction() {
            return componentConstructor(tag, options, css.apply(undefined, arguments));
        };
        /* If config methods are called, wrap up a new template function and merge options */
        templateFunction.withConfig = function (config) {
            return constructWithOptions(componentConstructor, tag, _extends({}, options, config));
        };
        templateFunction.attrs = function (attrs) {
            return constructWithOptions(componentConstructor, tag, _extends({}, options, {
                attrs: _extends({}, options.attrs || {}, attrs)
            }));
        };
        return templateFunction;
    };
    return constructWithOptions;
});
// 
/* globals ReactClass */
var wrapWithTheme = function wrapWithTheme(Component$$1) {
    var _WithTheme$contextTyp;
    var componentName = Component$$1.displayName || Component$$1.name || 'Component';
    var isStatelessFunctionalComponent = typeof Component$$1 === 'function' && !(Component$$1.prototype && 'isReactComponent' in Component$$1.prototype);
    // NOTE: We can't pass a ref to a stateless functional component
    var shouldSetInnerRef = isStyledComponent(Component$$1) || isStatelessFunctionalComponent;
    var WithTheme = function (_React$Component) {
        inherits(WithTheme, _React$Component);
        function WithTheme() {
            var _temp, _this, _ret;
            classCallCheck(this, WithTheme);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {}, _this.unsubscribeId = -1, _temp), possibleConstructorReturn(_this, _ret);
        }
        // NOTE: This is so that isStyledComponent passes for the innerRef unwrapping
        WithTheme.prototype.componentWillMount = function componentWillMount() {
            var _this2 = this;
            var defaultProps = this.constructor.defaultProps;
            var styledContext = this.context[CHANNEL_NEXT];
            var themeProp = determineTheme(this.props, undefined, defaultProps);
            if (styledContext === undefined && themeProp === undefined && process.env.NODE_ENV !== 'production') {
                // eslint-disable-next-line no-console
                console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps');
            }
            else if (styledContext === undefined && themeProp !== undefined) {
                this.setState({ theme: themeProp });
            }
            else {
                var subscribe = styledContext.subscribe;
                this.unsubscribeId = subscribe(function (nextTheme) {
                    var theme = determineTheme(_this2.props, nextTheme, defaultProps);
                    _this2.setState({ theme: theme });
                });
            }
        };
        WithTheme.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            var defaultProps = this.constructor.defaultProps;
            this.setState(function (oldState) {
                var theme = determineTheme(nextProps, oldState.theme, defaultProps);
                return { theme: theme };
            });
        };
        WithTheme.prototype.componentWillUnmount = function componentWillUnmount() {
            if (this.unsubscribeId !== -1) {
                this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeId);
            }
        };
        WithTheme.prototype.render = function render() {
            var props = _extends({
                theme: this.state.theme
            }, this.props);
            if (!shouldSetInnerRef) {
                props.ref = props.innerRef;
                delete props.innerRef;
            }
            return __WEBPACK_IMPORTED_MODULE_3_react___default.a.createElement(Component$$1, props);
        };
        return WithTheme;
    }(__WEBPACK_IMPORTED_MODULE_3_react___default.a.Component);
    WithTheme.displayName = 'WithTheme(' + componentName + ')';
    WithTheme.styledComponentId = 'withTheme';
    WithTheme.contextTypes = (_WithTheme$contextTyp = {}, _WithTheme$contextTyp[CHANNEL] = __WEBPACK_IMPORTED_MODULE_4_prop_types___default.a.func, _WithTheme$contextTyp[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _WithTheme$contextTyp);
    return __WEBPACK_IMPORTED_MODULE_5_hoist_non_react_statics___default()(WithTheme, Component$$1);
};
// 
/* eslint-disable */
var __DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS = {
    StyleSheet: StyleSheet
};
// 
/* Import singletons */
/* Import singleton constructors */
/* Import components */
/* Import Higher Order Components */
/* Warning if you've imported this file on React Native */
if (process.env.NODE_ENV !== 'production' && typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    // eslint-disable-next-line no-console
    console.warn("It looks like you've imported 'styled-components' on React Native.\n" + "Perhaps you're looking to import 'styled-components/native'?\n" + 'Read more about this at https://www.styled-components.com/docs/basics#react-native');
}
/* Warning if there are several instances of styled-components */
if (process.env.NODE_ENV !== 'production' && typeof window !== 'undefined') {
    window['__styled-components-init__'] = window['__styled-components-init__'] || 0;
    if (window['__styled-components-init__'] === 1) {
        // eslint-disable-next-line no-console
        console.warn("It looks like there are several instances of 'styled-components' initialized in this application. " + 'This may cause dynamic styles not rendering properly, errors happening during rehydration process ' + 'and makes you application bigger without a good reason.\n\n' + 'See https://s-c.sh/2BAXzed for more info.');
    }
    window['__styled-components-init__'] += 1;
}
/* Instantiate singletons */
var ComponentStyle = _ComponentStyle(generateAlphabeticName, flatten, stringifyRules);
var constructWithOptions = _constructWithOptions(css);
var StyledComponent = _StyledComponent(ComponentStyle, constructWithOptions);
/* Instantiate exported singletons */
var keyframes = _keyframes(generateAlphabeticName, stringifyRules, css);
var injectGlobal = _injectGlobal(stringifyRules, css);
var styled = _styled(StyledComponent, constructWithOptions);

/* harmony default export */ __webpack_exports__["b"] = (styled);


/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(2), __webpack_require__(84)(module)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM // For now, this is true - might change in the future.
};
module.exports = ExecutionEnvironment;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */
var emptyFunction = __webpack_require__(5);
/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
    /**
     * Listen to DOM events during the bubble phase.
     *
     * @param {DOMEventTarget} target DOM element to register listener on.
     * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
     * @param {function} callback Callback function.
     * @return {object} Object with a `remove` method.
     */
    listen: function listen(target, eventType, callback) {
        if (target.addEventListener) {
            target.addEventListener(eventType, callback, false);
            return {
                remove: function remove() {
                    target.removeEventListener(eventType, callback, false);
                }
            };
        }
        else if (target.attachEvent) {
            target.attachEvent('on' + eventType, callback);
            return {
                remove: function remove() {
                    target.detachEvent('on' + eventType, callback);
                }
            };
        }
    },
    /**
     * Listen to DOM events during the capture phase.
     *
     * @param {DOMEventTarget} target DOM element to register listener on.
     * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
     * @param {function} callback Callback function.
     * @return {object} Object with a `remove` method.
     */
    capture: function capture(target, eventType, callback) {
        if (target.addEventListener) {
            target.addEventListener(eventType, callback, true);
            return {
                remove: function remove() {
                    target.removeEventListener(eventType, callback, true);
                }
            };
        }
        else {
            if (process.env.NODE_ENV !== 'production') {
                console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
            }
            return {
                remove: emptyFunction
            };
        }
    },
    registerDefault: function registerDefault() { }
};
module.exports = EventListener;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */
/* eslint-disable fb-www/typeof-undefined */
/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) {
    doc = doc || (typeof document !== 'undefined' ? document : undefined);
    if (typeof doc === 'undefined') {
        return null;
    }
    try {
        return doc.activeElement || doc.body;
    }
    catch (e) {
        return doc.body;
    }
}
module.exports = getActiveElement;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 *
 */
/*eslint-disable no-self-compare */

var hasOwnProperty = Object.prototype.hasOwnProperty;
/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
    // SameValue algorithm
    if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        // Added the nonzero y check to make Flow happy, but it is redundant
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
    }
    else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
}
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
        return true;
    }
    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
    }
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) {
        return false;
    }
    // Test for A's keys different from B.
    for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
            return false;
        }
    }
    return true;
}
module.exports = shallowEqual;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */
var isTextNode = __webpack_require__(47);
/*eslint-disable no-bitwise */
/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
    if (!outerNode || !innerNode) {
        return false;
    }
    else if (outerNode === innerNode) {
        return true;
    }
    else if (isTextNode(outerNode)) {
        return false;
    }
    else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
    }
    else if ('contains' in outerNode) {
        return outerNode.contains(innerNode);
    }
    else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    }
    else {
        return false;
    }
}
module.exports = containsNode;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
    // IE8 can throw "Can't move focus to the control because it is invisible,
    // not enabled, or of a type that does not accept the focus." for all kinds of
    // reasons that are too expensive and fragile to test.
    try {
        node.focus();
    }
    catch (e) { }
}
module.exports = focusNode;


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
function isAbsolute(pathname) {
    return pathname.charAt(0) === '/';
}
// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
        list[i] = list[k];
    }
    list.pop();
}
// This implementation is based heavily on node's url.parse
function resolvePathname(to) {
    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var toParts = to && to.split('/') || [];
    var fromParts = from && from.split('/') || [];
    var isToAbs = to && isAbsolute(to);
    var isFromAbs = from && isAbsolute(from);
    var mustEndAbs = isToAbs || isFromAbs;
    if (to && isAbsolute(to)) {
        // to is absolute
        fromParts = toParts;
    }
    else if (toParts.length) {
        // to is relative, drop the filename
        fromParts.pop();
        fromParts = fromParts.concat(toParts);
    }
    if (!fromParts.length)
        return '/';
    var hasTrailingSlash = void 0;
    if (fromParts.length) {
        var last = fromParts[fromParts.length - 1];
        hasTrailingSlash = last === '.' || last === '..' || last === '';
    }
    else {
        hasTrailingSlash = false;
    }
    var up = 0;
    for (var i = fromParts.length; i >= 0; i--) {
        var part = fromParts[i];
        if (part === '.') {
            spliceOne(fromParts, i);
        }
        else if (part === '..') {
            spliceOne(fromParts, i);
            up++;
        }
        else if (up) {
            spliceOne(fromParts, i);
            up--;
        }
    }
    if (!mustEndAbs)
        for (; up--; up) {
            fromParts.unshift('..');
        }
    if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0])))
        fromParts.unshift('');
    var result = fromParts.join('/');
    if (hasTrailingSlash && result.substr(-1) !== '/')
        result += '/';
    return result;
}
/* harmony default export */ __webpack_exports__["default"] = (resolvePathname);


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
function valueEqual(a, b) {
    if (a === b)
        return true;
    if (a == null || b == null)
        return false;
    if (Array.isArray(a)) {
        return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
            return valueEqual(item, b[index]);
        });
    }
    var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
    var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);
    if (aType !== bType)
        return false;
    if (aType === 'object') {
        var aValue = a.valueOf();
        var bValue = b.valueOf();
        if (aValue !== a || bValue !== b)
            return valueEqual(aValue, bValue);
        var aKeys = Object.keys(a);
        var bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length)
            return false;
        return aKeys.every(function (key) {
            return valueEqual(a[key], b[key]);
        });
    }
    return false;
}
/* harmony default export */ __webpack_exports__["default"] = (valueEqual);


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
    return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
};
var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
    return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
};
var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
    return callback(window.confirm(message));
}; // eslint-disable-line no-alert
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */
var supportsHistory = exports.supportsHistory = function supportsHistory() {
    var ua = window.navigator.userAgent;
    if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1)
        return false;
    return window.history && 'pushState' in window.history;
};
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */
var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
    return window.navigator.userAgent.indexOf('Trident') === -1;
};
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */
var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
    return window.navigator.userAgent.indexOf('Firefox') === -1;
};
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */
var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
    return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
};


/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_invariant__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) {
    if (keys.indexOf(i) >= 0)
        continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i))
        continue;
    target[i] = obj[i];
} return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _possibleConstructorReturn(self, call) { if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var isModifiedEvent = function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
};
/**
 * The public API for rendering a history-aware <a>.
 */
var Link = function (_React$Component) {
    _inherits(Link, _React$Component);
    function Link() {
        var _temp, _this, _ret;
        _classCallCheck(this, Link);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
            if (_this.props.onClick)
                _this.props.onClick(event);
            if (!event.defaultPrevented && // onClick prevented default
                event.button === 0 && // ignore right clicks
                !_this.props.target && // let browser handle "target=_blank" etc.
                !isModifiedEvent(event) // ignore clicks with modifier keys
            ) {
                event.preventDefault();
                var history = _this.context.router.history;
                var _this$props = _this.props, replace = _this$props.replace, to = _this$props.to;
                if (replace) {
                    history.replace(to);
                }
                else {
                    history.push(to);
                }
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    Link.prototype.render = function render() {
        var _props = this.props, replace = _props.replace, to = _props.to, innerRef = _props.innerRef, props = _objectWithoutProperties(_props, ['replace', 'to', 'innerRef']); // eslint-disable-line no-unused-vars
        __WEBPACK_IMPORTED_MODULE_2_invariant___default()(this.context.router, 'You should not use <Link> outside a <Router>');
        var href = this.context.router.history.createHref(typeof to === 'string' ? { pathname: to } : to);
        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('a', _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));
    };
    return Link;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);
Link.propTypes = {
    onClick: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
    target: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
    replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
    to: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object]).isRequired,
    innerRef: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func])
};
Link.defaultProps = {
    replace: false
};
Link.contextTypes = {
    router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
        history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
            push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
            replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
            createHref: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
        }).isRequired
    }).isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (Link);


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Route__ = __webpack_require__(39);
// Written in this round about way for babel-transform-imports

/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Route__["a" /* default */]);


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__matchPath__ = __webpack_require__(25);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _possibleConstructorReturn(self, call) { if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var isEmptyChildren = function isEmptyChildren(children) {
    return __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.count(children) === 0;
};
/**
 * The public API for matching a single path and rendering.
 */
var Route = function (_React$Component) {
    _inherits(Route, _React$Component);
    function Route() {
        var _temp, _this, _ret;
        _classCallCheck(this, Route);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            match: _this.computeMatch(_this.props, _this.context.router)
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    Route.prototype.getChildContext = function getChildContext() {
        return {
            router: _extends({}, this.context.router, {
                route: {
                    location: this.props.location || this.context.router.route.location,
                    match: this.state.match
                }
            })
        };
    };
    Route.prototype.computeMatch = function computeMatch(_ref, router) {
        var computedMatch = _ref.computedMatch, location = _ref.location, path = _ref.path, strict = _ref.strict, exact = _ref.exact, sensitive = _ref.sensitive;
        if (computedMatch)
            return computedMatch; // <Switch> already computed the match for us
        __WEBPACK_IMPORTED_MODULE_1_invariant___default()(router, 'You should not use <Route> or withRouter() outside a <Router>');
        var route = router.route;
        var pathname = (location || route.location).pathname;
        return path ? Object(__WEBPACK_IMPORTED_MODULE_4__matchPath__["a" /* default */])(pathname, { path: path, strict: strict, exact: exact, sensitive: sensitive }) : route.match;
    };
    Route.prototype.componentWillMount = function componentWillMount() {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(this.props.component && this.props.render), 'You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored');
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), 'You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored');
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), 'You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored');
    };
    Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
        this.setState({
            match: this.computeMatch(nextProps, nextContext.router)
        });
    };
    Route.prototype.render = function render() {
        var match = this.state.match;
        var _props = this.props, children = _props.children, component = _props.component, render = _props.render;
        var _context$router = this.context.router, history = _context$router.history, route = _context$router.route, staticContext = _context$router.staticContext;
        var location = this.props.location || route.location;
        var props = { match: match, location: location, history: history, staticContext: staticContext };
        return component ? // component prop gets first priority, only called if there's a match
            match ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.createElement(component, props) : null : render ? // render prop is next, only called if there's a match
            match ? render(props) : null : children ? // children come last, always called
            typeof children === 'function' ? children(props) : !isEmptyChildren(children) ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.only(children) : null : null;
    };
    return Route;
}(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component);
Route.propTypes = {
    computedMatch: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object,
    path: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string,
    exact: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
    strict: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
    sensitive: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
    component: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
    render: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
    children: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func, __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.node]),
    location: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
};
Route.contextTypes = {
    router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.shape({
        history: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
        route: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
        staticContext: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
    })
};
Route.childContextTypes = {
    router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (Route);


/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return canUseDOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addEventListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return removeEventListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getConfirmation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return supportsHistory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return supportsPopStateOnHashChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return supportsGoWithoutReloadUsingHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isExtraneousPopstateEvent; });
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
var addEventListener = function addEventListener(node, event, listener) {
    return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
};
var removeEventListener = function removeEventListener(node, event, listener) {
    return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
};
var getConfirmation = function getConfirmation(message, callback) {
    return callback(window.confirm(message));
}; // eslint-disable-line no-alert
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */
var supportsHistory = function supportsHistory() {
    var ua = window.navigator.userAgent;
    if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1)
        return false;
    return window.history && 'pushState' in window.history;
};
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */
var supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
    return window.navigator.userAgent.indexOf('Trident') === -1;
};
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */
var supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
    return window.navigator.userAgent.indexOf('Firefox') === -1;
};
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */
var isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
    return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
};


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const routes_config = [
    /*    {
            name: 'About_me',
            path: '/(index)?(index.html)?', mit query map open (default / when not set - true)
        },*/
    {
        name: 'Every_story_needs_a_beginning',
    },
    {
        name: 'Ghosts_of_the_past',
    },
    {
        name: 'Not_found',
        exact: false,
        path: '/',
    },
];
/* harmony export (immutable) */ __webpack_exports__["a"] = routes_config;



/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_dom__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_dom___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_router_dom__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_Header__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Routes__ = __webpack_require__(13);





function _is_hosted_on_GitHubPages(origin) {
    return origin.includes('shaman-apprentice.github.io');
}
const basename = _is_hosted_on_GitHubPages(window.location.origin) ?
    '/Quests-of-web-programming' : // GitHub project name
    '/'; // served from local_dev_server
function App() {
    return (__WEBPACK_IMPORTED_MODULE_0_react__["createElement"](__WEBPACK_IMPORTED_MODULE_2_react_router_dom__["a" /* BrowserRouter */], { basename: basename },
        __WEBPACK_IMPORTED_MODULE_0_react__["createElement"](__WEBPACK_IMPORTED_MODULE_0_react__["Fragment"], null,
            __WEBPACK_IMPORTED_MODULE_0_react__["createElement"](__WEBPACK_IMPORTED_MODULE_3__components_Header__["a" /* Header */], null),
            __WEBPACK_IMPORTED_MODULE_0_react__["createElement"](__WEBPACK_IMPORTED_MODULE_4__Routes__["Routes"], null))));
}
Object(__WEBPACK_IMPORTED_MODULE_1_react_dom__["render"])(__WEBPACK_IMPORTED_MODULE_0_react__["createElement"](App, null), document.getElementById('root')); // body style (margin/padding=0) is set in index.html


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.2.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var m = __webpack_require__(6), n = __webpack_require__(10), p = __webpack_require__(5), q = "function" === typeof Symbol && Symbol["for"], r = q ? Symbol["for"]("react.element") : 60103, t = q ? Symbol["for"]("react.call") : 60104, u = q ? Symbol["for"]("react.return") : 60105, v = q ? Symbol["for"]("react.portal") : 60106, w = q ? Symbol["for"]("react.fragment") : 60107, x = "function" === typeof Symbol && Symbol.iterator;
function y(a) { for (var b = arguments.length - 1, e = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, c = 0; c < b; c++)
    e += "\x26args[]\x3d" + encodeURIComponent(arguments[c + 1]); b = Error(e + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."); b.name = "Invariant Violation"; b.framesToPop = 1; throw b; }
var z = { isMounted: function () { return !1; }, enqueueForceUpdate: function () { }, enqueueReplaceState: function () { }, enqueueSetState: function () { } };
function A(a, b, e) { this.props = a; this.context = b; this.refs = n; this.updater = e || z; }
A.prototype.isReactComponent = {};
A.prototype.setState = function (a, b) { "object" !== typeof a && "function" !== typeof a && null != a ? y("85") : void 0; this.updater.enqueueSetState(this, a, b, "setState"); };
A.prototype.forceUpdate = function (a) { this.updater.enqueueForceUpdate(this, a, "forceUpdate"); };
function B(a, b, e) { this.props = a; this.context = b; this.refs = n; this.updater = e || z; }
function C() { }
C.prototype = A.prototype;
var D = B.prototype = new C;
D.constructor = B;
m(D, A.prototype);
D.isPureReactComponent = !0;
function E(a, b, e) { this.props = a; this.context = b; this.refs = n; this.updater = e || z; }
var F = E.prototype = new C;
F.constructor = E;
m(F, A.prototype);
F.unstable_isAsyncReactComponent = !0;
F.render = function () { return this.props.children; };
var G = { current: null }, H = Object.prototype.hasOwnProperty, I = { key: !0, ref: !0, __self: !0, __source: !0 };
function J(a, b, e) { var c, d = {}, g = null, k = null; if (null != b)
    for (c in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = "" + b.key), b)
        H.call(b, c) && !I.hasOwnProperty(c) && (d[c] = b[c]); var f = arguments.length - 2; if (1 === f)
    d.children = e;
else if (1 < f) {
    for (var h = Array(f), l = 0; l < f; l++)
        h[l] = arguments[l + 2];
    d.children = h;
} if (a && a.defaultProps)
    for (c in f = a.defaultProps, f)
        void 0 === d[c] && (d[c] = f[c]); return { $$typeof: r, type: a, key: g, ref: k, props: d, _owner: G.current }; }
function K(a) { return "object" === typeof a && null !== a && a.$$typeof === r; }
function escape(a) { var b = { "\x3d": "\x3d0", ":": "\x3d2" }; return "$" + ("" + a).replace(/[=:]/g, function (a) { return b[a]; }); }
var L = /\/+/g, M = [];
function N(a, b, e, c) { if (M.length) {
    var d = M.pop();
    d.result = a;
    d.keyPrefix = b;
    d.func = e;
    d.context = c;
    d.count = 0;
    return d;
} return { result: a, keyPrefix: b, func: e, context: c, count: 0 }; }
function O(a) { a.result = null; a.keyPrefix = null; a.func = null; a.context = null; a.count = 0; 10 > M.length && M.push(a); }
function P(a, b, e, c) {
    var d = typeof a;
    if ("undefined" === d || "boolean" === d)
        a = null;
    var g = !1;
    if (null === a)
        g = !0;
    else
        switch (d) {
            case "string":
            case "number":
                g = !0;
                break;
            case "object": switch (a.$$typeof) {
                case r:
                case t:
                case u:
                case v: g = !0;
            }
        }
    if (g)
        return e(c, a, "" === b ? "." + Q(a, 0) : b), 1;
    g = 0;
    b = "" === b ? "." : b + ":";
    if (Array.isArray(a))
        for (var k = 0; k < a.length; k++) {
            d = a[k];
            var f = b + Q(d, k);
            g += P(d, f, e, c);
        }
    else if (null === a || "undefined" === typeof a ? f = null : (f = x && a[x] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f)
        for (a =
            f.call(a), k = 0; !(d = a.next()).done;)
            d = d.value, f = b + Q(d, k++), g += P(d, f, e, c);
    else
        "object" === d && (e = "" + a, y("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));
    return g;
}
function Q(a, b) { return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36); }
function R(a, b) { a.func.call(a.context, b, a.count++); }
function S(a, b, e) { var c = a.result, d = a.keyPrefix; a = a.func.call(a.context, b, a.count++); Array.isArray(a) ? T(a, c, e, p.thatReturnsArgument) : null != a && (K(a) && (b = d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(L, "$\x26/") + "/") + e, a = { $$typeof: r, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner }), c.push(a)); }
function T(a, b, e, c, d) { var g = ""; null != e && (g = ("" + e).replace(L, "$\x26/") + "/"); b = N(b, g, c, d); null == a || P(a, "", S, b); O(b); }
var U = { Children: { map: function (a, b, e) { if (null == a)
            return a; var c = []; T(a, c, null, b, e); return c; }, forEach: function (a, b, e) { if (null == a)
            return a; b = N(null, null, b, e); null == a || P(a, "", R, b); O(b); }, count: function (a) { return null == a ? 0 : P(a, "", p.thatReturnsNull, null); }, toArray: function (a) { var b = []; T(a, b, null, p.thatReturnsArgument); return b; }, only: function (a) { K(a) ? void 0 : y("143"); return a; } }, Component: A, PureComponent: B, unstable_AsyncComponent: E, Fragment: w, createElement: J, cloneElement: function (a, b, e) {
        var c = m({}, a.props), d = a.key, g = a.ref, k = a._owner;
        if (null != b) {
            void 0 !== b.ref && (g = b.ref, k = G.current);
            void 0 !== b.key && (d = "" + b.key);
            if (a.type && a.type.defaultProps)
                var f = a.type.defaultProps;
            for (h in b)
                H.call(b, h) && !I.hasOwnProperty(h) && (c[h] = void 0 === b[h] && void 0 !== f ? f[h] : b[h]);
        }
        var h = arguments.length - 2;
        if (1 === h)
            c.children = e;
        else if (1 < h) {
            f = Array(h);
            for (var l = 0; l < h; l++)
                f[l] = arguments[l + 2];
            c.children = f;
        }
        return { $$typeof: r, type: a.type, key: d, ref: g, props: c, _owner: k };
    }, createFactory: function (a) { var b = J.bind(null, a); b.type = a; return b; },
    isValidElement: K, version: "16.2.0", __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { ReactCurrentOwner: G, assign: m } }, V = Object.freeze({ default: U }), W = V && U || V;
module.exports = W["default"] ? W["default"] : W;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.2.0
 * react.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== "production") {
    (function () {
        'use strict';
        var _assign = __webpack_require__(6);
        var emptyObject = __webpack_require__(10);
        var invariant = __webpack_require__(7);
        var warning = __webpack_require__(11);
        var emptyFunction = __webpack_require__(5);
        var checkPropTypes = __webpack_require__(18);
        // TODO: this is special because it gets imported during build.
        var ReactVersion = '16.2.0';
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.
        var hasSymbol = typeof Symbol === 'function' && Symbol['for'];
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
        var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
        var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';
        function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable === 'undefined') {
                return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === 'function') {
                return maybeIterator;
            }
            return null;
        }
        /**
         * WARNING: DO NOT manually require this module.
         * This is a replacement for `invariant(...)` used by the error code system
         * and will _only_ be required by the corresponding babel pass.
         * It always throws.
         */
        /**
         * Forked from fbjs/warning:
         * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
         *
         * Only change is we use console.warn instead of console.error,
         * and do nothing when 'console' is not supported.
         * This really simplifies the code.
         * ---
         * Similar to invariant but only logs a warning if the condition is not met.
         * This can be used to log issues in development environments in critical
         * paths. Removing the logging code for production environments will keep the
         * same logic and follow the same code paths.
         */
        var lowPriorityWarning = function () { };
        {
            var printWarning = function (format) {
                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                }
                var argIndex = 0;
                var message = 'Warning: ' + format.replace(/%s/g, function () {
                    return args[argIndex++];
                });
                if (typeof console !== 'undefined') {
                    console.warn(message);
                }
                try {
                    // --- Welcome to debugging React ---
                    // This error was thrown as a convenience so that you can use this stack
                    // to find the callsite that caused this warning to fire.
                    throw new Error(message);
                }
                catch (x) { }
            };
            lowPriorityWarning = function (condition, format) {
                if (format === undefined) {
                    throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
                }
                if (!condition) {
                    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                        args[_key2 - 2] = arguments[_key2];
                    }
                    printWarning.apply(undefined, [format].concat(args));
                }
            };
        }
        var lowPriorityWarning$1 = lowPriorityWarning;
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
            {
                var constructor = publicInstance.constructor;
                var componentName = constructor && (constructor.displayName || constructor.name) || 'ReactClass';
                var warningKey = componentName + '.' + callerName;
                if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                    return;
                }
                warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, componentName);
                didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
        }
        /**
         * This is the abstract API for an update queue.
         */
        var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function (publicInstance) {
                return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function (publicInstance, callback, callerName) {
                warnNoop(publicInstance, 'forceUpdate');
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
                warnNoop(publicInstance, 'replaceState');
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function (publicInstance, partialState, callback, callerName) {
                warnNoop(publicInstance, 'setState');
            }
        };
        /**
         * Base class helpers for the updating state of a component.
         */
        function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            // We initialize the default updater but the real one gets injected by the
            // renderer.
            this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        /**
         * Sets a subset of the state. Always use this to mutate
         * state. You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * There is no guarantee that calls to `setState` will run synchronously,
         * as they may eventually be batched together.  You can provide an optional
         * callback that will be executed when the call to setState is actually
         * completed.
         *
         * When a function is provided to setState, it will be called at some point in
         * the future (not synchronously). It will be called with the up to date
         * component arguments (state, props, context). These values can be different
         * from this.* because your function may be called after receiveProps but before
         * shouldComponentUpdate, and this new state, props, and context will not yet be
         * assigned to this.
         *
         * @param {object|function} partialState Next partial state or function to
         *        produce next partial state to be merged with current state.
         * @param {?function} callback Called after state is updated.
         * @final
         * @protected
         */
        Component.prototype.setState = function (partialState, callback) {
            !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
            this.updater.enqueueSetState(this, partialState, callback, 'setState');
        };
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {?function} callback Called after update is complete.
         * @final
         * @protected
         */
        Component.prototype.forceUpdate = function (callback) {
            this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
        };
        /**
         * Deprecated APIs. These APIs used to exist on classic React classes but since
         * we would like to deprecate them, we're not going to move them over to this
         * modern base class. Instead, we define a getter that warns if it's accessed.
         */
        {
            var deprecatedAPIs = {
                isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
                replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
            };
            var defineDeprecationWarning = function (methodName, info) {
                Object.defineProperty(Component.prototype, methodName, {
                    get: function () {
                        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                        return undefined;
                    }
                });
            };
            for (var fnName in deprecatedAPIs) {
                if (deprecatedAPIs.hasOwnProperty(fnName)) {
                    defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                }
            }
        }
        /**
         * Base class helpers for the updating state of a component.
         */
        function PureComponent(props, context, updater) {
            // Duplicated from Component.
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            // We initialize the default updater but the real one gets injected by the
            // renderer.
            this.updater = updater || ReactNoopUpdateQueue;
        }
        function ComponentDummy() { }
        ComponentDummy.prototype = Component.prototype;
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        // Avoid an extra prototype jump for these methods.
        _assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function AsyncComponent(props, context, updater) {
            // Duplicated from Component.
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            // We initialize the default updater but the real one gets injected by the
            // renderer.
            this.updater = updater || ReactNoopUpdateQueue;
        }
        var asyncComponentPrototype = AsyncComponent.prototype = new ComponentDummy();
        asyncComponentPrototype.constructor = AsyncComponent;
        // Avoid an extra prototype jump for these methods.
        _assign(asyncComponentPrototype, Component.prototype);
        asyncComponentPrototype.unstable_isAsyncReactComponent = true;
        asyncComponentPrototype.render = function () {
            return this.props.children;
        };
        /**
         * Keeps track of the current owner.
         *
         * The current owner is the component who should own any components that are
         * currently being constructed.
         */
        var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
        };
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        function hasValidRef(config) {
            {
                if (hasOwnProperty.call(config, 'ref')) {
                    var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
                    if (getter && getter.isReactWarning) {
                        return false;
                    }
                }
            }
            return config.ref !== undefined;
        }
        function hasValidKey(config) {
            {
                if (hasOwnProperty.call(config, 'key')) {
                    var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
                    if (getter && getter.isReactWarning) {
                        return false;
                    }
                }
            }
            return config.key !== undefined;
        }
        function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function () {
                if (!specialPropKeyWarningShown) {
                    specialPropKeyWarningShown = true;
                    warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
                }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, 'key', {
                get: warnAboutAccessingKey,
                configurable: true
            });
        }
        function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function () {
                if (!specialPropRefWarningShown) {
                    specialPropRefWarningShown = true;
                    warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
                }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, 'ref', {
                get: warnAboutAccessingRef,
                configurable: true
            });
        }
        /**
         * Factory method to create a new React element. This no longer adheres to
         * the class pattern, so do not use new to call it. Also, no instanceof check
         * will work. Instead test $$typeof field against Symbol.for('react.element') to check
         * if something is a React Element.
         *
         * @param {*} type
         * @param {*} key
         * @param {string|object} ref
         * @param {*} self A *temporary* helper to detect places where `this` is
         * different from the `owner` when React.createElement is called, so that we
         * can warn. We want to get rid of owner and replace string `ref`s with arrow
         * functions, and as long as `this` and owner are the same, there will be no
         * change in behavior.
         * @param {*} source An annotation object (added by a transpiler or otherwise)
         * indicating filename, line number, and/or other information.
         * @param {*} owner
         * @param {*} props
         * @internal
         */
        var ReactElement = function (type, key, ref, self, source, owner, props) {
            var element = {
                // This tag allow us to uniquely identify this as a React Element
                $$typeof: REACT_ELEMENT_TYPE,
                // Built-in properties that belong on the element
                type: type,
                key: key,
                ref: ref,
                props: props,
                // Record the component responsible for creating this element.
                _owner: owner
            };
            {
                // The validation flag is currently mutative. We put it on
                // an external backing store so that we can freeze the whole object.
                // This can be replaced with a WeakMap once they are implemented in
                // commonly used development environments.
                element._store = {};
                // To make comparing ReactElements easier for testing purposes, we make
                // the validation flag non-enumerable (where possible, which should
                // include every environment we run tests in), so the test framework
                // ignores it.
                Object.defineProperty(element._store, 'validated', {
                    configurable: false,
                    enumerable: false,
                    writable: true,
                    value: false
                });
                // self and source are DEV only properties.
                Object.defineProperty(element, '_self', {
                    configurable: false,
                    enumerable: false,
                    writable: false,
                    value: self
                });
                // Two elements created in two different places should be considered
                // equal for testing purposes and therefore we hide it from enumeration.
                Object.defineProperty(element, '_source', {
                    configurable: false,
                    enumerable: false,
                    writable: false,
                    value: source
                });
                if (Object.freeze) {
                    Object.freeze(element.props);
                    Object.freeze(element);
                }
            }
            return element;
        };
        /**
         * Create and return a new ReactElement of the given type.
         * See https://reactjs.org/docs/react-api.html#createelement
         */
        function createElement(type, config, children) {
            var propName;
            // Reserved names are extracted
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config != null) {
                if (hasValidRef(config)) {
                    ref = config.ref;
                }
                if (hasValidKey(config)) {
                    key = '' + config.key;
                }
                self = config.__self === undefined ? null : config.__self;
                source = config.__source === undefined ? null : config.__source;
                // Remaining properties are added to a new props object
                for (propName in config) {
                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                        props[propName] = config[propName];
                    }
                }
            }
            // Children can be more than one argument, and those are transferred onto
            // the newly allocated props object.
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
                props.children = children;
            }
            else if (childrenLength > 1) {
                var childArray = Array(childrenLength);
                for (var i = 0; i < childrenLength; i++) {
                    childArray[i] = arguments[i + 2];
                }
                {
                    if (Object.freeze) {
                        Object.freeze(childArray);
                    }
                }
                props.children = childArray;
            }
            // Resolve default props
            if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                    if (props[propName] === undefined) {
                        props[propName] = defaultProps[propName];
                    }
                }
            }
            {
                if (key || ref) {
                    if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
                        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
                        if (key) {
                            defineKeyPropWarningGetter(props, displayName);
                        }
                        if (ref) {
                            defineRefPropWarningGetter(props, displayName);
                        }
                    }
                }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }
        /**
         * Return a function that produces ReactElements of a given type.
         * See https://reactjs.org/docs/react-api.html#createfactory
         */
        function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
        }
        /**
         * Clone and return a new ReactElement using element as the starting point.
         * See https://reactjs.org/docs/react-api.html#cloneelement
         */
        function cloneElement(element, config, children) {
            var propName;
            // Original props are copied
            var props = _assign({}, element.props);
            // Reserved names are extracted
            var key = element.key;
            var ref = element.ref;
            // Self is preserved since the owner is preserved.
            var self = element._self;
            // Source is preserved since cloneElement is unlikely to be targeted by a
            // transpiler, and the original source is probably a better indicator of the
            // true owner.
            var source = element._source;
            // Owner will be preserved, unless ref is overridden
            var owner = element._owner;
            if (config != null) {
                if (hasValidRef(config)) {
                    // Silently steal the ref from the parent.
                    ref = config.ref;
                    owner = ReactCurrentOwner.current;
                }
                if (hasValidKey(config)) {
                    key = '' + config.key;
                }
                // Remaining properties override existing props
                var defaultProps;
                if (element.type && element.type.defaultProps) {
                    defaultProps = element.type.defaultProps;
                }
                for (propName in config) {
                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                        if (config[propName] === undefined && defaultProps !== undefined) {
                            // Resolve default props
                            props[propName] = defaultProps[propName];
                        }
                        else {
                            props[propName] = config[propName];
                        }
                    }
                }
            }
            // Children can be more than one argument, and those are transferred onto
            // the newly allocated props object.
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
                props.children = children;
            }
            else if (childrenLength > 1) {
                var childArray = Array(childrenLength);
                for (var i = 0; i < childrenLength; i++) {
                    childArray[i] = arguments[i + 2];
                }
                props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
        }
        /**
         * Verifies the object is a ReactElement.
         * See https://reactjs.org/docs/react-api.html#isvalidelement
         * @param {?object} object
         * @return {boolean} True if `object` is a valid component.
         * @final
         */
        function isValidElement(object) {
            return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var ReactDebugCurrentFrame = {};
        {
            // Component that is being worked on
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function () {
                var impl = ReactDebugCurrentFrame.getCurrentStack;
                if (impl) {
                    return impl();
                }
                return null;
            };
        }
        var SEPARATOR = '.';
        var SUBSEPARATOR = ':';
        /**
         * Escape and wrap key so it is safe to use as a reactid
         *
         * @param {string} key to be escaped.
         * @return {string} the escaped key.
         */
        function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
                '=': '=0',
                ':': '=2'
            };
            var escapedString = ('' + key).replace(escapeRegex, function (match) {
                return escaperLookup[match];
            });
            return '$' + escapedString;
        }
        /**
         * TODO: Test that a single child and an array with one item have the same key
         * pattern.
         */
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
            return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
        }
        var POOL_SIZE = 10;
        var traverseContextPool = [];
        function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
            if (traverseContextPool.length) {
                var traverseContext = traverseContextPool.pop();
                traverseContext.result = mapResult;
                traverseContext.keyPrefix = keyPrefix;
                traverseContext.func = mapFunction;
                traverseContext.context = mapContext;
                traverseContext.count = 0;
                return traverseContext;
            }
            else {
                return {
                    result: mapResult,
                    keyPrefix: keyPrefix,
                    func: mapFunction,
                    context: mapContext,
                    count: 0
                };
            }
        }
        function releaseTraverseContext(traverseContext) {
            traverseContext.result = null;
            traverseContext.keyPrefix = null;
            traverseContext.func = null;
            traverseContext.context = null;
            traverseContext.count = 0;
            if (traverseContextPool.length < POOL_SIZE) {
                traverseContextPool.push(traverseContext);
            }
        }
        /**
         * @param {?*} children Children tree container.
         * @param {!string} nameSoFar Name of the key path so far.
         * @param {!function} callback Callback to invoke with each child found.
         * @param {?*} traverseContext Used to pass information throughout the traversal
         * process.
         * @return {!number} The number of children in this subtree.
         */
        function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
            var type = typeof children;
            if (type === 'undefined' || type === 'boolean') {
                // All of the above are perceived as null.
                children = null;
            }
            var invokeCallback = false;
            if (children === null) {
                invokeCallback = true;
            }
            else {
                switch (type) {
                    case 'string':
                    case 'number':
                        invokeCallback = true;
                        break;
                    case 'object':
                        switch (children.$$typeof) {
                            case REACT_ELEMENT_TYPE:
                            case REACT_CALL_TYPE:
                            case REACT_RETURN_TYPE:
                            case REACT_PORTAL_TYPE:
                                invokeCallback = true;
                        }
                }
            }
            if (invokeCallback) {
                callback(traverseContext, children, 
                // If it's the only child, treat the name as if it was wrapped in an array
                // so that it's consistent if the number of children grows.
                nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
                return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0; // Count of children found in the current subtree.
            var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                    child = children[i];
                    nextName = nextNamePrefix + getComponentKey(child, i);
                    subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                }
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    {
                        // Warn about using Maps as children
                        if (iteratorFn === children.entries) {
                            warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());
                            didWarnAboutMaps = true;
                        }
                    }
                    var iterator = iteratorFn.call(children);
                    var step;
                    var ii = 0;
                    while (!(step = iterator.next()).done) {
                        child = step.value;
                        nextName = nextNamePrefix + getComponentKey(child, ii++);
                        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                    }
                }
                else if (type === 'object') {
                    var addendum = '';
                    {
                        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
                    }
                    var childrenString = '' + children;
                    invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
                }
            }
            return subtreeCount;
        }
        /**
         * Traverses children that are typically specified as `props.children`, but
         * might also be specified through attributes:
         *
         * - `traverseAllChildren(this.props.children, ...)`
         * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
         *
         * The `traverseContext` is an optional argument that is passed through the
         * entire traversal. It can be used to store accumulations or anything else that
         * the callback might find relevant.
         *
         * @param {?*} children Children tree object.
         * @param {!function} callback To invoke upon traversing each child.
         * @param {?*} traverseContext Context for traversal.
         * @return {!number} The number of children in this subtree.
         */
        function traverseAllChildren(children, callback, traverseContext) {
            if (children == null) {
                return 0;
            }
            return traverseAllChildrenImpl(children, '', callback, traverseContext);
        }
        /**
         * Generate a key string that identifies a component within a set.
         *
         * @param {*} component A component that could contain a manual key.
         * @param {number} index Index that is used if a manual key is not provided.
         * @return {string}
         */
        function getComponentKey(component, index) {
            // Do some typechecking here since we call this blindly. We want to ensure
            // that we don't block potential future ES APIs.
            if (typeof component === 'object' && component !== null && component.key != null) {
                // Explicit key
                return escape(component.key);
            }
            // Implicit key determined by the index in the set
            return index.toString(36);
        }
        function forEachSingleChild(bookKeeping, child, name) {
            var func = bookKeeping.func, context = bookKeeping.context;
            func.call(context, child, bookKeeping.count++);
        }
        /**
         * Iterates through children that are typically specified as `props.children`.
         *
         * See https://reactjs.org/docs/react-api.html#react.children.foreach
         *
         * The provided forEachFunc(child, index) will be called for each
         * leaf child.
         *
         * @param {?*} children Children tree container.
         * @param {function(*, int)} forEachFunc
         * @param {*} forEachContext Context for forEachContext.
         */
        function forEachChildren(children, forEachFunc, forEachContext) {
            if (children == null) {
                return children;
            }
            var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
            traverseAllChildren(children, forEachSingleChild, traverseContext);
            releaseTraverseContext(traverseContext);
        }
        function mapSingleChildIntoContext(bookKeeping, child, childKey) {
            var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
            var mappedChild = func.call(context, child, bookKeeping.count++);
            if (Array.isArray(mappedChild)) {
                mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
            }
            else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                    mappedChild = cloneAndReplaceKey(mappedChild, 
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
                }
                result.push(mappedChild);
            }
        }
        function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
            var escapedPrefix = '';
            if (prefix != null) {
                escapedPrefix = escapeUserProvidedKey(prefix) + '/';
            }
            var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
            traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
            releaseTraverseContext(traverseContext);
        }
        /**
         * Maps children that are typically specified as `props.children`.
         *
         * See https://reactjs.org/docs/react-api.html#react.children.map
         *
         * The provided mapFunction(child, key, index) will be called for each
         * leaf child.
         *
         * @param {?*} children Children tree container.
         * @param {function(*, int)} func The map function.
         * @param {*} context Context for mapFunction.
         * @return {object} Object containing the ordered map of results.
         */
        function mapChildren(children, func, context) {
            if (children == null) {
                return children;
            }
            var result = [];
            mapIntoWithKeyPrefixInternal(children, result, null, func, context);
            return result;
        }
        /**
         * Count the number of children that are typically specified as
         * `props.children`.
         *
         * See https://reactjs.org/docs/react-api.html#react.children.count
         *
         * @param {?*} children Children tree container.
         * @return {number} The number of children.
         */
        function countChildren(children, context) {
            return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
        }
        /**
         * Flatten a children object (typically specified as `props.children`) and
         * return an array with appropriately re-keyed children.
         *
         * See https://reactjs.org/docs/react-api.html#react.children.toarray
         */
        function toArray(children) {
            var result = [];
            mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
            return result;
        }
        /**
         * Returns the first child in a collection of children and verifies that there
         * is only one child in the collection.
         *
         * See https://reactjs.org/docs/react-api.html#react.children.only
         *
         * The current implementation of this function assumes that a single child gets
         * passed without a wrapper, but the purpose of this helper function is to
         * abstract away the particular structure of children.
         *
         * @param {?object} children Child collection structure.
         * @return {ReactElement} The first and only `ReactElement` contained in the
         * structure.
         */
        function onlyChild(children) {
            !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
            return children;
        }
        var describeComponentFrame = function (name, source, ownerName) {
            return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
        };
        function getComponentName(fiber) {
            var type = fiber.type;
            if (typeof type === 'string') {
                return type;
            }
            if (typeof type === 'function') {
                return type.displayName || type.name;
            }
            return null;
        }
        /**
         * ReactElementValidator provides a wrapper around a element factory
         * which validates the props passed to the element. This is intended to be
         * used only in DEV and could be replaced by a static type checker for languages
         * that support it.
         */
        {
            var currentlyValidatingElement = null;
            var propTypesMisspellWarningShown = false;
            var getDisplayName = function (element) {
                if (element == null) {
                    return '#empty';
                }
                else if (typeof element === 'string' || typeof element === 'number') {
                    return '#text';
                }
                else if (typeof element.type === 'string') {
                    return element.type;
                }
                else if (element.type === REACT_FRAGMENT_TYPE) {
                    return 'React.Fragment';
                }
                else {
                    return element.type.displayName || element.type.name || 'Unknown';
                }
            };
            var getStackAddendum = function () {
                var stack = '';
                if (currentlyValidatingElement) {
                    var name = getDisplayName(currentlyValidatingElement);
                    var owner = currentlyValidatingElement._owner;
                    stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
                }
                stack += ReactDebugCurrentFrame.getStackAddendum() || '';
                return stack;
            };
            var VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);
        }
        function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
                var name = getComponentName(ReactCurrentOwner.current);
                if (name) {
                    return '\n\nCheck the render method of `' + name + '`.';
                }
            }
            return '';
        }
        function getSourceInfoErrorAddendum(elementProps) {
            if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
                var source = elementProps.__source;
                var fileName = source.fileName.replace(/^.*[\\\/]/, '');
                var lineNumber = source.lineNumber;
                return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
            }
            return '';
        }
        /**
         * Warn if there's no key explicitly set on dynamic arrays of children or
         * object keys are not valid. This allows us to keep track of children between
         * updates.
         */
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
                var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                    info = '\n\nCheck the top-level render call using <' + parentName + '>.';
                }
            }
            return info;
        }
        /**
         * Warn if the element doesn't have an explicit key assigned to it.
         * This element is in an array. The array could grow and shrink or be
         * reordered. All children that haven't already been validated are required to
         * have a "key" property assigned to it. Error statuses are cached so a warning
         * will only be shown once.
         *
         * @internal
         * @param {ReactElement} element Element that requires a key.
         * @param {*} parentType element's parent's type.
         */
        function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
                return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            // Usually the current owner is the offender, but if it accepts children as a
            // property, it may be the creator of the child that's responsible for
            // assigning it a key.
            var childOwner = '';
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
                // Give the component that originally created this child.
                childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
            }
            currentlyValidatingElement = element;
            {
                warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
            }
            currentlyValidatingElement = null;
        }
        /**
         * Ensure that every element either is passed in a static location, in an
         * array with an explicit keys property defined, or in an object literal
         * with valid key property.
         *
         * @internal
         * @param {ReactNode} node Statically passed child of any type.
         * @param {*} parentType node's parent's type.
         */
        function validateChildKeys(node, parentType) {
            if (typeof node !== 'object') {
                return;
            }
            if (Array.isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                    var child = node[i];
                    if (isValidElement(child)) {
                        validateExplicitKey(child, parentType);
                    }
                }
            }
            else if (isValidElement(node)) {
                // This element was passed in a valid location.
                if (node._store) {
                    node._store.validated = true;
                }
            }
            else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === 'function') {
                    // Entry iterators used to provide implicit keys,
                    // but now we print a separate warning for them later.
                    if (iteratorFn !== node.entries) {
                        var iterator = iteratorFn.call(node);
                        var step;
                        while (!(step = iterator.next()).done) {
                            if (isValidElement(step.value)) {
                                validateExplicitKey(step.value, parentType);
                            }
                        }
                    }
                }
            }
        }
        /**
         * Given an element, validate that its props follow the propTypes definition,
         * provided by the type.
         *
         * @param {ReactElement} element
         */
        function validatePropTypes(element) {
            var componentClass = element.type;
            if (typeof componentClass !== 'function') {
                return;
            }
            var name = componentClass.displayName || componentClass.name;
            var propTypes = componentClass.propTypes;
            if (propTypes) {
                currentlyValidatingElement = element;
                checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
                currentlyValidatingElement = null;
            }
            else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
            }
            if (typeof componentClass.getDefaultProps === 'function') {
                warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
            }
        }
        /**
         * Given a fragment, validate that it can only be provided with fragment props
         * @param {ReactElement} fragment
         */
        function validateFragmentProps(fragment) {
            currentlyValidatingElement = fragment;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;
            try {
                for (var _iterator = Object.keys(fragment.props)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;
                    if (!VALID_FRAGMENT_PROPS.has(key)) {
                        warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
                        break;
                    }
                }
            }
            catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            }
            finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                }
                finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            if (fragment.ref !== null) {
                warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
            }
            currentlyValidatingElement = null;
        }
        function createElementWithValidation(type, props, children) {
            var validType = typeof type === 'string' || typeof type === 'function' || typeof type === 'symbol' || typeof type === 'number';
            // We warn in this case but don't throw. We expect the element creation to
            // succeed and there will likely be errors in render.
            if (!validType) {
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                    info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(props);
                if (sourceInfo) {
                    info += sourceInfo;
                }
                else {
                    info += getDeclarationErrorAddendum();
                }
                info += getStackAddendum() || '';
                warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
            }
            var element = createElement.apply(this, arguments);
            // The result can be nullish if a mock or a custom function is used.
            // TODO: Drop this when these are no longer allowed as the type argument.
            if (element == null) {
                return element;
            }
            // Skip key warning if the type isn't valid since our key validation logic
            // doesn't expect a non-string/function type and can throw confusing errors.
            // We don't want exception behavior to differ between dev and prod.
            // (Rendering will throw with a helpful message and as soon as the type is
            // fixed, the key warnings will appear.)
            if (validType) {
                for (var i = 2; i < arguments.length; i++) {
                    validateChildKeys(arguments[i], type);
                }
            }
            if (typeof type === 'symbol' && type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
            }
            else {
                validatePropTypes(element);
            }
            return element;
        }
        function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            // Legacy hook TODO: Warn if this is accessed
            validatedFactory.type = type;
            {
                Object.defineProperty(validatedFactory, 'type', {
                    enumerable: false,
                    get: function () {
                        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
                        Object.defineProperty(this, 'type', {
                            value: type
                        });
                        return type;
                    }
                });
            }
            return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
        }
        var React = {
            Children: {
                map: mapChildren,
                forEach: forEachChildren,
                count: countChildren,
                toArray: toArray,
                only: onlyChild
            },
            Component: Component,
            PureComponent: PureComponent,
            unstable_AsyncComponent: AsyncComponent,
            Fragment: REACT_FRAGMENT_TYPE,
            createElement: createElementWithValidation,
            cloneElement: cloneElementWithValidation,
            createFactory: createFactoryWithValidation,
            isValidElement: isValidElement,
            version: ReactVersion,
            __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
                ReactCurrentOwner: ReactCurrentOwner,
                // Used by renderers to avoid bundling object-assign twice in UMD bundles:
                assign: _assign
            }
        };
        {
            _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
                // These should not be included in production.
                ReactDebugCurrentFrame: ReactDebugCurrentFrame,
                // Shim for React DOM 16.0.0 which still destructured (but not used) this.
                // TODO: remove in React 17.0.
                ReactComponentTreeHook: {}
            });
        }
        var React$2 = Object.freeze({
            default: React
        });
        var React$3 = (React$2 && React) || React$2;
        // TODO: decide on the top-level export form.
        // This is hacky but makes it work with both Rollup and Jest.
        var react = React$3['default'] ? React$3['default'] : React$3;
        module.exports = react;
    })();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
        return;
    }
    if (process.env.NODE_ENV !== 'production') {
        // This branch is unreachable because this function is only called
        // in production, but the condition is true only in development.
        // Therefore if the branch is still here, dead code elimination wasn't
        // properly applied.
        // Don't change the message. React DevTools relies on it. Also make sure
        // this message doesn't occur elsewhere in this function, or it will cause
        // a false positive.
        throw new Error('^_^');
    }
    try {
        // Verify that the code above has been dead code eliminated (DCE'd).
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    }
    catch (err) {
        // DevTools shouldn't crash React, no matter what.
        // We should still report in case we break this code.
        console.error(err);
    }
}
if (process.env.NODE_ENV === 'production') {
    // DCE check should happen before ReactDOM bundle executes so that
    // DevTools can report bad minification during injection.
    checkDCE();
    module.exports = __webpack_require__(46);
}
else {
    module.exports = __webpack_require__(49);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.2.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

var aa = __webpack_require__(0), l = __webpack_require__(28), B = __webpack_require__(6), C = __webpack_require__(5), ba = __webpack_require__(29), da = __webpack_require__(30), ea = __webpack_require__(31), fa = __webpack_require__(32), ia = __webpack_require__(33), D = __webpack_require__(10);
function E(a) { for (var b = arguments.length - 1, c = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, d = 0; d < b; d++)
    c += "\x26args[]\x3d" + encodeURIComponent(arguments[d + 1]); b = Error(c + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."); b.name = "Invariant Violation"; b.framesToPop = 1; throw b; }
aa ? void 0 : E("227");
var oa = { children: !0, dangerouslySetInnerHTML: !0, defaultValue: !0, defaultChecked: !0, innerHTML: !0, suppressContentEditableWarning: !0, suppressHydrationWarning: !0, style: !0 };
function pa(a, b) { return (a & b) === b; }
var ta = { MUST_USE_PROPERTY: 1, HAS_BOOLEAN_VALUE: 4, HAS_NUMERIC_VALUE: 8, HAS_POSITIVE_NUMERIC_VALUE: 24, HAS_OVERLOADED_BOOLEAN_VALUE: 32, HAS_STRING_BOOLEAN_VALUE: 64, injectDOMPropertyConfig: function (a) {
        var b = ta, c = a.Properties || {}, d = a.DOMAttributeNamespaces || {}, e = a.DOMAttributeNames || {};
        a = a.DOMMutationMethods || {};
        for (var f in c) {
            ua.hasOwnProperty(f) ? E("48", f) : void 0;
            var g = f.toLowerCase(), h = c[f];
            g = { attributeName: g, attributeNamespace: null, propertyName: f, mutationMethod: null, mustUseProperty: pa(h, b.MUST_USE_PROPERTY),
                hasBooleanValue: pa(h, b.HAS_BOOLEAN_VALUE), hasNumericValue: pa(h, b.HAS_NUMERIC_VALUE), hasPositiveNumericValue: pa(h, b.HAS_POSITIVE_NUMERIC_VALUE), hasOverloadedBooleanValue: pa(h, b.HAS_OVERLOADED_BOOLEAN_VALUE), hasStringBooleanValue: pa(h, b.HAS_STRING_BOOLEAN_VALUE) };
            1 >= g.hasBooleanValue + g.hasNumericValue + g.hasOverloadedBooleanValue ? void 0 : E("50", f);
            e.hasOwnProperty(f) && (g.attributeName = e[f]);
            d.hasOwnProperty(f) && (g.attributeNamespace = d[f]);
            a.hasOwnProperty(f) && (g.mutationMethod = a[f]);
            ua[f] = g;
        }
    } }, ua = {};
function va(a, b) { if (oa.hasOwnProperty(a) || 2 < a.length && ("o" === a[0] || "O" === a[0]) && ("n" === a[1] || "N" === a[1]))
    return !1; if (null === b)
    return !0; switch (typeof b) {
    case "boolean": return oa.hasOwnProperty(a) ? a = !0 : (b = wa(a)) ? a = b.hasBooleanValue || b.hasStringBooleanValue || b.hasOverloadedBooleanValue : (a = a.toLowerCase().slice(0, 5), a = "data-" === a || "aria-" === a), a;
    case "undefined":
    case "number":
    case "string":
    case "object": return !0;
    default: return !1;
} }
function wa(a) { return ua.hasOwnProperty(a) ? ua[a] : null; }
var xa = ta, ya = xa.MUST_USE_PROPERTY, K = xa.HAS_BOOLEAN_VALUE, za = xa.HAS_NUMERIC_VALUE, Aa = xa.HAS_POSITIVE_NUMERIC_VALUE, Ba = xa.HAS_OVERLOADED_BOOLEAN_VALUE, Ca = xa.HAS_STRING_BOOLEAN_VALUE, Da = { Properties: { allowFullScreen: K, async: K, autoFocus: K, autoPlay: K, capture: Ba, checked: ya | K, cols: Aa, contentEditable: Ca, controls: K, "default": K, defer: K, disabled: K, download: Ba, draggable: Ca, formNoValidate: K, hidden: K, loop: K, multiple: ya | K, muted: ya | K, noValidate: K, open: K, playsInline: K, readOnly: K, required: K, reversed: K, rows: Aa, rowSpan: za,
        scoped: K, seamless: K, selected: ya | K, size: Aa, start: za, span: Aa, spellCheck: Ca, style: 0, tabIndex: 0, itemScope: K, acceptCharset: 0, className: 0, htmlFor: 0, httpEquiv: 0, value: Ca }, DOMAttributeNames: { acceptCharset: "accept-charset", className: "class", htmlFor: "for", httpEquiv: "http-equiv" }, DOMMutationMethods: { value: function (a, b) {
            if (null == b)
                return a.removeAttribute("value");
            "number" !== a.type || !1 === a.hasAttribute("value") ? a.setAttribute("value", "" + b) : a.validity && !a.validity.badInput && a.ownerDocument.activeElement !== a &&
                a.setAttribute("value", "" + b);
        } } }, Ea = xa.HAS_STRING_BOOLEAN_VALUE, M = { xlink: "http://www.w3.org/1999/xlink", xml: "http://www.w3.org/XML/1998/namespace" }, Ga = { Properties: { autoReverse: Ea, externalResourcesRequired: Ea, preserveAlpha: Ea }, DOMAttributeNames: { autoReverse: "autoReverse", externalResourcesRequired: "externalResourcesRequired", preserveAlpha: "preserveAlpha" }, DOMAttributeNamespaces: { xlinkActuate: M.xlink, xlinkArcrole: M.xlink, xlinkHref: M.xlink, xlinkRole: M.xlink, xlinkShow: M.xlink, xlinkTitle: M.xlink, xlinkType: M.xlink,
        xmlBase: M.xml, xmlLang: M.xml, xmlSpace: M.xml } }, Ha = /[\-\:]([a-z])/g;
function Ia(a) { return a[1].toUpperCase(); }
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function (a) {
    var b = a.replace(Ha, Ia);
    Ga.Properties[b] = 0;
    Ga.DOMAttributeNames[b] = a;
});
xa.injectDOMPropertyConfig(Da);
xa.injectDOMPropertyConfig(Ga);
var P = { _caughtError: null, _hasCaughtError: !1, _rethrowError: null, _hasRethrowError: !1, injection: { injectErrorUtils: function (a) { "function" !== typeof a.invokeGuardedCallback ? E("197") : void 0; Ja = a.invokeGuardedCallback; } }, invokeGuardedCallback: function (a, b, c, d, e, f, g, h, k) { Ja.apply(P, arguments); }, invokeGuardedCallbackAndCatchFirstError: function (a, b, c, d, e, f, g, h, k) {
        P.invokeGuardedCallback.apply(this, arguments);
        if (P.hasCaughtError()) {
            var q = P.clearCaughtError();
            P._hasRethrowError || (P._hasRethrowError = !0, P._rethrowError =
                q);
        }
    }, rethrowCaughtError: function () { return Ka.apply(P, arguments); }, hasCaughtError: function () { return P._hasCaughtError; }, clearCaughtError: function () { if (P._hasCaughtError) {
        var a = P._caughtError;
        P._caughtError = null;
        P._hasCaughtError = !1;
        return a;
    } E("198"); } };
function Ja(a, b, c, d, e, f, g, h, k) { P._hasCaughtError = !1; P._caughtError = null; var q = Array.prototype.slice.call(arguments, 3); try {
    b.apply(c, q);
}
catch (v) {
    P._caughtError = v, P._hasCaughtError = !0;
} }
function Ka() { if (P._hasRethrowError) {
    var a = P._rethrowError;
    P._rethrowError = null;
    P._hasRethrowError = !1;
    throw a;
} }
var La = null, Ma = {};
function Na() { if (La)
    for (var a in Ma) {
        var b = Ma[a], c = La.indexOf(a);
        -1 < c ? void 0 : E("96", a);
        if (!Oa[c]) {
            b.extractEvents ? void 0 : E("97", a);
            Oa[c] = b;
            c = b.eventTypes;
            for (var d in c) {
                var e = void 0;
                var f = c[d], g = b, h = d;
                Pa.hasOwnProperty(h) ? E("99", h) : void 0;
                Pa[h] = f;
                var k = f.phasedRegistrationNames;
                if (k) {
                    for (e in k)
                        k.hasOwnProperty(e) && Qa(k[e], g, h);
                    e = !0;
                }
                else
                    f.registrationName ? (Qa(f.registrationName, g, h), e = !0) : e = !1;
                e ? void 0 : E("98", d, a);
            }
        }
    } }
function Qa(a, b, c) { Ra[a] ? E("100", a) : void 0; Ra[a] = b; Sa[a] = b.eventTypes[c].dependencies; }
var Oa = [], Pa = {}, Ra = {}, Sa = {};
function Ta(a) { La ? E("101") : void 0; La = Array.prototype.slice.call(a); Na(); }
function Ua(a) { var b = !1, c; for (c in a)
    if (a.hasOwnProperty(c)) {
        var d = a[c];
        Ma.hasOwnProperty(c) && Ma[c] === d || (Ma[c] ? E("102", c) : void 0, Ma[c] = d, b = !0);
    } b && Na(); }
var Va = Object.freeze({ plugins: Oa, eventNameDispatchConfigs: Pa, registrationNameModules: Ra, registrationNameDependencies: Sa, possibleRegistrationNames: null, injectEventPluginOrder: Ta, injectEventPluginsByName: Ua }), Wa = null, Xa = null, Ya = null;
function Za(a, b, c, d) { b = a.type || "unknown-event"; a.currentTarget = Ya(d); P.invokeGuardedCallbackAndCatchFirstError(b, c, void 0, a); a.currentTarget = null; }
function $a(a, b) { null == b ? E("30") : void 0; if (null == a)
    return b; if (Array.isArray(a)) {
    if (Array.isArray(b))
        return a.push.apply(a, b), a;
    a.push(b);
    return a;
} return Array.isArray(b) ? [a].concat(b) : [a, b]; }
function ab(a, b, c) { Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a); }
var bb = null;
function cb(a, b) { if (a) {
    var c = a._dispatchListeners, d = a._dispatchInstances;
    if (Array.isArray(c))
        for (var e = 0; e < c.length && !a.isPropagationStopped(); e++)
            Za(a, b, c[e], d[e]);
    else
        c && Za(a, b, c, d);
    a._dispatchListeners = null;
    a._dispatchInstances = null;
    a.isPersistent() || a.constructor.release(a);
} }
function db(a) { return cb(a, !0); }
function gb(a) { return cb(a, !1); }
var hb = { injectEventPluginOrder: Ta, injectEventPluginsByName: Ua };
function ib(a, b) {
    var c = a.stateNode;
    if (!c)
        return null;
    var d = Wa(c);
    if (!d)
        return null;
    c = d[b];
    a: switch (b) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
            (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
            a = !d;
            break a;
        default: a = !1;
    }
    if (a)
        return null;
    c && "function" !== typeof c ? E("231", b, typeof c) : void 0;
    return c;
}
function jb(a, b, c, d) { for (var e, f = 0; f < Oa.length; f++) {
    var g = Oa[f];
    g && (g = g.extractEvents(a, b, c, d)) && (e = $a(e, g));
} return e; }
function kb(a) { a && (bb = $a(bb, a)); }
function lb(a) { var b = bb; bb = null; b && (a ? ab(b, db) : ab(b, gb), bb ? E("95") : void 0, P.rethrowCaughtError()); }
var mb = Object.freeze({ injection: hb, getListener: ib, extractEvents: jb, enqueueEvents: kb, processEventQueue: lb }), nb = Math.random().toString(36).slice(2), Q = "__reactInternalInstance$" + nb, ob = "__reactEventHandlers$" + nb;
function pb(a) { if (a[Q])
    return a[Q]; for (var b = []; !a[Q];)
    if (b.push(a), a.parentNode)
        a = a.parentNode;
    else
        return null; var c = void 0, d = a[Q]; if (5 === d.tag || 6 === d.tag)
    return d; for (; a && (d = a[Q]); a = b.pop())
    c = d; return c; }
function qb(a) { if (5 === a.tag || 6 === a.tag)
    return a.stateNode; E("33"); }
function rb(a) { return a[ob] || null; }
var sb = Object.freeze({ precacheFiberNode: function (a, b) { b[Q] = a; }, getClosestInstanceFromNode: pb, getInstanceFromNode: function (a) { a = a[Q]; return !a || 5 !== a.tag && 6 !== a.tag ? null : a; }, getNodeFromInstance: qb, getFiberCurrentPropsFromNode: rb, updateFiberProps: function (a, b) { a[ob] = b; } });
function tb(a) { do
    a = a["return"];
while (a && 5 !== a.tag); return a ? a : null; }
function ub(a, b, c) { for (var d = []; a;)
    d.push(a), a = tb(a); for (a = d.length; 0 < a--;)
    b(d[a], "captured", c); for (a = 0; a < d.length; a++)
    b(d[a], "bubbled", c); }
function vb(a, b, c) { if (b = ib(a, c.dispatchConfig.phasedRegistrationNames[b]))
    c._dispatchListeners = $a(c._dispatchListeners, b), c._dispatchInstances = $a(c._dispatchInstances, a); }
function wb(a) { a && a.dispatchConfig.phasedRegistrationNames && ub(a._targetInst, vb, a); }
function xb(a) { if (a && a.dispatchConfig.phasedRegistrationNames) {
    var b = a._targetInst;
    b = b ? tb(b) : null;
    ub(b, vb, a);
} }
function yb(a, b, c) { a && c && c.dispatchConfig.registrationName && (b = ib(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = $a(c._dispatchListeners, b), c._dispatchInstances = $a(c._dispatchInstances, a)); }
function zb(a) { a && a.dispatchConfig.registrationName && yb(a._targetInst, null, a); }
function Ab(a) { ab(a, wb); }
function Bb(a, b, c, d) { if (c && d)
    a: {
        var e = c;
        for (var f = d, g = 0, h = e; h; h = tb(h))
            g++;
        h = 0;
        for (var k = f; k; k = tb(k))
            h++;
        for (; 0 < g - h;)
            e = tb(e), g--;
        for (; 0 < h - g;)
            f = tb(f), h--;
        for (; g--;) {
            if (e === f || e === f.alternate)
                break a;
            e = tb(e);
            f = tb(f);
        }
        e = null;
    }
else
    e = null; f = e; for (e = []; c && c !== f;) {
    g = c.alternate;
    if (null !== g && g === f)
        break;
    e.push(c);
    c = tb(c);
} for (c = []; d && d !== f;) {
    g = d.alternate;
    if (null !== g && g === f)
        break;
    c.push(d);
    d = tb(d);
} for (d = 0; d < e.length; d++)
    yb(e[d], "bubbled", a); for (a = c.length; 0 < a--;)
    yb(c[a], "captured", b); }
var Cb = Object.freeze({ accumulateTwoPhaseDispatches: Ab, accumulateTwoPhaseDispatchesSkipTarget: function (a) { ab(a, xb); }, accumulateEnterLeaveDispatches: Bb, accumulateDirectDispatches: function (a) { ab(a, zb); } }), Db = null;
function Eb() { !Db && l.canUseDOM && (Db = "textContent" in document.documentElement ? "textContent" : "innerText"); return Db; }
var S = { _root: null, _startText: null, _fallbackText: null };
function Fb() { if (S._fallbackText)
    return S._fallbackText; var a, b = S._startText, c = b.length, d, e = Gb(), f = e.length; for (a = 0; a < c && b[a] === e[a]; a++)
    ; var g = c - a; for (d = 1; d <= g && b[c - d] === e[f - d]; d++)
    ; S._fallbackText = e.slice(a, 1 < d ? 1 - d : void 0); return S._fallbackText; }
function Gb() { return "value" in S._root ? S._root.value : S._root[Eb()]; }
var Hb = "dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "), Ib = { type: null, target: null, currentTarget: C.thatReturnsNull, eventPhase: null, bubbles: null, cancelable: null, timeStamp: function (a) { return a.timeStamp || Date.now(); }, defaultPrevented: null, isTrusted: null };
function T(a, b, c, d) { this.dispatchConfig = a; this._targetInst = b; this.nativeEvent = c; a = this.constructor.Interface; for (var e in a)
    a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : "target" === e ? this.target = d : this[e] = c[e]); this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? C.thatReturnsTrue : C.thatReturnsFalse; this.isPropagationStopped = C.thatReturnsFalse; return this; }
B(T.prototype, { preventDefault: function () { this.defaultPrevented = !0; var a = this.nativeEvent; a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = C.thatReturnsTrue); }, stopPropagation: function () { var a = this.nativeEvent; a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = C.thatReturnsTrue); }, persist: function () { this.isPersistent = C.thatReturnsTrue; }, isPersistent: C.thatReturnsFalse,
    destructor: function () { var a = this.constructor.Interface, b; for (b in a)
        this[b] = null; for (a = 0; a < Hb.length; a++)
        this[Hb[a]] = null; } });
T.Interface = Ib;
T.augmentClass = function (a, b) { function c() { } c.prototype = this.prototype; var d = new c; B(d, a.prototype); a.prototype = d; a.prototype.constructor = a; a.Interface = B({}, this.Interface, b); a.augmentClass = this.augmentClass; Jb(a); };
Jb(T);
function Kb(a, b, c, d) { if (this.eventPool.length) {
    var e = this.eventPool.pop();
    this.call(e, a, b, c, d);
    return e;
} return new this(a, b, c, d); }
function Lb(a) { a instanceof this ? void 0 : E("223"); a.destructor(); 10 > this.eventPool.length && this.eventPool.push(a); }
function Jb(a) { a.eventPool = []; a.getPooled = Kb; a.release = Lb; }
function Mb(a, b, c, d) { return T.call(this, a, b, c, d); }
T.augmentClass(Mb, { data: null });
function Nb(a, b, c, d) { return T.call(this, a, b, c, d); }
T.augmentClass(Nb, { data: null });
var Pb = [9, 13, 27, 32], Vb = l.canUseDOM && "CompositionEvent" in window, Wb = null;
l.canUseDOM && "documentMode" in document && (Wb = document.documentMode);
var Xb;
if (Xb = l.canUseDOM && "TextEvent" in window && !Wb) {
    var Yb = window.opera;
    Xb = !("object" === typeof Yb && "function" === typeof Yb.version && 12 >= parseInt(Yb.version(), 10));
}
var Zb = Xb, $b = l.canUseDOM && (!Vb || Wb && 8 < Wb && 11 >= Wb), ac = String.fromCharCode(32), bc = { beforeInput: { phasedRegistrationNames: { bubbled: "onBeforeInput", captured: "onBeforeInputCapture" }, dependencies: ["topCompositionEnd", "topKeyPress", "topTextInput", "topPaste"] }, compositionEnd: { phasedRegistrationNames: { bubbled: "onCompositionEnd", captured: "onCompositionEndCapture" }, dependencies: "topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ") }, compositionStart: { phasedRegistrationNames: { bubbled: "onCompositionStart",
            captured: "onCompositionStartCapture" }, dependencies: "topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ") }, compositionUpdate: { phasedRegistrationNames: { bubbled: "onCompositionUpdate", captured: "onCompositionUpdateCapture" }, dependencies: "topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ") } }, cc = !1;
function dc(a, b) { switch (a) {
    case "topKeyUp": return -1 !== Pb.indexOf(b.keyCode);
    case "topKeyDown": return 229 !== b.keyCode;
    case "topKeyPress":
    case "topMouseDown":
    case "topBlur": return !0;
    default: return !1;
} }
function ec(a) { a = a.detail; return "object" === typeof a && "data" in a ? a.data : null; }
var fc = !1;
function gc(a, b) { switch (a) {
    case "topCompositionEnd": return ec(b);
    case "topKeyPress":
        if (32 !== b.which)
            return null;
        cc = !0;
        return ac;
    case "topTextInput": return a = b.data, a === ac && cc ? null : a;
    default: return null;
} }
function hc(a, b) { if (fc)
    return "topCompositionEnd" === a || !Vb && dc(a, b) ? (a = Fb(), S._root = null, S._startText = null, S._fallbackText = null, fc = !1, a) : null; switch (a) {
    case "topPaste": return null;
    case "topKeyPress":
        if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
            if (b.char && 1 < b.char.length)
                return b.char;
            if (b.which)
                return String.fromCharCode(b.which);
        }
        return null;
    case "topCompositionEnd": return $b ? null : b.data;
    default: return null;
} }
var ic = { eventTypes: bc, extractEvents: function (a, b, c, d) {
        var e;
        if (Vb)
            b: {
                switch (a) {
                    case "topCompositionStart":
                        var f = bc.compositionStart;
                        break b;
                    case "topCompositionEnd":
                        f = bc.compositionEnd;
                        break b;
                    case "topCompositionUpdate":
                        f = bc.compositionUpdate;
                        break b;
                }
                f = void 0;
            }
        else
            fc ? dc(a, c) && (f = bc.compositionEnd) : "topKeyDown" === a && 229 === c.keyCode && (f = bc.compositionStart);
        f ? ($b && (fc || f !== bc.compositionStart ? f === bc.compositionEnd && fc && (e = Fb()) : (S._root = d, S._startText = Gb(), fc = !0)), f = Mb.getPooled(f, b, c, d), e ? f.data =
            e : (e = ec(c), null !== e && (f.data = e)), Ab(f), e = f) : e = null;
        (a = Zb ? gc(a, c) : hc(a, c)) ? (b = Nb.getPooled(bc.beforeInput, b, c, d), b.data = a, Ab(b)) : b = null;
        return [e, b];
    } }, jc = null, kc = null, lc = null;
function mc(a) { if (a = Xa(a)) {
    jc && "function" === typeof jc.restoreControlledState ? void 0 : E("194");
    var b = Wa(a.stateNode);
    jc.restoreControlledState(a.stateNode, a.type, b);
} }
var nc = { injectFiberControlledHostComponent: function (a) { jc = a; } };
function oc(a) { kc ? lc ? lc.push(a) : lc = [a] : kc = a; }
function pc() { if (kc) {
    var a = kc, b = lc;
    lc = kc = null;
    mc(a);
    if (b)
        for (a = 0; a < b.length; a++)
            mc(b[a]);
} }
var qc = Object.freeze({ injection: nc, enqueueStateRestore: oc, restoreStateIfNeeded: pc });
function rc(a, b) { return a(b); }
var sc = !1;
function tc(a, b) { if (sc)
    return rc(a, b); sc = !0; try {
    return rc(a, b);
}
finally {
    sc = !1, pc();
} }
var uc = { color: !0, date: !0, datetime: !0, "datetime-local": !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 };
function vc(a) { var b = a && a.nodeName && a.nodeName.toLowerCase(); return "input" === b ? !!uc[a.type] : "textarea" === b ? !0 : !1; }
function wc(a) { a = a.target || a.srcElement || window; a.correspondingUseElement && (a = a.correspondingUseElement); return 3 === a.nodeType ? a.parentNode : a; }
var xc;
l.canUseDOM && (xc = document.implementation && document.implementation.hasFeature && !0 !== document.implementation.hasFeature("", ""));
function yc(a, b) { if (!l.canUseDOM || b && !("addEventListener" in document))
    return !1; b = "on" + a; var c = b in document; c || (c = document.createElement("div"), c.setAttribute(b, "return;"), c = "function" === typeof c[b]); !c && xc && "wheel" === a && (c = document.implementation.hasFeature("Events.wheel", "3.0")); return c; }
function zc(a) { var b = a.type; return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b); }
function Ac(a) { var b = zc(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b]; if (!a.hasOwnProperty(b) && "function" === typeof c.get && "function" === typeof c.set)
    return Object.defineProperty(a, b, { enumerable: c.enumerable, configurable: !0, get: function () { return c.get.call(this); }, set: function (a) { d = "" + a; c.set.call(this, a); } }), { getValue: function () { return d; }, setValue: function (a) { d = "" + a; }, stopTracking: function () { a._valueTracker = null; delete a[b]; } }; }
function Bc(a) { a._valueTracker || (a._valueTracker = Ac(a)); }
function Cc(a) { if (!a)
    return !1; var b = a._valueTracker; if (!b)
    return !0; var c = b.getValue(); var d = ""; a && (d = zc(a) ? a.checked ? "true" : "false" : a.value); a = d; return a !== c ? (b.setValue(a), !0) : !1; }
var Dc = { change: { phasedRegistrationNames: { bubbled: "onChange", captured: "onChangeCapture" }, dependencies: "topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ") } };
function Ec(a, b, c) { a = T.getPooled(Dc.change, a, b, c); a.type = "change"; oc(c); Ab(a); return a; }
var Fc = null, Gc = null;
function Hc(a) { kb(a); lb(!1); }
function Ic(a) { var b = qb(a); if (Cc(b))
    return a; }
function Jc(a, b) { if ("topChange" === a)
    return b; }
var Kc = !1;
l.canUseDOM && (Kc = yc("input") && (!document.documentMode || 9 < document.documentMode));
function Lc() { Fc && (Fc.detachEvent("onpropertychange", Mc), Gc = Fc = null); }
function Mc(a) { "value" === a.propertyName && Ic(Gc) && (a = Ec(Gc, a, wc(a)), tc(Hc, a)); }
function Nc(a, b, c) { "topFocus" === a ? (Lc(), Fc = b, Gc = c, Fc.attachEvent("onpropertychange", Mc)) : "topBlur" === a && Lc(); }
function Oc(a) { if ("topSelectionChange" === a || "topKeyUp" === a || "topKeyDown" === a)
    return Ic(Gc); }
function Pc(a, b) { if ("topClick" === a)
    return Ic(b); }
function $c(a, b) { if ("topInput" === a || "topChange" === a)
    return Ic(b); }
var ad = { eventTypes: Dc, _isInputEventSupported: Kc, extractEvents: function (a, b, c, d) {
        var e = b ? qb(b) : window, f = e.nodeName && e.nodeName.toLowerCase();
        if ("select" === f || "input" === f && "file" === e.type)
            var g = Jc;
        else if (vc(e))
            if (Kc)
                g = $c;
            else {
                g = Oc;
                var h = Nc;
            }
        else
            f = e.nodeName, !f || "input" !== f.toLowerCase() || "checkbox" !== e.type && "radio" !== e.type || (g = Pc);
        if (g && (g = g(a, b)))
            return Ec(g, c, d);
        h && h(a, e, b);
        "topBlur" === a && null != b && (a = b._wrapperState || e._wrapperState) && a.controlled && "number" === e.type && (a = "" + e.value, e.getAttribute("value") !==
            a && e.setAttribute("value", a));
    } };
function bd(a, b, c, d) { return T.call(this, a, b, c, d); }
T.augmentClass(bd, { view: null, detail: null });
var cd = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function dd(a) { var b = this.nativeEvent; return b.getModifierState ? b.getModifierState(a) : (a = cd[a]) ? !!b[a] : !1; }
function ed() { return dd; }
function fd(a, b, c, d) { return T.call(this, a, b, c, d); }
bd.augmentClass(fd, { screenX: null, screenY: null, clientX: null, clientY: null, pageX: null, pageY: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, getModifierState: ed, button: null, buttons: null, relatedTarget: function (a) { return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement); } });
var gd = { mouseEnter: { registrationName: "onMouseEnter", dependencies: ["topMouseOut", "topMouseOver"] }, mouseLeave: { registrationName: "onMouseLeave", dependencies: ["topMouseOut", "topMouseOver"] } }, hd = { eventTypes: gd, extractEvents: function (a, b, c, d) {
        if ("topMouseOver" === a && (c.relatedTarget || c.fromElement) || "topMouseOut" !== a && "topMouseOver" !== a)
            return null;
        var e = d.window === d ? d : (e = d.ownerDocument) ? e.defaultView || e.parentWindow : window;
        "topMouseOut" === a ? (a = b, b = (b = c.relatedTarget || c.toElement) ? pb(b) : null) : a = null;
        if (a ===
            b)
            return null;
        var f = null == a ? e : qb(a);
        e = null == b ? e : qb(b);
        var g = fd.getPooled(gd.mouseLeave, a, c, d);
        g.type = "mouseleave";
        g.target = f;
        g.relatedTarget = e;
        c = fd.getPooled(gd.mouseEnter, b, c, d);
        c.type = "mouseenter";
        c.target = e;
        c.relatedTarget = f;
        Bb(g, c, a, b);
        return [g, c];
    } }, id = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
function jd(a) { a = a.type; return "string" === typeof a ? a : "function" === typeof a ? a.displayName || a.name : null; }
function kd(a) { var b = a; if (a.alternate)
    for (; b["return"];)
        b = b["return"];
else {
    if (0 !== (b.effectTag & 2))
        return 1;
    for (; b["return"];)
        if (b = b["return"], 0 !== (b.effectTag & 2))
            return 1;
} return 3 === b.tag ? 2 : 3; }
function ld(a) { return (a = a._reactInternalFiber) ? 2 === kd(a) : !1; }
function md(a) { 2 !== kd(a) ? E("188") : void 0; }
function nd(a) {
    var b = a.alternate;
    if (!b)
        return b = kd(a), 3 === b ? E("188") : void 0, 1 === b ? null : a;
    for (var c = a, d = b;;) {
        var e = c["return"], f = e ? e.alternate : null;
        if (!e || !f)
            break;
        if (e.child === f.child) {
            for (var g = e.child; g;) {
                if (g === c)
                    return md(e), a;
                if (g === d)
                    return md(e), b;
                g = g.sibling;
            }
            E("188");
        }
        if (c["return"] !== d["return"])
            c = e, d = f;
        else {
            g = !1;
            for (var h = e.child; h;) {
                if (h === c) {
                    g = !0;
                    c = e;
                    d = f;
                    break;
                }
                if (h === d) {
                    g = !0;
                    d = e;
                    c = f;
                    break;
                }
                h = h.sibling;
            }
            if (!g) {
                for (h = f.child; h;) {
                    if (h === c) {
                        g = !0;
                        c = f;
                        d = e;
                        break;
                    }
                    if (h === d) {
                        g = !0;
                        d = f;
                        c = e;
                        break;
                    }
                    h = h.sibling;
                }
                g ?
                    void 0 : E("189");
            }
        }
        c.alternate !== d ? E("190") : void 0;
    }
    3 !== c.tag ? E("188") : void 0;
    return c.stateNode.current === c ? a : b;
}
function od(a) { a = nd(a); if (!a)
    return null; for (var b = a;;) {
    if (5 === b.tag || 6 === b.tag)
        return b;
    if (b.child)
        b.child["return"] = b, b = b.child;
    else {
        if (b === a)
            break;
        for (; !b.sibling;) {
            if (!b["return"] || b["return"] === a)
                return null;
            b = b["return"];
        }
        b.sibling["return"] = b["return"];
        b = b.sibling;
    }
} return null; }
function pd(a) { a = nd(a); if (!a)
    return null; for (var b = a;;) {
    if (5 === b.tag || 6 === b.tag)
        return b;
    if (b.child && 4 !== b.tag)
        b.child["return"] = b, b = b.child;
    else {
        if (b === a)
            break;
        for (; !b.sibling;) {
            if (!b["return"] || b["return"] === a)
                return null;
            b = b["return"];
        }
        b.sibling["return"] = b["return"];
        b = b.sibling;
    }
} return null; }
var qd = [];
function rd(a) { var b = a.targetInst; do {
    if (!b) {
        a.ancestors.push(b);
        break;
    }
    var c;
    for (c = b; c["return"];)
        c = c["return"];
    c = 3 !== c.tag ? null : c.stateNode.containerInfo;
    if (!c)
        break;
    a.ancestors.push(b);
    b = pb(c);
} while (b); for (c = 0; c < a.ancestors.length; c++)
    b = a.ancestors[c], sd(a.topLevelType, b, a.nativeEvent, wc(a.nativeEvent)); }
var td = !0, sd = void 0;
function ud(a) { td = !!a; }
function U(a, b, c) { return c ? ba.listen(c, b, vd.bind(null, a)) : null; }
function wd(a, b, c) { return c ? ba.capture(c, b, vd.bind(null, a)) : null; }
function vd(a, b) { if (td) {
    var c = wc(b);
    c = pb(c);
    null === c || "number" !== typeof c.tag || 2 === kd(c) || (c = null);
    if (qd.length) {
        var d = qd.pop();
        d.topLevelType = a;
        d.nativeEvent = b;
        d.targetInst = c;
        a = d;
    }
    else
        a = { topLevelType: a, nativeEvent: b, targetInst: c, ancestors: [] };
    try {
        tc(rd, a);
    }
    finally {
        a.topLevelType = null, a.nativeEvent = null, a.targetInst = null, a.ancestors.length = 0, 10 > qd.length && qd.push(a);
    }
} }
var xd = Object.freeze({ get _enabled() { return td; }, get _handleTopLevel() { return sd; }, setHandleTopLevel: function (a) { sd = a; }, setEnabled: ud, isEnabled: function () { return td; }, trapBubbledEvent: U, trapCapturedEvent: wd, dispatchEvent: vd });
function yd(a, b) { var c = {}; c[a.toLowerCase()] = b.toLowerCase(); c["Webkit" + a] = "webkit" + b; c["Moz" + a] = "moz" + b; c["ms" + a] = "MS" + b; c["O" + a] = "o" + b.toLowerCase(); return c; }
var zd = { animationend: yd("Animation", "AnimationEnd"), animationiteration: yd("Animation", "AnimationIteration"), animationstart: yd("Animation", "AnimationStart"), transitionend: yd("Transition", "TransitionEnd") }, Ad = {}, Bd = {};
l.canUseDOM && (Bd = document.createElement("div").style, "AnimationEvent" in window || (delete zd.animationend.animation, delete zd.animationiteration.animation, delete zd.animationstart.animation), "TransitionEvent" in window || delete zd.transitionend.transition);
function Cd(a) { if (Ad[a])
    return Ad[a]; if (!zd[a])
    return a; var b = zd[a], c; for (c in b)
    if (b.hasOwnProperty(c) && c in Bd)
        return Ad[a] = b[c]; return ""; }
var Dd = { topAbort: "abort", topAnimationEnd: Cd("animationend") || "animationend", topAnimationIteration: Cd("animationiteration") || "animationiteration", topAnimationStart: Cd("animationstart") || "animationstart", topBlur: "blur", topCancel: "cancel", topCanPlay: "canplay", topCanPlayThrough: "canplaythrough", topChange: "change", topClick: "click", topClose: "close", topCompositionEnd: "compositionend", topCompositionStart: "compositionstart", topCompositionUpdate: "compositionupdate", topContextMenu: "contextmenu", topCopy: "copy",
    topCut: "cut", topDoubleClick: "dblclick", topDrag: "drag", topDragEnd: "dragend", topDragEnter: "dragenter", topDragExit: "dragexit", topDragLeave: "dragleave", topDragOver: "dragover", topDragStart: "dragstart", topDrop: "drop", topDurationChange: "durationchange", topEmptied: "emptied", topEncrypted: "encrypted", topEnded: "ended", topError: "error", topFocus: "focus", topInput: "input", topKeyDown: "keydown", topKeyPress: "keypress", topKeyUp: "keyup", topLoadedData: "loadeddata", topLoad: "load", topLoadedMetadata: "loadedmetadata", topLoadStart: "loadstart",
    topMouseDown: "mousedown", topMouseMove: "mousemove", topMouseOut: "mouseout", topMouseOver: "mouseover", topMouseUp: "mouseup", topPaste: "paste", topPause: "pause", topPlay: "play", topPlaying: "playing", topProgress: "progress", topRateChange: "ratechange", topScroll: "scroll", topSeeked: "seeked", topSeeking: "seeking", topSelectionChange: "selectionchange", topStalled: "stalled", topSuspend: "suspend", topTextInput: "textInput", topTimeUpdate: "timeupdate", topToggle: "toggle", topTouchCancel: "touchcancel", topTouchEnd: "touchend", topTouchMove: "touchmove",
    topTouchStart: "touchstart", topTransitionEnd: Cd("transitionend") || "transitionend", topVolumeChange: "volumechange", topWaiting: "waiting", topWheel: "wheel" }, Ed = {}, Fd = 0, Gd = "_reactListenersID" + ("" + Math.random()).slice(2);
function Hd(a) { Object.prototype.hasOwnProperty.call(a, Gd) || (a[Gd] = Fd++, Ed[a[Gd]] = {}); return Ed[a[Gd]]; }
function Id(a) { for (; a && a.firstChild;)
    a = a.firstChild; return a; }
function Jd(a, b) { var c = Id(a); a = 0; for (var d; c;) {
    if (3 === c.nodeType) {
        d = a + c.textContent.length;
        if (a <= b && d >= b)
            return { node: c, offset: b - a };
        a = d;
    }
    a: {
        for (; c;) {
            if (c.nextSibling) {
                c = c.nextSibling;
                break a;
            }
            c = c.parentNode;
        }
        c = void 0;
    }
    c = Id(c);
} }
function Kd(a) { var b = a && a.nodeName && a.nodeName.toLowerCase(); return b && ("input" === b && "text" === a.type || "textarea" === b || "true" === a.contentEditable); }
var Ld = l.canUseDOM && "documentMode" in document && 11 >= document.documentMode, Md = { select: { phasedRegistrationNames: { bubbled: "onSelect", captured: "onSelectCapture" }, dependencies: "topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ") } }, Nd = null, Od = null, Pd = null, Qd = !1;
function Rd(a, b) { if (Qd || null == Nd || Nd !== da())
    return null; var c = Nd; "selectionStart" in c && Kd(c) ? c = { start: c.selectionStart, end: c.selectionEnd } : window.getSelection ? (c = window.getSelection(), c = { anchorNode: c.anchorNode, anchorOffset: c.anchorOffset, focusNode: c.focusNode, focusOffset: c.focusOffset }) : c = void 0; return Pd && ea(Pd, c) ? null : (Pd = c, a = T.getPooled(Md.select, Od, a, b), a.type = "select", a.target = Nd, Ab(a), a); }
var Sd = { eventTypes: Md, extractEvents: function (a, b, c, d) {
        var e = d.window === d ? d.document : 9 === d.nodeType ? d : d.ownerDocument, f;
        if (!(f = !e)) {
            a: {
                e = Hd(e);
                f = Sa.onSelect;
                for (var g = 0; g < f.length; g++) {
                    var h = f[g];
                    if (!e.hasOwnProperty(h) || !e[h]) {
                        e = !1;
                        break a;
                    }
                }
                e = !0;
            }
            f = !e;
        }
        if (f)
            return null;
        e = b ? qb(b) : window;
        switch (a) {
            case "topFocus":
                if (vc(e) || "true" === e.contentEditable)
                    Nd = e, Od = b, Pd = null;
                break;
            case "topBlur":
                Pd = Od = Nd = null;
                break;
            case "topMouseDown":
                Qd = !0;
                break;
            case "topContextMenu":
            case "topMouseUp": return Qd = !1, Rd(c, d);
            case "topSelectionChange": if (Ld)
                break;
            case "topKeyDown":
            case "topKeyUp": return Rd(c, d);
        }
        return null;
    } };
function Td(a, b, c, d) { return T.call(this, a, b, c, d); }
T.augmentClass(Td, { animationName: null, elapsedTime: null, pseudoElement: null });
function Ud(a, b, c, d) { return T.call(this, a, b, c, d); }
T.augmentClass(Ud, { clipboardData: function (a) { return "clipboardData" in a ? a.clipboardData : window.clipboardData; } });
function Vd(a, b, c, d) { return T.call(this, a, b, c, d); }
bd.augmentClass(Vd, { relatedTarget: null });
function Wd(a) { var b = a.keyCode; "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b; return 32 <= a || 13 === a ? a : 0; }
var Xd = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" }, Yd = { 8: "Backspace", 9: "Tab", 12: "Clear", 13: "Enter", 16: "Shift", 17: "Control", 18: "Alt", 19: "Pause", 20: "CapsLock", 27: "Escape", 32: " ", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete", 112: "F1", 113: "F2", 114: "F3", 115: "F4",
    116: "F5", 117: "F6", 118: "F7", 119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "NumLock", 145: "ScrollLock", 224: "Meta" };
function Zd(a, b, c, d) { return T.call(this, a, b, c, d); }
bd.augmentClass(Zd, { key: function (a) { if (a.key) {
        var b = Xd[a.key] || a.key;
        if ("Unidentified" !== b)
            return b;
    } return "keypress" === a.type ? (a = Wd(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Yd[a.keyCode] || "Unidentified" : ""; }, location: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, repeat: null, locale: null, getModifierState: ed, charCode: function (a) { return "keypress" === a.type ? Wd(a) : 0; }, keyCode: function (a) { return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0; }, which: function (a) {
        return "keypress" ===
            a.type ? Wd(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    } });
function $d(a, b, c, d) { return T.call(this, a, b, c, d); }
fd.augmentClass($d, { dataTransfer: null });
function ae(a, b, c, d) { return T.call(this, a, b, c, d); }
bd.augmentClass(ae, { touches: null, targetTouches: null, changedTouches: null, altKey: null, metaKey: null, ctrlKey: null, shiftKey: null, getModifierState: ed });
function be(a, b, c, d) { return T.call(this, a, b, c, d); }
T.augmentClass(be, { propertyName: null, elapsedTime: null, pseudoElement: null });
function ce(a, b, c, d) { return T.call(this, a, b, c, d); }
fd.augmentClass(ce, { deltaX: function (a) { return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0; }, deltaY: function (a) { return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0; }, deltaZ: null, deltaMode: null });
var de = {}, ee = {};
"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function (a) {
    var b = a[0].toUpperCase() +
        a.slice(1), c = "on" + b;
    b = "top" + b;
    c = { phasedRegistrationNames: { bubbled: c, captured: c + "Capture" }, dependencies: [b] };
    de[a] = c;
    ee[b] = c;
});
var fe = { eventTypes: de, extractEvents: function (a, b, c, d) {
        var e = ee[a];
        if (!e)
            return null;
        switch (a) {
            case "topKeyPress": if (0 === Wd(c))
                return null;
            case "topKeyDown":
            case "topKeyUp":
                a = Zd;
                break;
            case "topBlur":
            case "topFocus":
                a = Vd;
                break;
            case "topClick": if (2 === c.button)
                return null;
            case "topDoubleClick":
            case "topMouseDown":
            case "topMouseMove":
            case "topMouseUp":
            case "topMouseOut":
            case "topMouseOver":
            case "topContextMenu":
                a = fd;
                break;
            case "topDrag":
            case "topDragEnd":
            case "topDragEnter":
            case "topDragExit":
            case "topDragLeave":
            case "topDragOver":
            case "topDragStart":
            case "topDrop":
                a =
                    $d;
                break;
            case "topTouchCancel":
            case "topTouchEnd":
            case "topTouchMove":
            case "topTouchStart":
                a = ae;
                break;
            case "topAnimationEnd":
            case "topAnimationIteration":
            case "topAnimationStart":
                a = Td;
                break;
            case "topTransitionEnd":
                a = be;
                break;
            case "topScroll":
                a = bd;
                break;
            case "topWheel":
                a = ce;
                break;
            case "topCopy":
            case "topCut":
            case "topPaste":
                a = Ud;
                break;
            default: a = T;
        }
        b = a.getPooled(e, b, c, d);
        Ab(b);
        return b;
    } };
sd = function (a, b, c, d) { a = jb(a, b, c, d); kb(a); lb(!1); };
hb.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));
Wa = sb.getFiberCurrentPropsFromNode;
Xa = sb.getInstanceFromNode;
Ya = sb.getNodeFromInstance;
hb.injectEventPluginsByName({ SimpleEventPlugin: fe, EnterLeaveEventPlugin: hd, ChangeEventPlugin: ad, SelectEventPlugin: Sd, BeforeInputEventPlugin: ic });
var ge = [], he = -1;
function V(a) { 0 > he || (a.current = ge[he], ge[he] = null, he--); }
function W(a, b) { he++; ge[he] = a.current; a.current = b; }
new Set;
var ie = { current: D }, X = { current: !1 }, je = D;
function ke(a) { return le(a) ? je : ie.current; }
function me(a, b) { var c = a.type.contextTypes; if (!c)
    return D; var d = a.stateNode; if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
    return d.__reactInternalMemoizedMaskedChildContext; var e = {}, f; for (f in c)
    e[f] = b[f]; d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e); return e; }
function le(a) { return 2 === a.tag && null != a.type.childContextTypes; }
function ne(a) { le(a) && (V(X, a), V(ie, a)); }
function oe(a, b, c) { null != ie.cursor ? E("168") : void 0; W(ie, b, a); W(X, c, a); }
function pe(a, b) { var c = a.stateNode, d = a.type.childContextTypes; if ("function" !== typeof c.getChildContext)
    return b; c = c.getChildContext(); for (var e in c)
    e in d ? void 0 : E("108", jd(a) || "Unknown", e); return B({}, b, c); }
function qe(a) { if (!le(a))
    return !1; var b = a.stateNode; b = b && b.__reactInternalMemoizedMergedChildContext || D; je = ie.current; W(ie, b, a); W(X, X.current, a); return !0; }
function re(a, b) { var c = a.stateNode; c ? void 0 : E("169"); if (b) {
    var d = pe(a, je);
    c.__reactInternalMemoizedMergedChildContext = d;
    V(X, a);
    V(ie, a);
    W(ie, d, a);
}
else
    V(X, a); W(X, b, a); }
function Y(a, b, c) { this.tag = a; this.key = b; this.stateNode = this.type = null; this.sibling = this.child = this["return"] = null; this.index = 0; this.memoizedState = this.updateQueue = this.memoizedProps = this.pendingProps = this.ref = null; this.internalContextTag = c; this.effectTag = 0; this.lastEffect = this.firstEffect = this.nextEffect = null; this.expirationTime = 0; this.alternate = null; }
function se(a, b, c) { var d = a.alternate; null === d ? (d = new Y(a.tag, a.key, a.internalContextTag), d.type = a.type, d.stateNode = a.stateNode, d.alternate = a, a.alternate = d) : (d.effectTag = 0, d.nextEffect = null, d.firstEffect = null, d.lastEffect = null); d.expirationTime = c; d.pendingProps = b; d.child = a.child; d.memoizedProps = a.memoizedProps; d.memoizedState = a.memoizedState; d.updateQueue = a.updateQueue; d.sibling = a.sibling; d.index = a.index; d.ref = a.ref; return d; }
function te(a, b, c) { var d = void 0, e = a.type, f = a.key; "function" === typeof e ? (d = e.prototype && e.prototype.isReactComponent ? new Y(2, f, b) : new Y(0, f, b), d.type = e, d.pendingProps = a.props) : "string" === typeof e ? (d = new Y(5, f, b), d.type = e, d.pendingProps = a.props) : "object" === typeof e && null !== e && "number" === typeof e.tag ? (d = e, d.pendingProps = a.props) : E("130", null == e ? e : typeof e, ""); d.expirationTime = c; return d; }
function ue(a, b, c, d) { b = new Y(10, d, b); b.pendingProps = a; b.expirationTime = c; return b; }
function ve(a, b, c) { b = new Y(6, null, b); b.pendingProps = a; b.expirationTime = c; return b; }
function we(a, b, c) { b = new Y(7, a.key, b); b.type = a.handler; b.pendingProps = a; b.expirationTime = c; return b; }
function xe(a, b, c) { a = new Y(9, null, b); a.expirationTime = c; return a; }
function ye(a, b, c) { b = new Y(4, a.key, b); b.pendingProps = a.children || []; b.expirationTime = c; b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation }; return b; }
var ze = null, Ae = null;
function Be(a) { return function (b) { try {
    return a(b);
}
catch (c) { } }; }
function Ce(a) { if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)
    return !1; var b = __REACT_DEVTOOLS_GLOBAL_HOOK__; if (b.isDisabled || !b.supportsFiber)
    return !0; try {
    var c = b.inject(a);
    ze = Be(function (a) { return b.onCommitFiberRoot(c, a); });
    Ae = Be(function (a) { return b.onCommitFiberUnmount(c, a); });
}
catch (d) { } return !0; }
function De(a) { "function" === typeof ze && ze(a); }
function Ee(a) { "function" === typeof Ae && Ae(a); }
function Fe(a) { return { baseState: a, expirationTime: 0, first: null, last: null, callbackList: null, hasForceUpdate: !1, isInitialized: !1 }; }
function Ge(a, b) { null === a.last ? a.first = a.last = b : (a.last.next = b, a.last = b); if (0 === a.expirationTime || a.expirationTime > b.expirationTime)
    a.expirationTime = b.expirationTime; }
function He(a, b) { var c = a.alternate, d = a.updateQueue; null === d && (d = a.updateQueue = Fe(null)); null !== c ? (a = c.updateQueue, null === a && (a = c.updateQueue = Fe(null))) : a = null; a = a !== d ? a : null; null === a ? Ge(d, b) : null === d.last || null === a.last ? (Ge(d, b), Ge(a, b)) : (Ge(d, b), a.last = b); }
function Ie(a, b, c, d) { a = a.partialState; return "function" === typeof a ? a.call(b, c, d) : a; }
function Je(a, b, c, d, e, f) {
    null !== a && a.updateQueue === c && (c = b.updateQueue = { baseState: c.baseState, expirationTime: c.expirationTime, first: c.first, last: c.last, isInitialized: c.isInitialized, callbackList: null, hasForceUpdate: !1 });
    c.expirationTime = 0;
    c.isInitialized ? a = c.baseState : (a = c.baseState = b.memoizedState, c.isInitialized = !0);
    for (var g = !0, h = c.first, k = !1; null !== h;) {
        var q = h.expirationTime;
        if (q > f) {
            var v = c.expirationTime;
            if (0 === v || v > q)
                c.expirationTime = q;
            k || (k = !0, c.baseState = a);
        }
        else {
            k || (c.first = h.next, null ===
                c.first && (c.last = null));
            if (h.isReplace)
                a = Ie(h, d, a, e), g = !0;
            else if (q = Ie(h, d, a, e))
                a = g ? B({}, a, q) : B(a, q), g = !1;
            h.isForced && (c.hasForceUpdate = !0);
            null !== h.callback && (q = c.callbackList, null === q && (q = c.callbackList = []), q.push(h));
        }
        h = h.next;
    }
    null !== c.callbackList ? b.effectTag |= 32 : null !== c.first || c.hasForceUpdate || (b.updateQueue = null);
    k || (c.baseState = a);
    return a;
}
function Ke(a, b) { var c = a.callbackList; if (null !== c)
    for (a.callbackList = null, a = 0; a < c.length; a++) {
        var d = c[a], e = d.callback;
        d.callback = null;
        "function" !== typeof e ? E("191", e) : void 0;
        e.call(b);
    } }
function Le(a, b, c, d) {
    function e(a, b) { b.updater = f; a.stateNode = b; b._reactInternalFiber = a; }
    var f = { isMounted: ld, enqueueSetState: function (c, d, e) { c = c._reactInternalFiber; e = void 0 === e ? null : e; var g = b(c); He(c, { expirationTime: g, partialState: d, callback: e, isReplace: !1, isForced: !1, nextCallback: null, next: null }); a(c, g); }, enqueueReplaceState: function (c, d, e) {
            c = c._reactInternalFiber;
            e = void 0 === e ? null : e;
            var g = b(c);
            He(c, { expirationTime: g, partialState: d, callback: e, isReplace: !0, isForced: !1, nextCallback: null, next: null });
            a(c, g);
        }, enqueueForceUpdate: function (c, d) { c = c._reactInternalFiber; d = void 0 === d ? null : d; var e = b(c); He(c, { expirationTime: e, partialState: null, callback: d, isReplace: !1, isForced: !0, nextCallback: null, next: null }); a(c, e); } };
    return { adoptClassInstance: e, constructClassInstance: function (a, b) { var c = a.type, d = ke(a), f = 2 === a.tag && null != a.type.contextTypes, g = f ? me(a, d) : D; b = new c(b, g); e(a, b); f && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = d, a.__reactInternalMemoizedMaskedChildContext = g); return b; }, mountClassInstance: function (a, b) {
            var c = a.alternate, d = a.stateNode, e = d.state || null, g = a.pendingProps;
            g ? void 0 : E("158");
            var h = ke(a);
            d.props = g;
            d.state = a.memoizedState = e;
            d.refs = D;
            d.context = me(a, h);
            null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent && (a.internalContextTag |= 1);
            "function" === typeof d.componentWillMount && (e = d.state, d.componentWillMount(), e !== d.state && f.enqueueReplaceState(d, d.state, null), e = a.updateQueue, null !== e && (d.state = Je(c, a, e, d, g, b)));
            "function" === typeof d.componentDidMount && (a.effectTag |=
                4);
        }, updateClassInstance: function (a, b, e) {
            var g = b.stateNode;
            g.props = b.memoizedProps;
            g.state = b.memoizedState;
            var h = b.memoizedProps, k = b.pendingProps;
            k || (k = h, null == k ? E("159") : void 0);
            var u = g.context, z = ke(b);
            z = me(b, z);
            "function" !== typeof g.componentWillReceiveProps || h === k && u === z || (u = g.state, g.componentWillReceiveProps(k, z), g.state !== u && f.enqueueReplaceState(g, g.state, null));
            u = b.memoizedState;
            e = null !== b.updateQueue ? Je(a, b, b.updateQueue, g, k, e) : u;
            if (!(h !== k || u !== e || X.current || null !== b.updateQueue && b.updateQueue.hasForceUpdate))
                return "function" !==
                    typeof g.componentDidUpdate || h === a.memoizedProps && u === a.memoizedState || (b.effectTag |= 4), !1;
            var G = k;
            if (null === h || null !== b.updateQueue && b.updateQueue.hasForceUpdate)
                G = !0;
            else {
                var I = b.stateNode, L = b.type;
                G = "function" === typeof I.shouldComponentUpdate ? I.shouldComponentUpdate(G, e, z) : L.prototype && L.prototype.isPureReactComponent ? !ea(h, G) || !ea(u, e) : !0;
            }
            G ? ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(k, e, z), "function" === typeof g.componentDidUpdate && (b.effectTag |= 4)) : ("function" !== typeof g.componentDidUpdate ||
                h === a.memoizedProps && u === a.memoizedState || (b.effectTag |= 4), c(b, k), d(b, e));
            g.props = k;
            g.state = e;
            g.context = z;
            return G;
        } };
}
var Qe = "function" === typeof Symbol && Symbol["for"], Re = Qe ? Symbol["for"]("react.element") : 60103, Se = Qe ? Symbol["for"]("react.call") : 60104, Te = Qe ? Symbol["for"]("react.return") : 60105, Ue = Qe ? Symbol["for"]("react.portal") : 60106, Ve = Qe ? Symbol["for"]("react.fragment") : 60107, We = "function" === typeof Symbol && Symbol.iterator;
function Xe(a) { if (null === a || "undefined" === typeof a)
    return null; a = We && a[We] || a["@@iterator"]; return "function" === typeof a ? a : null; }
var Ye = Array.isArray;
function Ze(a, b) { var c = b.ref; if (null !== c && "function" !== typeof c) {
    if (b._owner) {
        b = b._owner;
        var d = void 0;
        b && (2 !== b.tag ? E("110") : void 0, d = b.stateNode);
        d ? void 0 : E("147", c);
        var e = "" + c;
        if (null !== a && null !== a.ref && a.ref._stringRef === e)
            return a.ref;
        a = function (a) { var b = d.refs === D ? d.refs = {} : d.refs; null === a ? delete b[e] : b[e] = a; };
        a._stringRef = e;
        return a;
    }
    "string" !== typeof c ? E("148") : void 0;
    b._owner ? void 0 : E("149", c);
} return c; }
function $e(a, b) { "textarea" !== a.type && E("31", "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b, ""); }
function af(a) {
    function b(b, c) { if (a) {
        var d = b.lastEffect;
        null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;
        c.nextEffect = null;
        c.effectTag = 8;
    } }
    function c(c, d) { if (!a)
        return null; for (; null !== d;)
        b(c, d), d = d.sibling; return null; }
    function d(a, b) { for (a = new Map; null !== b;)
        null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling; return a; }
    function e(a, b, c) { a = se(a, b, c); a.index = 0; a.sibling = null; return a; }
    function f(b, c, d) {
        b.index = d;
        if (!a)
            return c;
        d = b.alternate;
        if (null !== d)
            return d = d.index, d < c ? (b.effectTag =
                2, c) : d;
        b.effectTag = 2;
        return c;
    }
    function g(b) { a && null === b.alternate && (b.effectTag = 2); return b; }
    function h(a, b, c, d) { if (null === b || 6 !== b.tag)
        return b = ve(c, a.internalContextTag, d), b["return"] = a, b; b = e(b, c, d); b["return"] = a; return b; }
    function k(a, b, c, d) { if (null !== b && b.type === c.type)
        return d = e(b, c.props, d), d.ref = Ze(b, c), d["return"] = a, d; d = te(c, a.internalContextTag, d); d.ref = Ze(b, c); d["return"] = a; return d; }
    function q(a, b, c, d) {
        if (null === b || 7 !== b.tag)
            return b = we(c, a.internalContextTag, d), b["return"] = a, b;
        b = e(b, c, d);
        b["return"] = a;
        return b;
    }
    function v(a, b, c, d) { if (null === b || 9 !== b.tag)
        return b = xe(c, a.internalContextTag, d), b.type = c.value, b["return"] = a, b; b = e(b, null, d); b.type = c.value; b["return"] = a; return b; }
    function y(a, b, c, d) { if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation)
        return b = ye(c, a.internalContextTag, d), b["return"] = a, b; b = e(b, c.children || [], d); b["return"] = a; return b; }
    function u(a, b, c, d, f) {
        if (null === b || 10 !== b.tag)
            return b = ue(c, a.internalContextTag, d, f), b["return"] = a, b;
        b = e(b, c, d);
        b["return"] = a;
        return b;
    }
    function z(a, b, c) {
        if ("string" === typeof b || "number" === typeof b)
            return b = ve("" + b, a.internalContextTag, c), b["return"] = a, b;
        if ("object" === typeof b && null !== b) {
            switch (b.$$typeof) {
                case Re:
                    if (b.type === Ve)
                        return b = ue(b.props.children, a.internalContextTag, c, b.key), b["return"] = a, b;
                    c = te(b, a.internalContextTag, c);
                    c.ref = Ze(null, b);
                    c["return"] = a;
                    return c;
                case Se: return b = we(b, a.internalContextTag, c), b["return"] = a, b;
                case Te: return c = xe(b, a.internalContextTag, c), c.type = b.value, c["return"] = a, c;
                case Ue: return b = ye(b, a.internalContextTag, c), b["return"] = a, b;
            }
            if (Ye(b) || Xe(b))
                return b = ue(b, a.internalContextTag, c, null), b["return"] = a, b;
            $e(a, b);
        }
        return null;
    }
    function G(a, b, c, d) {
        var e = null !== b ? b.key : null;
        if ("string" === typeof c || "number" === typeof c)
            return null !== e ? null : h(a, b, "" + c, d);
        if ("object" === typeof c && null !== c) {
            switch (c.$$typeof) {
                case Re: return c.key === e ? c.type === Ve ? u(a, b, c.props.children, d, e) : k(a, b, c, d) : null;
                case Se: return c.key === e ? q(a, b, c, d) : null;
                case Te: return null ===
                    e ? v(a, b, c, d) : null;
                case Ue: return c.key === e ? y(a, b, c, d) : null;
            }
            if (Ye(c) || Xe(c))
                return null !== e ? null : u(a, b, c, d, null);
            $e(a, c);
        }
        return null;
    }
    function I(a, b, c, d, e) {
        if ("string" === typeof d || "number" === typeof d)
            return a = a.get(c) || null, h(b, a, "" + d, e);
        if ("object" === typeof d && null !== d) {
            switch (d.$$typeof) {
                case Re: return a = a.get(null === d.key ? c : d.key) || null, d.type === Ve ? u(b, a, d.props.children, e, d.key) : k(b, a, d, e);
                case Se: return a = a.get(null === d.key ? c : d.key) || null, q(b, a, d, e);
                case Te: return a = a.get(c) || null, v(b, a, d, e);
                case Ue: return a =
                    a.get(null === d.key ? c : d.key) || null, y(b, a, d, e);
            }
            if (Ye(d) || Xe(d))
                return a = a.get(c) || null, u(b, a, d, e, null);
            $e(b, d);
        }
        return null;
    }
    function L(e, g, m, A) {
        for (var h = null, r = null, n = g, w = g = 0, k = null; null !== n && w < m.length; w++) {
            n.index > w ? (k = n, n = null) : k = n.sibling;
            var x = G(e, n, m[w], A);
            if (null === x) {
                null === n && (n = k);
                break;
            }
            a && n && null === x.alternate && b(e, n);
            g = f(x, g, w);
            null === r ? h = x : r.sibling = x;
            r = x;
            n = k;
        }
        if (w === m.length)
            return c(e, n), h;
        if (null === n) {
            for (; w < m.length; w++)
                if (n = z(e, m[w], A))
                    g = f(n, g, w), null === r ? h = n : r.sibling = n, r = n;
            return h;
        }
        for (n =
            d(e, n); w < m.length; w++)
            if (k = I(n, e, w, m[w], A)) {
                if (a && null !== k.alternate)
                    n["delete"](null === k.key ? w : k.key);
                g = f(k, g, w);
                null === r ? h = k : r.sibling = k;
                r = k;
            }
        a && n.forEach(function (a) { return b(e, a); });
        return h;
    }
    function N(e, g, m, A) {
        var h = Xe(m);
        "function" !== typeof h ? E("150") : void 0;
        m = h.call(m);
        null == m ? E("151") : void 0;
        for (var r = h = null, n = g, w = g = 0, k = null, x = m.next(); null !== n && !x.done; w++, x = m.next()) {
            n.index > w ? (k = n, n = null) : k = n.sibling;
            var J = G(e, n, x.value, A);
            if (null === J) {
                n || (n = k);
                break;
            }
            a && n && null === J.alternate && b(e, n);
            g = f(J, g, w);
            null === r ? h = J : r.sibling = J;
            r = J;
            n = k;
        }
        if (x.done)
            return c(e, n), h;
        if (null === n) {
            for (; !x.done; w++, x = m.next())
                x = z(e, x.value, A), null !== x && (g = f(x, g, w), null === r ? h = x : r.sibling = x, r = x);
            return h;
        }
        for (n = d(e, n); !x.done; w++, x = m.next())
            if (x = I(n, e, w, x.value, A), null !== x) {
                if (a && null !== x.alternate)
                    n["delete"](null === x.key ? w : x.key);
                g = f(x, g, w);
                null === r ? h = x : r.sibling = x;
                r = x;
            }
        a && n.forEach(function (a) { return b(e, a); });
        return h;
    }
    return function (a, d, f, h) {
        "object" === typeof f && null !== f && f.type === Ve && null === f.key && (f = f.props.children);
        var m = "object" === typeof f && null !== f;
        if (m)
            switch (f.$$typeof) {
                case Re:
                    a: {
                        var r = f.key;
                        for (m = d; null !== m;) {
                            if (m.key === r)
                                if (10 === m.tag ? f.type === Ve : m.type === f.type) {
                                    c(a, m.sibling);
                                    d = e(m, f.type === Ve ? f.props.children : f.props, h);
                                    d.ref = Ze(m, f);
                                    d["return"] = a;
                                    a = d;
                                    break a;
                                }
                                else {
                                    c(a, m);
                                    break;
                                }
                            else
                                b(a, m);
                            m = m.sibling;
                        }
                        f.type === Ve ? (d = ue(f.props.children, a.internalContextTag, h, f.key), d["return"] = a, a = d) : (h = te(f, a.internalContextTag, h), h.ref = Ze(d, f), h["return"] = a, a = h);
                    }
                    return g(a);
                case Se:
                    a: {
                        for (m = f.key; null !== d;) {
                            if (d.key ===
                                m)
                                if (7 === d.tag) {
                                    c(a, d.sibling);
                                    d = e(d, f, h);
                                    d["return"] = a;
                                    a = d;
                                    break a;
                                }
                                else {
                                    c(a, d);
                                    break;
                                }
                            else
                                b(a, d);
                            d = d.sibling;
                        }
                        d = we(f, a.internalContextTag, h);
                        d["return"] = a;
                        a = d;
                    }
                    return g(a);
                case Te:
                    a: {
                        if (null !== d)
                            if (9 === d.tag) {
                                c(a, d.sibling);
                                d = e(d, null, h);
                                d.type = f.value;
                                d["return"] = a;
                                a = d;
                                break a;
                            }
                            else
                                c(a, d);
                        d = xe(f, a.internalContextTag, h);
                        d.type = f.value;
                        d["return"] = a;
                        a = d;
                    }
                    return g(a);
                case Ue:
                    a: {
                        for (m = f.key; null !== d;) {
                            if (d.key === m)
                                if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation ===
                                    f.implementation) {
                                    c(a, d.sibling);
                                    d = e(d, f.children || [], h);
                                    d["return"] = a;
                                    a = d;
                                    break a;
                                }
                                else {
                                    c(a, d);
                                    break;
                                }
                            else
                                b(a, d);
                            d = d.sibling;
                        }
                        d = ye(f, a.internalContextTag, h);
                        d["return"] = a;
                        a = d;
                    }
                    return g(a);
            }
        if ("string" === typeof f || "number" === typeof f)
            return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f, h)) : (c(a, d), d = ve(f, a.internalContextTag, h)), d["return"] = a, a = d, g(a);
        if (Ye(f))
            return L(a, d, f, h);
        if (Xe(f))
            return N(a, d, f, h);
        m && $e(a, f);
        if ("undefined" === typeof f)
            switch (a.tag) {
                case 2:
                case 1: h = a.type, E("152", h.displayName ||
                    h.name || "Component");
            }
        return c(a, d);
    };
}
var bf = af(!0), cf = af(!1);
function df(a, b, c, d, e) {
    function f(a, b, c) { var d = b.expirationTime; b.child = null === a ? cf(b, null, c, d) : bf(b, a.child, c, d); }
    function g(a, b) { var c = b.ref; null === c || a && a.ref === c || (b.effectTag |= 128); }
    function h(a, b, c, d) { g(a, b); if (!c)
        return d && re(b, !1), q(a, b); c = b.stateNode; id.current = b; var e = c.render(); b.effectTag |= 1; f(a, b, e); b.memoizedState = c.state; b.memoizedProps = c.props; d && re(b, !0); return b.child; }
    function k(a) {
        var b = a.stateNode;
        b.pendingContext ? oe(a, b.pendingContext, b.pendingContext !== b.context) : b.context && oe(a, b.context, !1);
        I(a, b.containerInfo);
    }
    function q(a, b) { null !== a && b.child !== a.child ? E("153") : void 0; if (null !== b.child) {
        a = b.child;
        var c = se(a, a.pendingProps, a.expirationTime);
        b.child = c;
        for (c["return"] = b; null !== a.sibling;)
            a = a.sibling, c = c.sibling = se(a, a.pendingProps, a.expirationTime), c["return"] = b;
        c.sibling = null;
    } return b.child; }
    function v(a, b) { switch (b.tag) {
        case 3:
            k(b);
            break;
        case 2:
            qe(b);
            break;
        case 4: I(b, b.stateNode.containerInfo);
    } return null; }
    var y = a.shouldSetTextContent, u = a.useSyncScheduling, z = a.shouldDeprioritizeSubtree, G = b.pushHostContext, I = b.pushHostContainer, L = c.enterHydrationState, N = c.resetHydrationState, J = c.tryToClaimNextHydratableInstance;
    a = Le(d, e, function (a, b) { a.memoizedProps = b; }, function (a, b) { a.memoizedState = b; });
    var w = a.adoptClassInstance, m = a.constructClassInstance, A = a.mountClassInstance, Ob = a.updateClassInstance;
    return { beginWork: function (a, b, c) {
            if (0 === b.expirationTime || b.expirationTime > c)
                return v(a, b);
            switch (b.tag) {
                case 0:
                    null !== a ? E("155") : void 0;
                    var d = b.type, e = b.pendingProps, r = ke(b);
                    r = me(b, r);
                    d = d(e, r);
                    b.effectTag |=
                        1;
                    "object" === typeof d && null !== d && "function" === typeof d.render ? (b.tag = 2, e = qe(b), w(b, d), A(b, c), b = h(a, b, !0, e)) : (b.tag = 1, f(a, b, d), b.memoizedProps = e, b = b.child);
                    return b;
                case 1:
                    a: {
                        e = b.type;
                        c = b.pendingProps;
                        d = b.memoizedProps;
                        if (X.current)
                            null === c && (c = d);
                        else if (null === c || d === c) {
                            b = q(a, b);
                            break a;
                        }
                        d = ke(b);
                        d = me(b, d);
                        e = e(c, d);
                        b.effectTag |= 1;
                        f(a, b, e);
                        b.memoizedProps = c;
                        b = b.child;
                    }
                    return b;
                case 2: return e = qe(b), d = void 0, null === a ? b.stateNode ? E("153") : (m(b, b.pendingProps), A(b, c), d = !0) : d = Ob(a, b, c), h(a, b, d, e);
                case 3: return k(b),
                    e = b.updateQueue, null !== e ? (d = b.memoizedState, e = Je(a, b, e, null, null, c), d === e ? (N(), b = q(a, b)) : (d = e.element, r = b.stateNode, (null === a || null === a.child) && r.hydrate && L(b) ? (b.effectTag |= 2, b.child = cf(b, null, d, c)) : (N(), f(a, b, d)), b.memoizedState = e, b = b.child)) : (N(), b = q(a, b)), b;
                case 5:
                    G(b);
                    null === a && J(b);
                    e = b.type;
                    var n = b.memoizedProps;
                    d = b.pendingProps;
                    null === d && (d = n, null === d ? E("154") : void 0);
                    r = null !== a ? a.memoizedProps : null;
                    X.current || null !== d && n !== d ? (n = d.children, y(e, d) ? n = null : r && y(e, r) && (b.effectTag |= 16), g(a, b),
                        2147483647 !== c && !u && z(e, d) ? (b.expirationTime = 2147483647, b = null) : (f(a, b, n), b.memoizedProps = d, b = b.child)) : b = q(a, b);
                    return b;
                case 6: return null === a && J(b), a = b.pendingProps, null === a && (a = b.memoizedProps), b.memoizedProps = a, null;
                case 8: b.tag = 7;
                case 7:
                    e = b.pendingProps;
                    if (X.current)
                        null === e && (e = a && a.memoizedProps, null === e ? E("154") : void 0);
                    else if (null === e || b.memoizedProps === e)
                        e = b.memoizedProps;
                    d = e.children;
                    b.stateNode = null === a ? cf(b, b.stateNode, d, c) : bf(b, b.stateNode, d, c);
                    b.memoizedProps = e;
                    return b.stateNode;
                case 9: return null;
                case 4:
                    a: {
                        I(b, b.stateNode.containerInfo);
                        e = b.pendingProps;
                        if (X.current)
                            null === e && (e = a && a.memoizedProps, null == e ? E("154") : void 0);
                        else if (null === e || b.memoizedProps === e) {
                            b = q(a, b);
                            break a;
                        }
                        null === a ? b.child = bf(b, null, e, c) : f(a, b, e);
                        b.memoizedProps = e;
                        b = b.child;
                    }
                    return b;
                case 10:
                    a: {
                        c = b.pendingProps;
                        if (X.current)
                            null === c && (c = b.memoizedProps);
                        else if (null === c || b.memoizedProps === c) {
                            b = q(a, b);
                            break a;
                        }
                        f(a, b, c);
                        b.memoizedProps = c;
                        b = b.child;
                    }
                    return b;
                default: E("156");
            }
        }, beginFailedWork: function (a, b, c) { switch (b.tag) {
            case 2:
                qe(b);
                break;
            case 3:
                k(b);
                break;
            default: E("157");
        } b.effectTag |= 64; null === a ? b.child = null : b.child !== a.child && (b.child = a.child); if (0 === b.expirationTime || b.expirationTime > c)
            return v(a, b); b.firstEffect = null; b.lastEffect = null; b.child = null === a ? cf(b, null, null, c) : bf(b, a.child, null, c); 2 === b.tag && (a = b.stateNode, b.memoizedProps = a.props, b.memoizedState = a.state); return b.child; } };
}
function ef(a, b, c) {
    function d(a) { a.effectTag |= 4; }
    var e = a.createInstance, f = a.createTextInstance, g = a.appendInitialChild, h = a.finalizeInitialChildren, k = a.prepareUpdate, q = a.persistence, v = b.getRootHostContainer, y = b.popHostContext, u = b.getHostContext, z = b.popHostContainer, G = c.prepareToHydrateHostInstance, I = c.prepareToHydrateHostTextInstance, L = c.popHydrationState, N = void 0, J = void 0, w = void 0;
    a.mutation ? (N = function () { }, J = function (a, b, c) { (b.updateQueue = c) && d(b); }, w = function (a, b, c, e) { c !== e && d(b); }) : q ? E("235") : E("236");
    return { completeWork: function (a, b, c) {
            var m = b.pendingProps;
            if (null === m)
                m = b.memoizedProps;
            else if (2147483647 !== b.expirationTime || 2147483647 === c)
                b.pendingProps = null;
            switch (b.tag) {
                case 1: return null;
                case 2: return ne(b), null;
                case 3:
                    z(b);
                    V(X, b);
                    V(ie, b);
                    m = b.stateNode;
                    m.pendingContext && (m.context = m.pendingContext, m.pendingContext = null);
                    if (null === a || null === a.child)
                        L(b), b.effectTag &= -3;
                    N(b);
                    return null;
                case 5:
                    y(b);
                    c = v();
                    var A = b.type;
                    if (null !== a && null != b.stateNode) {
                        var p = a.memoizedProps, q = b.stateNode, x = u();
                        q =
                            k(q, A, p, m, c, x);
                        J(a, b, q, A, p, m, c);
                        a.ref !== b.ref && (b.effectTag |= 128);
                    }
                    else {
                        if (!m)
                            return null === b.stateNode ? E("166") : void 0, null;
                        a = u();
                        if (L(b))
                            G(b, c, a) && d(b);
                        else {
                            a = e(A, m, c, a, b);
                            a: for (p = b.child; null !== p;) {
                                if (5 === p.tag || 6 === p.tag)
                                    g(a, p.stateNode);
                                else if (4 !== p.tag && null !== p.child) {
                                    p.child["return"] = p;
                                    p = p.child;
                                    continue;
                                }
                                if (p === b)
                                    break;
                                for (; null === p.sibling;) {
                                    if (null === p["return"] || p["return"] === b)
                                        break a;
                                    p = p["return"];
                                }
                                p.sibling["return"] = p["return"];
                                p = p.sibling;
                            }
                            h(a, A, m, c) && d(b);
                            b.stateNode = a;
                        }
                        null !== b.ref &&
                            (b.effectTag |= 128);
                    }
                    return null;
                case 6:
                    if (a && null != b.stateNode)
                        w(a, b, a.memoizedProps, m);
                    else {
                        if ("string" !== typeof m)
                            return null === b.stateNode ? E("166") : void 0, null;
                        a = v();
                        c = u();
                        L(b) ? I(b) && d(b) : b.stateNode = f(m, a, c, b);
                    }
                    return null;
                case 7:
                    (m = b.memoizedProps) ? void 0 : E("165");
                    b.tag = 8;
                    A = [];
                    a: for ((p = b.stateNode) && (p["return"] = b); null !== p;) {
                        if (5 === p.tag || 6 === p.tag || 4 === p.tag)
                            E("247");
                        else if (9 === p.tag)
                            A.push(p.type);
                        else if (null !== p.child) {
                            p.child["return"] = p;
                            p = p.child;
                            continue;
                        }
                        for (; null === p.sibling;) {
                            if (null ===
                                p["return"] || p["return"] === b)
                                break a;
                            p = p["return"];
                        }
                        p.sibling["return"] = p["return"];
                        p = p.sibling;
                    }
                    p = m.handler;
                    m = p(m.props, A);
                    b.child = bf(b, null !== a ? a.child : null, m, c);
                    return b.child;
                case 8: return b.tag = 7, null;
                case 9: return null;
                case 10: return null;
                case 4: return z(b), N(b), null;
                case 0: E("167");
                default: E("156");
            }
        } };
}
function ff(a, b) {
    function c(a) { var c = a.ref; if (null !== c)
        try {
            c(null);
        }
        catch (A) {
            b(a, A);
        } }
    function d(a) { "function" === typeof Ee && Ee(a); switch (a.tag) {
        case 2:
            c(a);
            var d = a.stateNode;
            if ("function" === typeof d.componentWillUnmount)
                try {
                    d.props = a.memoizedProps, d.state = a.memoizedState, d.componentWillUnmount();
                }
                catch (A) {
                    b(a, A);
                }
            break;
        case 5:
            c(a);
            break;
        case 7:
            e(a.stateNode);
            break;
        case 4: k && g(a);
    } }
    function e(a) {
        for (var b = a;;)
            if (d(b), null === b.child || k && 4 === b.tag) {
                if (b === a)
                    break;
                for (; null === b.sibling;) {
                    if (null === b["return"] ||
                        b["return"] === a)
                        return;
                    b = b["return"];
                }
                b.sibling["return"] = b["return"];
                b = b.sibling;
            }
            else
                b.child["return"] = b, b = b.child;
    }
    function f(a) { return 5 === a.tag || 3 === a.tag || 4 === a.tag; }
    function g(a) {
        for (var b = a, c = !1, f = void 0, g = void 0;;) {
            if (!c) {
                c = b["return"];
                a: for (;;) {
                    null === c ? E("160") : void 0;
                    switch (c.tag) {
                        case 5:
                            f = c.stateNode;
                            g = !1;
                            break a;
                        case 3:
                            f = c.stateNode.containerInfo;
                            g = !0;
                            break a;
                        case 4:
                            f = c.stateNode.containerInfo;
                            g = !0;
                            break a;
                    }
                    c = c["return"];
                }
                c = !0;
            }
            if (5 === b.tag || 6 === b.tag)
                e(b), g ? J(f, b.stateNode) : N(f, b.stateNode);
            else if (4 === b.tag ? f = b.stateNode.containerInfo : d(b), null !== b.child) {
                b.child["return"] = b;
                b = b.child;
                continue;
            }
            if (b === a)
                break;
            for (; null === b.sibling;) {
                if (null === b["return"] || b["return"] === a)
                    return;
                b = b["return"];
                4 === b.tag && (c = !1);
            }
            b.sibling["return"] = b["return"];
            b = b.sibling;
        }
    }
    var h = a.getPublicInstance, k = a.mutation;
    a = a.persistence;
    k || (a ? E("235") : E("236"));
    var q = k.commitMount, v = k.commitUpdate, y = k.resetTextContent, u = k.commitTextUpdate, z = k.appendChild, G = k.appendChildToContainer, I = k.insertBefore, L = k.insertInContainerBefore, N = k.removeChild, J = k.removeChildFromContainer;
    return { commitResetTextContent: function (a) { y(a.stateNode); }, commitPlacement: function (a) {
            a: {
                for (var b = a["return"]; null !== b;) {
                    if (f(b)) {
                        var c = b;
                        break a;
                    }
                    b = b["return"];
                }
                E("160");
                c = void 0;
            }
            var d = b = void 0;
            switch (c.tag) {
                case 5:
                    b = c.stateNode;
                    d = !1;
                    break;
                case 3:
                    b = c.stateNode.containerInfo;
                    d = !0;
                    break;
                case 4:
                    b = c.stateNode.containerInfo;
                    d = !0;
                    break;
                default: E("161");
            }
            c.effectTag & 16 && (y(b), c.effectTag &= -17);
            a: b: for (c = a;;) {
                for (; null === c.sibling;) {
                    if (null === c["return"] || f(c["return"])) {
                        c =
                            null;
                        break a;
                    }
                    c = c["return"];
                }
                c.sibling["return"] = c["return"];
                for (c = c.sibling; 5 !== c.tag && 6 !== c.tag;) {
                    if (c.effectTag & 2)
                        continue b;
                    if (null === c.child || 4 === c.tag)
                        continue b;
                    else
                        c.child["return"] = c, c = c.child;
                }
                if (!(c.effectTag & 2)) {
                    c = c.stateNode;
                    break a;
                }
            }
            for (var e = a;;) {
                if (5 === e.tag || 6 === e.tag)
                    c ? d ? L(b, e.stateNode, c) : I(b, e.stateNode, c) : d ? G(b, e.stateNode) : z(b, e.stateNode);
                else if (4 !== e.tag && null !== e.child) {
                    e.child["return"] = e;
                    e = e.child;
                    continue;
                }
                if (e === a)
                    break;
                for (; null === e.sibling;) {
                    if (null === e["return"] || e["return"] ===
                        a)
                        return;
                    e = e["return"];
                }
                e.sibling["return"] = e["return"];
                e = e.sibling;
            }
        }, commitDeletion: function (a) { g(a); a["return"] = null; a.child = null; a.alternate && (a.alternate.child = null, a.alternate["return"] = null); }, commitWork: function (a, b) {
            switch (b.tag) {
                case 2: break;
                case 5:
                    var c = b.stateNode;
                    if (null != c) {
                        var d = b.memoizedProps;
                        a = null !== a ? a.memoizedProps : d;
                        var e = b.type, f = b.updateQueue;
                        b.updateQueue = null;
                        null !== f && v(c, f, e, a, d, b);
                    }
                    break;
                case 6:
                    null === b.stateNode ? E("162") : void 0;
                    c = b.memoizedProps;
                    u(b.stateNode, null !== a ? a.memoizedProps :
                        c, c);
                    break;
                case 3: break;
                default: E("163");
            }
        }, commitLifeCycles: function (a, b) {
            switch (b.tag) {
                case 2:
                    var c = b.stateNode;
                    if (b.effectTag & 4)
                        if (null === a)
                            c.props = b.memoizedProps, c.state = b.memoizedState, c.componentDidMount();
                        else {
                            var d = a.memoizedProps;
                            a = a.memoizedState;
                            c.props = b.memoizedProps;
                            c.state = b.memoizedState;
                            c.componentDidUpdate(d, a);
                        }
                    b = b.updateQueue;
                    null !== b && Ke(b, c);
                    break;
                case 3:
                    c = b.updateQueue;
                    null !== c && Ke(c, null !== b.child ? b.child.stateNode : null);
                    break;
                case 5:
                    c = b.stateNode;
                    null === a && b.effectTag & 4 && q(c, b.type, b.memoizedProps, b);
                    break;
                case 6: break;
                case 4: break;
                default: E("163");
            }
        }, commitAttachRef: function (a) { var b = a.ref; if (null !== b) {
            var c = a.stateNode;
            switch (a.tag) {
                case 5:
                    b(h(c));
                    break;
                default: b(c);
            }
        } }, commitDetachRef: function (a) { a = a.ref; null !== a && a(null); } };
}
var gf = {};
function hf(a) {
    function b(a) { a === gf ? E("174") : void 0; return a; }
    var c = a.getChildHostContext, d = a.getRootHostContext, e = { current: gf }, f = { current: gf }, g = { current: gf };
    return { getHostContext: function () { return b(e.current); }, getRootHostContainer: function () { return b(g.current); }, popHostContainer: function (a) { V(e, a); V(f, a); V(g, a); }, popHostContext: function (a) { f.current === a && (V(e, a), V(f, a)); }, pushHostContainer: function (a, b) { W(g, b, a); b = d(b); W(f, a, a); W(e, b, a); }, pushHostContext: function (a) {
            var d = b(g.current), h = b(e.current);
            d = c(h, a.type, d);
            h !== d && (W(f, a, a), W(e, d, a));
        }, resetHostContainer: function () { e.current = gf; g.current = gf; } };
}
function jf(a) {
    function b(a, b) { var c = new Y(5, null, 0); c.type = "DELETED"; c.stateNode = b; c["return"] = a; c.effectTag = 8; null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c; }
    function c(a, b) { switch (a.tag) {
        case 5: return b = f(b, a.type, a.pendingProps), null !== b ? (a.stateNode = b, !0) : !1;
        case 6: return b = g(b, a.pendingProps), null !== b ? (a.stateNode = b, !0) : !1;
        default: return !1;
    } }
    function d(a) { for (a = a["return"]; null !== a && 5 !== a.tag && 3 !== a.tag;)
        a = a["return"]; y = a; }
    var e = a.shouldSetTextContent;
    a = a.hydration;
    if (!a)
        return { enterHydrationState: function () { return !1; }, resetHydrationState: function () { }, tryToClaimNextHydratableInstance: function () { }, prepareToHydrateHostInstance: function () { E("175"); }, prepareToHydrateHostTextInstance: function () { E("176"); }, popHydrationState: function () { return !1; } };
    var f = a.canHydrateInstance, g = a.canHydrateTextInstance, h = a.getNextHydratableSibling, k = a.getFirstHydratableChild, q = a.hydrateInstance, v = a.hydrateTextInstance, y = null, u = null, z = !1;
    return { enterHydrationState: function (a) {
            u =
                k(a.stateNode.containerInfo);
            y = a;
            return z = !0;
        }, resetHydrationState: function () { u = y = null; z = !1; }, tryToClaimNextHydratableInstance: function (a) { if (z) {
            var d = u;
            if (d) {
                if (!c(a, d)) {
                    d = h(d);
                    if (!d || !c(a, d)) {
                        a.effectTag |= 2;
                        z = !1;
                        y = a;
                        return;
                    }
                    b(y, u);
                }
                y = a;
                u = k(d);
            }
            else
                a.effectTag |= 2, z = !1, y = a;
        } }, prepareToHydrateHostInstance: function (a, b, c) { b = q(a.stateNode, a.type, a.memoizedProps, b, c, a); a.updateQueue = b; return null !== b ? !0 : !1; }, prepareToHydrateHostTextInstance: function (a) { return v(a.stateNode, a.memoizedProps, a); }, popHydrationState: function (a) {
            if (a !==
                y)
                return !1;
            if (!z)
                return d(a), z = !0, !1;
            var c = a.type;
            if (5 !== a.tag || "head" !== c && "body" !== c && !e(c, a.memoizedProps))
                for (c = u; c;)
                    b(a, c), c = h(c);
            d(a);
            u = y ? h(a.stateNode) : null;
            return !0;
        } };
}
function kf(a) {
    function b(a) {
        Qb = ja = !0;
        var b = a.stateNode;
        b.current === a ? E("177") : void 0;
        b.isReadyForCommit = !1;
        id.current = null;
        if (1 < a.effectTag)
            if (null !== a.lastEffect) {
                a.lastEffect.nextEffect = a;
                var c = a.firstEffect;
            }
            else
                c = a;
        else
            c = a.firstEffect;
        yg();
        for (t = c; null !== t;) {
            var d = !1, e = void 0;
            try {
                for (; null !== t;) {
                    var f = t.effectTag;
                    f & 16 && zg(t);
                    if (f & 128) {
                        var g = t.alternate;
                        null !== g && Ag(g);
                    }
                    switch (f & -242) {
                        case 2:
                            Ne(t);
                            t.effectTag &= -3;
                            break;
                        case 6:
                            Ne(t);
                            t.effectTag &= -3;
                            Oe(t.alternate, t);
                            break;
                        case 4:
                            Oe(t.alternate, t);
                            break;
                        case 8: Sc = !0, Bg(t), Sc = !1;
                    }
                    t = t.nextEffect;
                }
            }
            catch (Tc) {
                d = !0, e = Tc;
            }
            d && (null === t ? E("178") : void 0, h(t, e), null !== t && (t = t.nextEffect));
        }
        Cg();
        b.current = a;
        for (t = c; null !== t;) {
            c = !1;
            d = void 0;
            try {
                for (; null !== t;) {
                    var k = t.effectTag;
                    k & 36 && Dg(t.alternate, t);
                    k & 128 && Eg(t);
                    if (k & 64)
                        switch (e = t, f = void 0, null !== R && (f = R.get(e), R["delete"](e), null == f && null !== e.alternate && (e = e.alternate, f = R.get(e), R["delete"](e))), null == f ? E("184") : void 0, e.tag) {
                            case 2:
                                e.stateNode.componentDidCatch(f.error, { componentStack: f.componentStack });
                                break;
                            case 3:
                                null === ca && (ca = f.error);
                                break;
                            default: E("157");
                        }
                    var Qc = t.nextEffect;
                    t.nextEffect = null;
                    t = Qc;
                }
            }
            catch (Tc) {
                c = !0, d = Tc;
            }
            c && (null === t ? E("178") : void 0, h(t, d), null !== t && (t = t.nextEffect));
        }
        ja = Qb = !1;
        "function" === typeof De && De(a.stateNode);
        ha && (ha.forEach(G), ha = null);
        null !== ca && (a = ca, ca = null, Ob(a));
        b = b.current.expirationTime;
        0 === b && (qa = R = null);
        return b;
    }
    function c(a) {
        for (;;) {
            var b = Fg(a.alternate, a, H), c = a["return"], d = a.sibling;
            var e = a;
            if (2147483647 === H || 2147483647 !== e.expirationTime) {
                if (2 !== e.tag && 3 !==
                    e.tag)
                    var f = 0;
                else
                    f = e.updateQueue, f = null === f ? 0 : f.expirationTime;
                for (var g = e.child; null !== g;)
                    0 !== g.expirationTime && (0 === f || f > g.expirationTime) && (f = g.expirationTime), g = g.sibling;
                e.expirationTime = f;
            }
            if (null !== b)
                return b;
            null !== c && (null === c.firstEffect && (c.firstEffect = a.firstEffect), null !== a.lastEffect && (null !== c.lastEffect && (c.lastEffect.nextEffect = a.firstEffect), c.lastEffect = a.lastEffect), 1 < a.effectTag && (null !== c.lastEffect ? c.lastEffect.nextEffect = a : c.firstEffect = a, c.lastEffect = a));
            if (null !== d)
                return d;
            if (null !== c)
                a = c;
            else {
                a.stateNode.isReadyForCommit = !0;
                break;
            }
        }
        return null;
    }
    function d(a) { var b = rg(a.alternate, a, H); null === b && (b = c(a)); id.current = null; return b; }
    function e(a) { var b = Gg(a.alternate, a, H); null === b && (b = c(a)); id.current = null; return b; }
    function f(a) { if (null !== R) {
        if (!(0 === H || H > a))
            if (H <= Uc)
                for (; null !== F;)
                    F = k(F) ? e(F) : d(F);
            else
                for (; null !== F && !A();)
                    F = k(F) ? e(F) : d(F);
    }
    else if (!(0 === H || H > a))
        if (H <= Uc)
            for (; null !== F;)
                F = d(F);
        else
            for (; null !== F && !A();)
                F = d(F); }
    function g(a, b) {
        ja ? E("243") : void 0;
        ja = !0;
        a.isReadyForCommit =
            !1;
        if (a !== ra || b !== H || null === F) {
            for (; -1 < he;)
                ge[he] = null, he--;
            je = D;
            ie.current = D;
            X.current = !1;
            x();
            ra = a;
            H = b;
            F = se(ra.current, null, b);
        }
        var c = !1, d = null;
        try {
            f(b);
        }
        catch (Rc) {
            c = !0, d = Rc;
        }
        for (; c;) {
            if (eb) {
                ca = d;
                break;
            }
            var g = F;
            if (null === g)
                eb = !0;
            else {
                var k = h(g, d);
                null === k ? E("183") : void 0;
                if (!eb) {
                    try {
                        c = k;
                        d = b;
                        for (k = c; null !== g;) {
                            switch (g.tag) {
                                case 2:
                                    ne(g);
                                    break;
                                case 5:
                                    qg(g);
                                    break;
                                case 3:
                                    p(g);
                                    break;
                                case 4: p(g);
                            }
                            if (g === k || g.alternate === k)
                                break;
                            g = g["return"];
                        }
                        F = e(c);
                        f(d);
                    }
                    catch (Rc) {
                        c = !0;
                        d = Rc;
                        continue;
                    }
                    break;
                }
            }
        }
        b = ca;
        eb = ja = !1;
        ca =
            null;
        null !== b && Ob(b);
        return a.isReadyForCommit ? a.current.alternate : null;
    }
    function h(a, b) {
        var c = id.current = null, d = !1, e = !1, f = null;
        if (3 === a.tag)
            c = a, q(a) && (eb = !0);
        else
            for (var g = a["return"]; null !== g && null === c;) {
                2 === g.tag ? "function" === typeof g.stateNode.componentDidCatch && (d = !0, f = jd(g), c = g, e = !0) : 3 === g.tag && (c = g);
                if (q(g)) {
                    if (Sc || null !== ha && (ha.has(g) || null !== g.alternate && ha.has(g.alternate)))
                        return null;
                    c = null;
                    e = !1;
                }
                g = g["return"];
            }
        if (null !== c) {
            null === qa && (qa = new Set);
            qa.add(c);
            var h = "";
            g = a;
            do {
                a: switch (g.tag) {
                    case 0:
                    case 1:
                    case 2:
                    case 5:
                        var k = g._debugOwner, Qc = g._debugSource;
                        var m = jd(g);
                        var n = null;
                        k && (n = jd(k));
                        k = Qc;
                        m = "\n    in " + (m || "Unknown") + (k ? " (at " + k.fileName.replace(/^.*[\\\/]/, "") + ":" + k.lineNumber + ")" : n ? " (created by " + n + ")" : "");
                        break a;
                    default: m = "";
                }
                h += m;
                g = g["return"];
            } while (g);
            g = h;
            a = jd(a);
            null === R && (R = new Map);
            b = { componentName: a, componentStack: g, error: b, errorBoundary: d ? c.stateNode : null, errorBoundaryFound: d, errorBoundaryName: f, willRetry: e };
            R.set(c, b);
            try {
                var p = b.error;
                p && p.suppressReactErrorLogging || console.error(p);
            }
            catch (Vc) {
                Vc &&
                    Vc.suppressReactErrorLogging || console.error(Vc);
            }
            Qb ? (null === ha && (ha = new Set), ha.add(c)) : G(c);
            return c;
        }
        null === ca && (ca = b);
        return null;
    }
    function k(a) { return null !== R && (R.has(a) || null !== a.alternate && R.has(a.alternate)); }
    function q(a) { return null !== qa && (qa.has(a) || null !== a.alternate && qa.has(a.alternate)); }
    function v() { return 20 * (((I() + 100) / 20 | 0) + 1); }
    function y(a) { return 0 !== ka ? ka : ja ? Qb ? 1 : H : !Hg || a.internalContextTag & 1 ? v() : 1; }
    function u(a, b) { return z(a, b, !1); }
    function z(a, b) {
        for (; null !== a;) {
            if (0 === a.expirationTime ||
                a.expirationTime > b)
                a.expirationTime = b;
            null !== a.alternate && (0 === a.alternate.expirationTime || a.alternate.expirationTime > b) && (a.alternate.expirationTime = b);
            if (null === a["return"])
                if (3 === a.tag) {
                    var c = a.stateNode;
                    !ja && c === ra && b < H && (F = ra = null, H = 0);
                    var d = c, e = b;
                    Rb > Ig && E("185");
                    if (null === d.nextScheduledRoot)
                        d.remainingExpirationTime = e, null === O ? (sa = O = d, d.nextScheduledRoot = d) : (O = O.nextScheduledRoot = d, O.nextScheduledRoot = sa);
                    else {
                        var f = d.remainingExpirationTime;
                        if (0 === f || e < f)
                            d.remainingExpirationTime = e;
                    }
                    Fa || (la ?
                        Sb && (ma = d, na = 1, m(ma, na)) : 1 === e ? w(1, null) : L(e));
                    !ja && c === ra && b < H && (F = ra = null, H = 0);
                }
                else
                    break;
            a = a["return"];
        }
    }
    function G(a) { z(a, 1, !0); }
    function I() { return Uc = ((Wc() - Pe) / 10 | 0) + 2; }
    function L(a) { if (0 !== Tb) {
        if (a > Tb)
            return;
        Jg(Xc);
    } var b = Wc() - Pe; Tb = a; Xc = Kg(J, { timeout: 10 * (a - 2) - b }); }
    function N() {
        var a = 0, b = null;
        if (null !== O)
            for (var c = O, d = sa; null !== d;) {
                var e = d.remainingExpirationTime;
                if (0 === e) {
                    null === c || null === O ? E("244") : void 0;
                    if (d === d.nextScheduledRoot) {
                        sa = O = d.nextScheduledRoot = null;
                        break;
                    }
                    else if (d === sa)
                        sa = e = d.nextScheduledRoot,
                            O.nextScheduledRoot = e, d.nextScheduledRoot = null;
                    else if (d === O) {
                        O = c;
                        O.nextScheduledRoot = sa;
                        d.nextScheduledRoot = null;
                        break;
                    }
                    else
                        c.nextScheduledRoot = d.nextScheduledRoot, d.nextScheduledRoot = null;
                    d = c.nextScheduledRoot;
                }
                else {
                    if (0 === a || e < a)
                        a = e, b = d;
                    if (d === O)
                        break;
                    c = d;
                    d = d.nextScheduledRoot;
                }
            }
        c = ma;
        null !== c && c === b ? Rb++ : Rb = 0;
        ma = b;
        na = a;
    }
    function J(a) { w(0, a); }
    function w(a, b) {
        fb = b;
        for (N(); null !== ma && 0 !== na && (0 === a || na <= a) && !Yc;)
            m(ma, na), N();
        null !== fb && (Tb = 0, Xc = -1);
        0 !== na && L(na);
        fb = null;
        Yc = !1;
        Rb = 0;
        if (Ub)
            throw a = Zc, Zc =
                null, Ub = !1, a;
    }
    function m(a, c) { Fa ? E("245") : void 0; Fa = !0; if (c <= I()) {
        var d = a.finishedWork;
        null !== d ? (a.finishedWork = null, a.remainingExpirationTime = b(d)) : (a.finishedWork = null, d = g(a, c), null !== d && (a.remainingExpirationTime = b(d)));
    }
    else
        d = a.finishedWork, null !== d ? (a.finishedWork = null, a.remainingExpirationTime = b(d)) : (a.finishedWork = null, d = g(a, c), null !== d && (A() ? a.finishedWork = d : a.remainingExpirationTime = b(d))); Fa = !1; }
    function A() { return null === fb || fb.timeRemaining() > Lg ? !1 : Yc = !0; }
    function Ob(a) {
        null === ma ? E("246") :
            void 0;
        ma.remainingExpirationTime = 0;
        Ub || (Ub = !0, Zc = a);
    }
    var r = hf(a), n = jf(a), p = r.popHostContainer, qg = r.popHostContext, x = r.resetHostContainer, Me = df(a, r, n, u, y), rg = Me.beginWork, Gg = Me.beginFailedWork, Fg = ef(a, r, n).completeWork;
    r = ff(a, h);
    var zg = r.commitResetTextContent, Ne = r.commitPlacement, Bg = r.commitDeletion, Oe = r.commitWork, Dg = r.commitLifeCycles, Eg = r.commitAttachRef, Ag = r.commitDetachRef, Wc = a.now, Kg = a.scheduleDeferredCallback, Jg = a.cancelDeferredCallback, Hg = a.useSyncScheduling, yg = a.prepareForCommit, Cg = a.resetAfterCommit, Pe = Wc(), Uc = 2, ka = 0, ja = !1, F = null, ra = null, H = 0, t = null, R = null, qa = null, ha = null, ca = null, eb = !1, Qb = !1, Sc = !1, sa = null, O = null, Tb = 0, Xc = -1, Fa = !1, ma = null, na = 0, Yc = !1, Ub = !1, Zc = null, fb = null, la = !1, Sb = !1, Ig = 1E3, Rb = 0, Lg = 1;
    return { computeAsyncExpiration: v, computeExpirationForFiber: y, scheduleWork: u, batchedUpdates: function (a, b) { var c = la; la = !0; try {
            return a(b);
        }
        finally {
            (la = c) || Fa || w(1, null);
        } }, unbatchedUpdates: function (a) { if (la && !Sb) {
            Sb = !0;
            try {
                return a();
            }
            finally {
                Sb = !1;
            }
        } return a(); }, flushSync: function (a) {
            var b = la;
            la = !0;
            try {
                a: {
                    var c = ka;
                    ka = 1;
                    try {
                        var d = a();
                        break a;
                    }
                    finally {
                        ka = c;
                    }
                    d = void 0;
                }
                return d;
            }
            finally {
                la = b, Fa ? E("187") : void 0, w(1, null);
            }
        }, deferredUpdates: function (a) { var b = ka; ka = v(); try {
            return a();
        }
        finally {
            ka = b;
        } } };
}
function lf(a) {
    function b(a) { a = od(a); return null === a ? null : a.stateNode; }
    var c = a.getPublicInstance;
    a = kf(a);
    var d = a.computeAsyncExpiration, e = a.computeExpirationForFiber, f = a.scheduleWork;
    return { createContainer: function (a, b) { var c = new Y(3, null, 0); a = { current: c, containerInfo: a, pendingChildren: null, remainingExpirationTime: 0, isReadyForCommit: !1, finishedWork: null, context: null, pendingContext: null, hydrate: b, nextScheduledRoot: null }; return c.stateNode = a; }, updateContainer: function (a, b, c, q) {
            var g = b.current;
            if (c) {
                c =
                    c._reactInternalFiber;
                var h;
                b: {
                    2 === kd(c) && 2 === c.tag ? void 0 : E("170");
                    for (h = c; 3 !== h.tag;) {
                        if (le(h)) {
                            h = h.stateNode.__reactInternalMemoizedMergedChildContext;
                            break b;
                        }
                        (h = h["return"]) ? void 0 : E("171");
                    }
                    h = h.stateNode.context;
                }
                c = le(c) ? pe(c, h) : h;
            }
            else
                c = D;
            null === b.context ? b.context = c : b.pendingContext = c;
            b = q;
            b = void 0 === b ? null : b;
            q = null != a && null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent ? d() : e(g);
            He(g, { expirationTime: q, partialState: { element: a }, callback: b, isReplace: !1, isForced: !1,
                nextCallback: null, next: null });
            f(g, q);
        }, batchedUpdates: a.batchedUpdates, unbatchedUpdates: a.unbatchedUpdates, deferredUpdates: a.deferredUpdates, flushSync: a.flushSync, getPublicRootInstance: function (a) { a = a.current; if (!a.child)
            return null; switch (a.child.tag) {
            case 5: return c(a.child.stateNode);
            default: return a.child.stateNode;
        } }, findHostInstance: b, findHostInstanceWithNoPortals: function (a) { a = pd(a); return null === a ? null : a.stateNode; }, injectIntoDevTools: function (a) {
            var c = a.findFiberByHostInstance;
            return Ce(B({}, a, { findHostInstanceByFiber: function (a) { return b(a); }, findFiberByHostInstance: function (a) { return c ? c(a) : null; } }));
        } };
}
var mf = Object.freeze({ default: lf }), nf = mf && lf || mf, of = nf["default"] ? nf["default"] : nf;
function pf(a, b, c) { var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null; return { $$typeof: Ue, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c }; }
var qf = "object" === typeof performance && "function" === typeof performance.now, rf = void 0;
rf = qf ? function () { return performance.now(); } : function () { return Date.now(); };
var sf = void 0, tf = void 0;
if (l.canUseDOM)
    if ("function" !== typeof requestIdleCallback || "function" !== typeof cancelIdleCallback) {
        var uf = null, vf = !1, wf = -1, xf = !1, yf = 0, zf = 33, Af = 33, Bf;
        Bf = qf ? { didTimeout: !1, timeRemaining: function () { var a = yf - performance.now(); return 0 < a ? a : 0; } } : { didTimeout: !1, timeRemaining: function () { var a = yf - Date.now(); return 0 < a ? a : 0; } };
        var Cf = "__reactIdleCallback$" + Math.random().toString(36).slice(2);
        window.addEventListener("message", function (a) {
            if (a.source === window && a.data === Cf) {
                vf = !1;
                a = rf();
                if (0 >= yf - a)
                    if (-1 !== wf && wf <=
                        a)
                        Bf.didTimeout = !0;
                    else {
                        xf || (xf = !0, requestAnimationFrame(Df));
                        return;
                    }
                else
                    Bf.didTimeout = !1;
                wf = -1;
                a = uf;
                uf = null;
                null !== a && a(Bf);
            }
        }, !1);
        var Df = function (a) { xf = !1; var b = a - yf + Af; b < Af && zf < Af ? (8 > b && (b = 8), Af = b < zf ? zf : b) : zf = b; yf = a + Af; vf || (vf = !0, window.postMessage(Cf, "*")); };
        sf = function (a, b) { uf = a; null != b && "number" === typeof b.timeout && (wf = rf() + b.timeout); xf || (xf = !0, requestAnimationFrame(Df)); return 0; };
        tf = function () { uf = null; vf = !1; wf = -1; };
    }
    else
        sf = window.requestIdleCallback, tf = window.cancelIdleCallback;
else
    sf = function (a) { return setTimeout(function () { a({ timeRemaining: function () { return Infinity; } }); }); },
        tf = function (a) { clearTimeout(a); };
var Ef = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, Ff = {}, Gf = {};
function Hf(a) { if (Gf.hasOwnProperty(a))
    return !0; if (Ff.hasOwnProperty(a))
    return !1; if (Ef.test(a))
    return Gf[a] = !0; Ff[a] = !0; return !1; }
function If(a, b, c) { var d = wa(b); if (d && va(b, c)) {
    var e = d.mutationMethod;
    e ? e(a, c) : null == c || d.hasBooleanValue && !c || d.hasNumericValue && isNaN(c) || d.hasPositiveNumericValue && 1 > c || d.hasOverloadedBooleanValue && !1 === c ? Jf(a, b) : d.mustUseProperty ? a[d.propertyName] = c : (b = d.attributeName, (e = d.attributeNamespace) ? a.setAttributeNS(e, b, "" + c) : d.hasBooleanValue || d.hasOverloadedBooleanValue && !0 === c ? a.setAttribute(b, "") : a.setAttribute(b, "" + c));
}
else
    Kf(a, b, va(b, c) ? c : null); }
function Kf(a, b, c) { Hf(b) && (null == c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)); }
function Jf(a, b) { var c = wa(b); c ? (b = c.mutationMethod) ? b(a, void 0) : c.mustUseProperty ? a[c.propertyName] = c.hasBooleanValue ? !1 : "" : a.removeAttribute(c.attributeName) : a.removeAttribute(b); }
function Lf(a, b) { var c = b.value, d = b.checked; return B({ type: void 0, step: void 0, min: void 0, max: void 0 }, b, { defaultChecked: void 0, defaultValue: void 0, value: null != c ? c : a._wrapperState.initialValue, checked: null != d ? d : a._wrapperState.initialChecked }); }
function Mf(a, b) { var c = b.defaultValue; a._wrapperState = { initialChecked: null != b.checked ? b.checked : b.defaultChecked, initialValue: null != b.value ? b.value : c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value }; }
function Nf(a, b) { b = b.checked; null != b && If(a, "checked", b); }
function Of(a, b) { Nf(a, b); var c = b.value; if (null != c)
    if (0 === c && "" === a.value)
        a.value = "0";
    else if ("number" === b.type) {
        if (b = parseFloat(a.value) || 0, c != b || c == b && a.value != c)
            a.value = "" + c;
    }
    else
        a.value !== "" + c && (a.value = "" + c);
else
    null == b.value && null != b.defaultValue && a.defaultValue !== "" + b.defaultValue && (a.defaultValue = "" + b.defaultValue), null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked); }
function Pf(a, b) { switch (b.type) {
    case "submit":
    case "reset": break;
    case "color":
    case "date":
    case "datetime":
    case "datetime-local":
    case "month":
    case "time":
    case "week":
        a.value = "";
        a.value = a.defaultValue;
        break;
    default: a.value = a.value;
} b = a.name; "" !== b && (a.name = ""); a.defaultChecked = !a.defaultChecked; a.defaultChecked = !a.defaultChecked; "" !== b && (a.name = b); }
function Qf(a) { var b = ""; aa.Children.forEach(a, function (a) { null == a || "string" !== typeof a && "number" !== typeof a || (b += a); }); return b; }
function Rf(a, b) { a = B({ children: void 0 }, b); if (b = Qf(b.children))
    a.children = b; return a; }
function Sf(a, b, c, d) { a = a.options; if (b) {
    b = {};
    for (var e = 0; e < c.length; e++)
        b["$" + c[e]] = !0;
    for (c = 0; c < a.length; c++)
        e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
}
else {
    c = "" + c;
    b = null;
    for (e = 0; e < a.length; e++) {
        if (a[e].value === c) {
            a[e].selected = !0;
            d && (a[e].defaultSelected = !0);
            return;
        }
        null !== b || a[e].disabled || (b = a[e]);
    }
    null !== b && (b.selected = !0);
} }
function Tf(a, b) { var c = b.value; a._wrapperState = { initialValue: null != c ? c : b.defaultValue, wasMultiple: !!b.multiple }; }
function Uf(a, b) { null != b.dangerouslySetInnerHTML ? E("91") : void 0; return B({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue }); }
function Vf(a, b) { var c = b.value; null == c && (c = b.defaultValue, b = b.children, null != b && (null != c ? E("92") : void 0, Array.isArray(b) && (1 >= b.length ? void 0 : E("93"), b = b[0]), c = "" + b), null == c && (c = "")); a._wrapperState = { initialValue: "" + c }; }
function Wf(a, b) { var c = b.value; null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && (a.defaultValue = c)); null != b.defaultValue && (a.defaultValue = b.defaultValue); }
function Xf(a) { var b = a.textContent; b === a._wrapperState.initialValue && (a.value = b); }
var Yf = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
function Zf(a) { switch (a) {
    case "svg": return "http://www.w3.org/2000/svg";
    case "math": return "http://www.w3.org/1998/Math/MathML";
    default: return "http://www.w3.org/1999/xhtml";
} }
function $f(a, b) { return null == a || "http://www.w3.org/1999/xhtml" === a ? Zf(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a; }
var ag = void 0, bg = function (a) { return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) { MSApp.execUnsafeLocalFunction(function () { return a(b, c, d, e); }); } : a; }(function (a, b) { if (a.namespaceURI !== Yf.svg || "innerHTML" in a)
    a.innerHTML = b;
else {
    ag = ag || document.createElement("div");
    ag.innerHTML = "\x3csvg\x3e" + b + "\x3c/svg\x3e";
    for (b = ag.firstChild; a.firstChild;)
        a.removeChild(a.firstChild);
    for (; b.firstChild;)
        a.appendChild(b.firstChild);
} });
function cg(a, b) { if (b) {
    var c = a.firstChild;
    if (c && c === a.lastChild && 3 === c.nodeType) {
        c.nodeValue = b;
        return;
    }
} a.textContent = b; }
var dg = { animationIterationCount: !0, borderImageOutset: !0, borderImageSlice: !0, borderImageWidth: !0, boxFlex: !0, boxFlexGroup: !0, boxOrdinalGroup: !0, columnCount: !0, columns: !0, flex: !0, flexGrow: !0, flexPositive: !0, flexShrink: !0, flexNegative: !0, flexOrder: !0, gridRow: !0, gridRowEnd: !0, gridRowSpan: !0, gridRowStart: !0, gridColumn: !0, gridColumnEnd: !0, gridColumnSpan: !0, gridColumnStart: !0, fontWeight: !0, lineClamp: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, tabSize: !0, widows: !0, zIndex: !0, zoom: !0, fillOpacity: !0, floodOpacity: !0,
    stopOpacity: !0, strokeDasharray: !0, strokeDashoffset: !0, strokeMiterlimit: !0, strokeOpacity: !0, strokeWidth: !0 }, eg = ["Webkit", "ms", "Moz", "O"];
Object.keys(dg).forEach(function (a) { eg.forEach(function (b) { b = b + a.charAt(0).toUpperCase() + a.substring(1); dg[b] = dg[a]; }); });
function fg(a, b) { a = a.style; for (var c in b)
    if (b.hasOwnProperty(c)) {
        var d = 0 === c.indexOf("--");
        var e = c;
        var f = b[c];
        e = null == f || "boolean" === typeof f || "" === f ? "" : d || "number" !== typeof f || 0 === f || dg.hasOwnProperty(e) && dg[e] ? ("" + f).trim() : f + "px";
        "float" === c && (c = "cssFloat");
        d ? a.setProperty(c, e) : a[c] = e;
    } }
var gg = B({ menuitem: !0 }, { area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 });
function hg(a, b, c) { b && (gg[a] && (null != b.children || null != b.dangerouslySetInnerHTML ? E("137", a, c()) : void 0), null != b.dangerouslySetInnerHTML && (null != b.children ? E("60") : void 0, "object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML ? void 0 : E("61")), null != b.style && "object" !== typeof b.style ? E("62", c()) : void 0); }
function ig(a, b) { if (-1 === a.indexOf("-"))
    return "string" === typeof b.is; switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph": return !1;
    default: return !0;
} }
var jg = Yf.html, kg = C.thatReturns("");
function lg(a, b) { a = 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument; var c = Hd(a); b = Sa[b]; for (var d = 0; d < b.length; d++) {
    var e = b[d];
    c.hasOwnProperty(e) && c[e] || ("topScroll" === e ? wd("topScroll", "scroll", a) : "topFocus" === e || "topBlur" === e ? (wd("topFocus", "focus", a), wd("topBlur", "blur", a), c.topBlur = !0, c.topFocus = !0) : "topCancel" === e ? (yc("cancel", !0) && wd("topCancel", "cancel", a), c.topCancel = !0) : "topClose" === e ? (yc("close", !0) && wd("topClose", "close", a), c.topClose = !0) : Dd.hasOwnProperty(e) && U(e, Dd[e], a), c[e] = !0);
} }
var mg = { topAbort: "abort", topCanPlay: "canplay", topCanPlayThrough: "canplaythrough", topDurationChange: "durationchange", topEmptied: "emptied", topEncrypted: "encrypted", topEnded: "ended", topError: "error", topLoadedData: "loadeddata", topLoadedMetadata: "loadedmetadata", topLoadStart: "loadstart", topPause: "pause", topPlay: "play", topPlaying: "playing", topProgress: "progress", topRateChange: "ratechange", topSeeked: "seeked", topSeeking: "seeking", topStalled: "stalled", topSuspend: "suspend", topTimeUpdate: "timeupdate", topVolumeChange: "volumechange",
    topWaiting: "waiting" };
function ng(a, b, c, d) { c = 9 === c.nodeType ? c : c.ownerDocument; d === jg && (d = Zf(a)); d === jg ? "script" === a ? (a = c.createElement("div"), a.innerHTML = "\x3cscript\x3e\x3c/script\x3e", a = a.removeChild(a.firstChild)) : a = "string" === typeof b.is ? c.createElement(a, { is: b.is }) : c.createElement(a) : a = c.createElementNS(d, a); return a; }
function og(a, b) { return (9 === b.nodeType ? b : b.ownerDocument).createTextNode(a); }
function pg(a, b, c, d) {
    var e = ig(b, c);
    switch (b) {
        case "iframe":
        case "object":
            U("topLoad", "load", a);
            var f = c;
            break;
        case "video":
        case "audio":
            for (f in mg)
                mg.hasOwnProperty(f) && U(f, mg[f], a);
            f = c;
            break;
        case "source":
            U("topError", "error", a);
            f = c;
            break;
        case "img":
        case "image":
            U("topError", "error", a);
            U("topLoad", "load", a);
            f = c;
            break;
        case "form":
            U("topReset", "reset", a);
            U("topSubmit", "submit", a);
            f = c;
            break;
        case "details":
            U("topToggle", "toggle", a);
            f = c;
            break;
        case "input":
            Mf(a, c);
            f = Lf(a, c);
            U("topInvalid", "invalid", a);
            lg(d, "onChange");
            break;
        case "option":
            f = Rf(a, c);
            break;
        case "select":
            Tf(a, c);
            f = B({}, c, { value: void 0 });
            U("topInvalid", "invalid", a);
            lg(d, "onChange");
            break;
        case "textarea":
            Vf(a, c);
            f = Uf(a, c);
            U("topInvalid", "invalid", a);
            lg(d, "onChange");
            break;
        default: f = c;
    }
    hg(b, f, kg);
    var g = f, h;
    for (h in g)
        if (g.hasOwnProperty(h)) {
            var k = g[h];
            "style" === h ? fg(a, k, kg) : "dangerouslySetInnerHTML" === h ? (k = k ? k.__html : void 0, null != k && bg(a, k)) : "children" === h ? "string" === typeof k ? ("textarea" !== b || "" !== k) && cg(a, k) : "number" === typeof k && cg(a, "" + k) : "suppressContentEditableWarning" !== h && "suppressHydrationWarning" !== h && "autoFocus" !== h && (Ra.hasOwnProperty(h) ? null != k && lg(d, h) : e ? Kf(a, h, k) : null != k && If(a, h, k));
        }
    switch (b) {
        case "input":
            Bc(a);
            Pf(a, c);
            break;
        case "textarea":
            Bc(a);
            Xf(a, c);
            break;
        case "option":
            null != c.value && a.setAttribute("value", c.value);
            break;
        case "select":
            a.multiple = !!c.multiple;
            b = c.value;
            null != b ? Sf(a, !!c.multiple, b, !1) : null != c.defaultValue && Sf(a, !!c.multiple, c.defaultValue, !0);
            break;
        default: "function" === typeof f.onClick && (a.onclick =
            C);
    }
}
function sg(a, b, c, d, e) {
    var f = null;
    switch (b) {
        case "input":
            c = Lf(a, c);
            d = Lf(a, d);
            f = [];
            break;
        case "option":
            c = Rf(a, c);
            d = Rf(a, d);
            f = [];
            break;
        case "select":
            c = B({}, c, { value: void 0 });
            d = B({}, d, { value: void 0 });
            f = [];
            break;
        case "textarea":
            c = Uf(a, c);
            d = Uf(a, d);
            f = [];
            break;
        default: "function" !== typeof c.onClick && "function" === typeof d.onClick && (a.onclick = C);
    }
    hg(b, d, kg);
    var g, h;
    a = null;
    for (g in c)
        if (!d.hasOwnProperty(g) && c.hasOwnProperty(g) && null != c[g])
            if ("style" === g)
                for (h in b = c[g], b)
                    b.hasOwnProperty(h) && (a || (a = {}), a[h] =
                        "");
            else
                "dangerouslySetInnerHTML" !== g && "children" !== g && "suppressContentEditableWarning" !== g && "suppressHydrationWarning" !== g && "autoFocus" !== g && (Ra.hasOwnProperty(g) ? f || (f = []) : (f = f || []).push(g, null));
    for (g in d) {
        var k = d[g];
        b = null != c ? c[g] : void 0;
        if (d.hasOwnProperty(g) && k !== b && (null != k || null != b))
            if ("style" === g)
                if (b) {
                    for (h in b)
                        !b.hasOwnProperty(h) || k && k.hasOwnProperty(h) || (a || (a = {}), a[h] = "");
                    for (h in k)
                        k.hasOwnProperty(h) && b[h] !== k[h] && (a || (a = {}), a[h] = k[h]);
                }
                else
                    a || (f || (f = []), f.push(g, a)), a = k;
            else
                "dangerouslySetInnerHTML" ===
                    g ? (k = k ? k.__html : void 0, b = b ? b.__html : void 0, null != k && b !== k && (f = f || []).push(g, "" + k)) : "children" === g ? b === k || "string" !== typeof k && "number" !== typeof k || (f = f || []).push(g, "" + k) : "suppressContentEditableWarning" !== g && "suppressHydrationWarning" !== g && (Ra.hasOwnProperty(g) ? (null != k && lg(e, g), f || b === k || (f = [])) : (f = f || []).push(g, k));
    }
    a && (f = f || []).push("style", a);
    return f;
}
function tg(a, b, c, d, e) {
    "input" === c && "radio" === e.type && null != e.name && Nf(a, e);
    ig(c, d);
    d = ig(c, e);
    for (var f = 0; f < b.length; f += 2) {
        var g = b[f], h = b[f + 1];
        "style" === g ? fg(a, h, kg) : "dangerouslySetInnerHTML" === g ? bg(a, h) : "children" === g ? cg(a, h) : d ? null != h ? Kf(a, g, h) : a.removeAttribute(g) : null != h ? If(a, g, h) : Jf(a, g);
    }
    switch (c) {
        case "input":
            Of(a, e);
            break;
        case "textarea":
            Wf(a, e);
            break;
        case "select": a._wrapperState.initialValue = void 0, b = a._wrapperState.wasMultiple, a._wrapperState.wasMultiple = !!e.multiple, c = e.value, null != c ? Sf(a, !!e.multiple, c, !1) : b !== !!e.multiple && (null != e.defaultValue ? Sf(a, !!e.multiple, e.defaultValue, !0) : Sf(a, !!e.multiple, e.multiple ? [] : "", !1));
    }
}
function ug(a, b, c, d, e) {
    switch (b) {
        case "iframe":
        case "object":
            U("topLoad", "load", a);
            break;
        case "video":
        case "audio":
            for (var f in mg)
                mg.hasOwnProperty(f) && U(f, mg[f], a);
            break;
        case "source":
            U("topError", "error", a);
            break;
        case "img":
        case "image":
            U("topError", "error", a);
            U("topLoad", "load", a);
            break;
        case "form":
            U("topReset", "reset", a);
            U("topSubmit", "submit", a);
            break;
        case "details":
            U("topToggle", "toggle", a);
            break;
        case "input":
            Mf(a, c);
            U("topInvalid", "invalid", a);
            lg(e, "onChange");
            break;
        case "select":
            Tf(a, c);
            U("topInvalid", "invalid", a);
            lg(e, "onChange");
            break;
        case "textarea": Vf(a, c), U("topInvalid", "invalid", a), lg(e, "onChange");
    }
    hg(b, c, kg);
    d = null;
    for (var g in c)
        c.hasOwnProperty(g) && (f = c[g], "children" === g ? "string" === typeof f ? a.textContent !== f && (d = ["children", f]) : "number" === typeof f && a.textContent !== "" + f && (d = ["children", "" + f]) : Ra.hasOwnProperty(g) && null != f && lg(e, g));
    switch (b) {
        case "input":
            Bc(a);
            Pf(a, c);
            break;
        case "textarea":
            Bc(a);
            Xf(a, c);
            break;
        case "select":
        case "option": break;
        default: "function" === typeof c.onClick &&
            (a.onclick = C);
    }
    return d;
}
function vg(a, b) { return a.nodeValue !== b; }
var wg = Object.freeze({ createElement: ng, createTextNode: og, setInitialProperties: pg, diffProperties: sg, updateProperties: tg, diffHydratedProperties: ug, diffHydratedText: vg, warnForUnmatchedText: function () { }, warnForDeletedHydratableElement: function () { }, warnForDeletedHydratableText: function () { }, warnForInsertedHydratedElement: function () { }, warnForInsertedHydratedText: function () { }, restoreControlledState: function (a, b, c) {
        switch (b) {
            case "input":
                Of(a, c);
                b = c.name;
                if ("radio" === c.type && null != b) {
                    for (c = a; c.parentNode;)
                        c =
                            c.parentNode;
                    c = c.querySelectorAll("input[name\x3d" + JSON.stringify("" + b) + '][type\x3d"radio"]');
                    for (b = 0; b < c.length; b++) {
                        var d = c[b];
                        if (d !== a && d.form === a.form) {
                            var e = rb(d);
                            e ? void 0 : E("90");
                            Cc(d);
                            Of(d, e);
                        }
                    }
                }
                break;
            case "textarea":
                Wf(a, c);
                break;
            case "select": b = c.value, null != b && Sf(a, !!c.multiple, b, !1);
        }
    } });
nc.injectFiberControlledHostComponent(wg);
var xg = null, Mg = null;
function Ng(a) { return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue)); }
function Og(a) { a = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null; return !(!a || 1 !== a.nodeType || !a.hasAttribute("data-reactroot")); }
var Z = of({ getRootHostContext: function (a) { var b = a.nodeType; switch (b) {
        case 9:
        case 11:
            a = (a = a.documentElement) ? a.namespaceURI : $f(null, "");
            break;
        default: b = 8 === b ? a.parentNode : a, a = b.namespaceURI || null, b = b.tagName, a = $f(a, b);
    } return a; }, getChildHostContext: function (a, b) { return $f(a, b); }, getPublicInstance: function (a) { return a; }, prepareForCommit: function () {
        xg = td;
        var a = da();
        if (Kd(a)) {
            if ("selectionStart" in a)
                var b = { start: a.selectionStart, end: a.selectionEnd };
            else
                a: {
                    var c = window.getSelection && window.getSelection();
                    if (c && 0 !== c.rangeCount) {
                        b = c.anchorNode;
                        var d = c.anchorOffset, e = c.focusNode;
                        c = c.focusOffset;
                        try {
                            b.nodeType, e.nodeType;
                        }
                        catch (z) {
                            b = null;
                            break a;
                        }
                        var f = 0, g = -1, h = -1, k = 0, q = 0, v = a, y = null;
                        b: for (;;) {
                            for (var u;;) {
                                v !== b || 0 !== d && 3 !== v.nodeType || (g = f + d);
                                v !== e || 0 !== c && 3 !== v.nodeType || (h = f + c);
                                3 === v.nodeType && (f += v.nodeValue.length);
                                if (null === (u = v.firstChild))
                                    break;
                                y = v;
                                v = u;
                            }
                            for (;;) {
                                if (v === a)
                                    break b;
                                y === b && ++k === d && (g = f);
                                y === e && ++q === c && (h = f);
                                if (null !== (u = v.nextSibling))
                                    break;
                                v = y;
                                y = v.parentNode;
                            }
                            v = u;
                        }
                        b = -1 === g || -1 === h ? null :
                            { start: g, end: h };
                    }
                    else
                        b = null;
                }
            b = b || { start: 0, end: 0 };
        }
        else
            b = null;
        Mg = { focusedElem: a, selectionRange: b };
        ud(!1);
    }, resetAfterCommit: function () {
        var a = Mg, b = da(), c = a.focusedElem, d = a.selectionRange;
        if (b !== c && fa(document.documentElement, c)) {
            if (Kd(c))
                if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c)
                    c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
                else if (window.getSelection) {
                    b = window.getSelection();
                    var e = c[Eb()].length;
                    a = Math.min(d.start, e);
                    d = void 0 === d.end ? a : Math.min(d.end, e);
                    !b.extend && a >
                        d && (e = d, d = a, a = e);
                    e = Jd(c, a);
                    var f = Jd(c, d);
                    if (e && f && (1 !== b.rangeCount || b.anchorNode !== e.node || b.anchorOffset !== e.offset || b.focusNode !== f.node || b.focusOffset !== f.offset)) {
                        var g = document.createRange();
                        g.setStart(e.node, e.offset);
                        b.removeAllRanges();
                        a > d ? (b.addRange(g), b.extend(f.node, f.offset)) : (g.setEnd(f.node, f.offset), b.addRange(g));
                    }
                }
            b = [];
            for (a = c; a = a.parentNode;)
                1 === a.nodeType && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
            ia(c);
            for (c = 0; c < b.length; c++)
                a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop =
                    a.top;
        }
        Mg = null;
        ud(xg);
        xg = null;
    }, createInstance: function (a, b, c, d, e) { a = ng(a, b, c, d); a[Q] = e; a[ob] = b; return a; }, appendInitialChild: function (a, b) { a.appendChild(b); }, finalizeInitialChildren: function (a, b, c, d) { pg(a, b, c, d); a: {
        switch (b) {
            case "button":
            case "input":
            case "select":
            case "textarea":
                a = !!c.autoFocus;
                break a;
        }
        a = !1;
    } return a; }, prepareUpdate: function (a, b, c, d, e) { return sg(a, b, c, d, e); }, shouldSetTextContent: function (a, b) {
        return "textarea" === a || "string" === typeof b.children || "number" === typeof b.children || "object" ===
            typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && "string" === typeof b.dangerouslySetInnerHTML.__html;
    }, shouldDeprioritizeSubtree: function (a, b) { return !!b.hidden; }, createTextInstance: function (a, b, c, d) { a = og(a, b); a[Q] = d; return a; }, now: rf, mutation: { commitMount: function (a) { a.focus(); }, commitUpdate: function (a, b, c, d, e) { a[ob] = e; tg(a, b, c, d, e); }, resetTextContent: function (a) { a.textContent = ""; }, commitTextUpdate: function (a, b, c) { a.nodeValue = c; }, appendChild: function (a, b) { a.appendChild(b); }, appendChildToContainer: function (a, b) { 8 === a.nodeType ? a.parentNode.insertBefore(b, a) : a.appendChild(b); }, insertBefore: function (a, b, c) { a.insertBefore(b, c); }, insertInContainerBefore: function (a, b, c) { 8 === a.nodeType ? a.parentNode.insertBefore(b, c) : a.insertBefore(b, c); }, removeChild: function (a, b) { a.removeChild(b); }, removeChildFromContainer: function (a, b) { 8 === a.nodeType ? a.parentNode.removeChild(b) : a.removeChild(b); } }, hydration: { canHydrateInstance: function (a, b) { return 1 !== a.nodeType || b.toLowerCase() !== a.nodeName.toLowerCase() ? null : a; }, canHydrateTextInstance: function (a, b) { return "" === b || 3 !== a.nodeType ? null : a; }, getNextHydratableSibling: function (a) { for (a = a.nextSibling; a && 1 !== a.nodeType && 3 !== a.nodeType;)
            a = a.nextSibling; return a; }, getFirstHydratableChild: function (a) { for (a = a.firstChild; a && 1 !== a.nodeType && 3 !== a.nodeType;)
            a = a.nextSibling; return a; }, hydrateInstance: function (a, b, c, d, e, f) { a[Q] = f; a[ob] = c; return ug(a, b, c, e, d); }, hydrateTextInstance: function (a, b, c) { a[Q] = c; return vg(a, b); }, didNotMatchHydratedContainerTextInstance: function () { }, didNotMatchHydratedTextInstance: function () { },
        didNotHydrateContainerInstance: function () { }, didNotHydrateInstance: function () { }, didNotFindHydratableContainerInstance: function () { }, didNotFindHydratableContainerTextInstance: function () { }, didNotFindHydratableInstance: function () { }, didNotFindHydratableTextInstance: function () { } }, scheduleDeferredCallback: sf, cancelDeferredCallback: tf, useSyncScheduling: !0 });
rc = Z.batchedUpdates;
function Pg(a, b, c, d, e) { Ng(c) ? void 0 : E("200"); var f = c._reactRootContainer; if (f)
    Z.updateContainer(b, f, a, e);
else {
    d = d || Og(c);
    if (!d)
        for (f = void 0; f = c.lastChild;)
            c.removeChild(f);
    var g = Z.createContainer(c, d);
    f = c._reactRootContainer = g;
    Z.unbatchedUpdates(function () { Z.updateContainer(b, g, a, e); });
} return Z.getPublicRootInstance(f); }
function Qg(a, b) { var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null; Ng(b) ? void 0 : E("200"); return pf(a, b, null, c); }
function Rg(a, b) { this._reactRootContainer = Z.createContainer(a, b); }
Rg.prototype.render = function (a, b) { Z.updateContainer(a, this._reactRootContainer, null, b); };
Rg.prototype.unmount = function (a) { Z.updateContainer(null, this._reactRootContainer, null, a); };
var Sg = { createPortal: Qg, findDOMNode: function (a) { if (null == a)
        return null; if (1 === a.nodeType)
        return a; var b = a._reactInternalFiber; if (b)
        return Z.findHostInstance(b); "function" === typeof a.render ? E("188") : E("213", Object.keys(a)); }, hydrate: function (a, b, c) { return Pg(null, a, b, !0, c); }, render: function (a, b, c) { return Pg(null, a, b, !1, c); }, unstable_renderSubtreeIntoContainer: function (a, b, c, d) { null == a || void 0 === a._reactInternalFiber ? E("38") : void 0; return Pg(a, b, c, !1, d); }, unmountComponentAtNode: function (a) {
        Ng(a) ? void 0 :
            E("40");
        return a._reactRootContainer ? (Z.unbatchedUpdates(function () { Pg(null, null, a, !1, function () { a._reactRootContainer = null; }); }), !0) : !1;
    }, unstable_createPortal: Qg, unstable_batchedUpdates: tc, unstable_deferredUpdates: Z.deferredUpdates, flushSync: Z.flushSync, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { EventPluginHub: mb, EventPluginRegistry: Va, EventPropagators: Cb, ReactControlledComponent: qc, ReactDOMComponentTree: sb, ReactDOMEventListener: xd } };
Z.injectIntoDevTools({ findFiberByHostInstance: pb, bundleType: 0, version: "16.2.0", rendererPackageName: "react-dom" });
var Tg = Object.freeze({ default: Sg }), Ug = Tg && Sg || Tg;
module.exports = Ug["default"] ? Ug["default"] : Ug;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */
var isNode = __webpack_require__(48);
/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
    return isNode(object) && object.nodeType == 3;
}
module.exports = isTextNode;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */
/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
    var doc = object ? object.ownerDocument || object : document;
    var defaultView = doc.defaultView || window;
    return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}
module.exports = isNode;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.2.0
 * react-dom.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== "production") {
    (function () {
        'use strict';
        var React = __webpack_require__(0);
        var invariant = __webpack_require__(7);
        var warning = __webpack_require__(11);
        var ExecutionEnvironment = __webpack_require__(28);
        var _assign = __webpack_require__(6);
        var emptyFunction = __webpack_require__(5);
        var EventListener = __webpack_require__(29);
        var getActiveElement = __webpack_require__(30);
        var shallowEqual = __webpack_require__(31);
        var containsNode = __webpack_require__(32);
        var focusNode = __webpack_require__(33);
        var emptyObject = __webpack_require__(10);
        var checkPropTypes = __webpack_require__(18);
        var hyphenateStyleName = __webpack_require__(50);
        var camelizeStyleName = __webpack_require__(52);
        /**
         * WARNING: DO NOT manually require this module.
         * This is a replacement for `invariant(...)` used by the error code system
         * and will _only_ be required by the corresponding babel pass.
         * It always throws.
         */
        !React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;
        // These attributes should be all lowercase to allow for
        // case insensitive checks
        var RESERVED_PROPS = {
            children: true,
            dangerouslySetInnerHTML: true,
            defaultValue: true,
            defaultChecked: true,
            innerHTML: true,
            suppressContentEditableWarning: true,
            suppressHydrationWarning: true,
            style: true
        };
        function checkMask(value, bitmask) {
            return (value & bitmask) === bitmask;
        }
        var DOMPropertyInjection = {
            /**
             * Mapping from normalized, camelcased property names to a configuration that
             * specifies how the associated DOM property should be accessed or rendered.
             */
            MUST_USE_PROPERTY: 0x1,
            HAS_BOOLEAN_VALUE: 0x4,
            HAS_NUMERIC_VALUE: 0x8,
            HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
            HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
            HAS_STRING_BOOLEAN_VALUE: 0x40,
            /**
             * Inject some specialized knowledge about the DOM. This takes a config object
             * with the following properties:
             *
             * Properties: object mapping DOM property name to one of the
             * DOMPropertyInjection constants or null. If your attribute isn't in here,
             * it won't get written to the DOM.
             *
             * DOMAttributeNames: object mapping React attribute name to the DOM
             * attribute name. Attribute names not specified use the **lowercase**
             * normalized name.
             *
             * DOMAttributeNamespaces: object mapping React attribute name to the DOM
             * attribute namespace URL. (Attribute names not specified use no namespace.)
             *
             * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
             * Property names not specified use the normalized name.
             *
             * DOMMutationMethods: Properties that require special mutation methods. If
             * `value` is undefined, the mutation method should unset the property.
             *
             * @param {object} domPropertyConfig the config as described above.
             */
            injectDOMPropertyConfig: function (domPropertyConfig) {
                var Injection = DOMPropertyInjection;
                var Properties = domPropertyConfig.Properties || {};
                var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
                var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
                var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
                for (var propName in Properties) {
                    !!properties.hasOwnProperty(propName) ? invariant(false, "injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.", propName) : void 0;
                    var lowerCased = propName.toLowerCase();
                    var propConfig = Properties[propName];
                    var propertyInfo = {
                        attributeName: lowerCased,
                        attributeNamespace: null,
                        propertyName: propName,
                        mutationMethod: null,
                        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
                        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
                        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
                        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
                        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE),
                        hasStringBooleanValue: checkMask(propConfig, Injection.HAS_STRING_BOOLEAN_VALUE)
                    };
                    !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? invariant(false, "DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s", propName) : void 0;
                    if (DOMAttributeNames.hasOwnProperty(propName)) {
                        var attributeName = DOMAttributeNames[propName];
                        propertyInfo.attributeName = attributeName;
                    }
                    if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
                        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
                    }
                    if (DOMMutationMethods.hasOwnProperty(propName)) {
                        propertyInfo.mutationMethod = DOMMutationMethods[propName];
                    }
                    // Downcase references to whitelist properties to check for membership
                    // without case-sensitivity. This allows the whitelist to pick up
                    // `allowfullscreen`, which should be written using the property configuration
                    // for `allowFullscreen`
                    properties[propName] = propertyInfo;
                }
            }
        };
        /* eslint-disable max-len */
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        /* eslint-enable max-len */
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
        /**
         * Map from property "standard name" to an object with info about how to set
         * the property in the DOM. Each object contains:
         *
         * attributeName:
         *   Used when rendering markup or with `*Attribute()`.
         * attributeNamespace
         * propertyName:
         *   Used on DOM node instances. (This includes properties that mutate due to
         *   external factors.)
         * mutationMethod:
         *   If non-null, used instead of the property or `setAttribute()` after
         *   initial render.
         * mustUseProperty:
         *   Whether the property must be accessed and mutated as an object property.
         * hasBooleanValue:
         *   Whether the property should be removed when set to a falsey value.
         * hasNumericValue:
         *   Whether the property must be numeric or parse as a numeric and should be
         *   removed when set to a falsey value.
         * hasPositiveNumericValue:
         *   Whether the property must be positive numeric or parse as a positive
         *   numeric and should be removed when set to a falsey value.
         * hasOverloadedBooleanValue:
         *   Whether the property can be used as a flag as well as with a value.
         *   Removed when strictly equal to false; present without a value when
         *   strictly equal to true; present with a value otherwise.
         */
        var properties = {};
        /**
         * Checks whether a property name is a writeable attribute.
         * @method
         */
        function shouldSetAttribute(name, value) {
            if (isReservedProp(name)) {
                return false;
            }
            if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
                return false;
            }
            if (value === null) {
                return true;
            }
            switch (typeof value) {
                case 'boolean':
                    return shouldAttributeAcceptBooleanValue(name);
                case 'undefined':
                case 'number':
                case 'string':
                case 'object':
                    return true;
                default:
                    // function, symbol
                    return false;
            }
        }
        function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function shouldAttributeAcceptBooleanValue(name) {
            if (isReservedProp(name)) {
                return true;
            }
            var propertyInfo = getPropertyInfo(name);
            if (propertyInfo) {
                return propertyInfo.hasBooleanValue || propertyInfo.hasStringBooleanValue || propertyInfo.hasOverloadedBooleanValue;
            }
            var prefix = name.toLowerCase().slice(0, 5);
            return prefix === 'data-' || prefix === 'aria-';
        }
        /**
         * Checks to see if a property name is within the list of properties
         * reserved for internal React operations. These properties should
         * not be set on an HTML element.
         *
         * @private
         * @param {string} name
         * @return {boolean} If the name is within reserved props
         */
        function isReservedProp(name) {
            return RESERVED_PROPS.hasOwnProperty(name);
        }
        var injection = DOMPropertyInjection;
        var MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY;
        var HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE;
        var HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE;
        var HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE;
        var HAS_OVERLOADED_BOOLEAN_VALUE = injection.HAS_OVERLOADED_BOOLEAN_VALUE;
        var HAS_STRING_BOOLEAN_VALUE = injection.HAS_STRING_BOOLEAN_VALUE;
        var HTMLDOMPropertyConfig = {
            // When adding attributes to this list, be sure to also add them to
            // the `possibleStandardNames` module to ensure casing and incorrect
            // name warnings.
            Properties: {
                allowFullScreen: HAS_BOOLEAN_VALUE,
                // specifies target context for links with `preload` type
                async: HAS_BOOLEAN_VALUE,
                // Note: there is a special case that prevents it from being written to the DOM
                // on the client side because the browsers are inconsistent. Instead we call focus().
                autoFocus: HAS_BOOLEAN_VALUE,
                autoPlay: HAS_BOOLEAN_VALUE,
                capture: HAS_OVERLOADED_BOOLEAN_VALUE,
                checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                cols: HAS_POSITIVE_NUMERIC_VALUE,
                contentEditable: HAS_STRING_BOOLEAN_VALUE,
                controls: HAS_BOOLEAN_VALUE,
                'default': HAS_BOOLEAN_VALUE,
                defer: HAS_BOOLEAN_VALUE,
                disabled: HAS_BOOLEAN_VALUE,
                download: HAS_OVERLOADED_BOOLEAN_VALUE,
                draggable: HAS_STRING_BOOLEAN_VALUE,
                formNoValidate: HAS_BOOLEAN_VALUE,
                hidden: HAS_BOOLEAN_VALUE,
                loop: HAS_BOOLEAN_VALUE,
                // Caution; `option.selected` is not updated if `select.multiple` is
                // disabled with `removeAttribute`.
                multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                noValidate: HAS_BOOLEAN_VALUE,
                open: HAS_BOOLEAN_VALUE,
                playsInline: HAS_BOOLEAN_VALUE,
                readOnly: HAS_BOOLEAN_VALUE,
                required: HAS_BOOLEAN_VALUE,
                reversed: HAS_BOOLEAN_VALUE,
                rows: HAS_POSITIVE_NUMERIC_VALUE,
                rowSpan: HAS_NUMERIC_VALUE,
                scoped: HAS_BOOLEAN_VALUE,
                seamless: HAS_BOOLEAN_VALUE,
                selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                size: HAS_POSITIVE_NUMERIC_VALUE,
                start: HAS_NUMERIC_VALUE,
                // support for projecting regular DOM Elements via V1 named slots ( shadow dom )
                span: HAS_POSITIVE_NUMERIC_VALUE,
                spellCheck: HAS_STRING_BOOLEAN_VALUE,
                // Style must be explicitly set in the attribute list. React components
                // expect a style object
                style: 0,
                // Keep it in the whitelist because it is case-sensitive for SVG.
                tabIndex: 0,
                // itemScope is for for Microdata support.
                // See http://schema.org/docs/gs.html
                itemScope: HAS_BOOLEAN_VALUE,
                // These attributes must stay in the white-list because they have
                // different attribute names (see DOMAttributeNames below)
                acceptCharset: 0,
                className: 0,
                htmlFor: 0,
                httpEquiv: 0,
                // Attributes with mutation methods must be specified in the whitelist
                // Set the string boolean flag to allow the behavior
                value: HAS_STRING_BOOLEAN_VALUE
            },
            DOMAttributeNames: {
                acceptCharset: 'accept-charset',
                className: 'class',
                htmlFor: 'for',
                httpEquiv: 'http-equiv'
            },
            DOMMutationMethods: {
                value: function (node, value) {
                    if (value == null) {
                        return node.removeAttribute('value');
                    }
                    // Number inputs get special treatment due to some edge cases in
                    // Chrome. Let everything else assign the value attribute as normal.
                    // https://github.com/facebook/react/issues/7253#issuecomment-236074326
                    if (node.type !== 'number' || node.hasAttribute('value') === false) {
                        node.setAttribute('value', '' + value);
                    }
                    else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
                        // Don't assign an attribute if validation reports bad
                        // input. Chrome will clear the value. Additionally, don't
                        // operate on inputs that have focus, otherwise Chrome might
                        // strip off trailing decimal places and cause the user's
                        // cursor position to jump to the beginning of the input.
                        //
                        // In ReactDOMInput, we have an onBlur event that will trigger
                        // this function again when focus is lost.
                        node.setAttribute('value', '' + value);
                    }
                }
            }
        };
        var HAS_STRING_BOOLEAN_VALUE$1 = injection.HAS_STRING_BOOLEAN_VALUE;
        var NS = {
            xlink: 'http://www.w3.org/1999/xlink',
            xml: 'http://www.w3.org/XML/1998/namespace'
        };
        /**
         * This is a list of all SVG attributes that need special casing,
         * namespacing, or boolean value assignment.
         *
         * When adding attributes to this list, be sure to also add them to
         * the `possibleStandardNames` module to ensure casing and incorrect
         * name warnings.
         *
         * SVG Attributes List:
         * https://www.w3.org/TR/SVG/attindex.html
         * SMIL Spec:
         * https://www.w3.org/TR/smil
         */
        var ATTRS = ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'x-height', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xmlns:xlink', 'xml:lang', 'xml:space'];
        var SVGDOMPropertyConfig = {
            Properties: {
                autoReverse: HAS_STRING_BOOLEAN_VALUE$1,
                externalResourcesRequired: HAS_STRING_BOOLEAN_VALUE$1,
                preserveAlpha: HAS_STRING_BOOLEAN_VALUE$1
            },
            DOMAttributeNames: {
                autoReverse: 'autoReverse',
                externalResourcesRequired: 'externalResourcesRequired',
                preserveAlpha: 'preserveAlpha'
            },
            DOMAttributeNamespaces: {
                xlinkActuate: NS.xlink,
                xlinkArcrole: NS.xlink,
                xlinkHref: NS.xlink,
                xlinkRole: NS.xlink,
                xlinkShow: NS.xlink,
                xlinkTitle: NS.xlink,
                xlinkType: NS.xlink,
                xmlBase: NS.xml,
                xmlLang: NS.xml,
                xmlSpace: NS.xml
            }
        };
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function (token) {
            return token[1].toUpperCase();
        };
        ATTRS.forEach(function (original) {
            var reactName = original.replace(CAMELIZE, capitalize);
            SVGDOMPropertyConfig.Properties[reactName] = 0;
            SVGDOMPropertyConfig.DOMAttributeNames[reactName] = original;
        });
        injection.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
        injection.injectDOMPropertyConfig(SVGDOMPropertyConfig);
        var ReactErrorUtils = {
            // Used by Fiber to simulate a try-catch.
            _caughtError: null,
            _hasCaughtError: false,
            // Used by event system to capture/rethrow the first error.
            _rethrowError: null,
            _hasRethrowError: false,
            injection: {
                injectErrorUtils: function (injectedErrorUtils) {
                    !(typeof injectedErrorUtils.invokeGuardedCallback === 'function') ? invariant(false, 'Injected invokeGuardedCallback() must be a function.') : void 0;
                    invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
                }
            },
            /**
             * Call a function while guarding against errors that happens within it.
             * Returns an error if it throws, otherwise null.
             *
             * In production, this is implemented using a try-catch. The reason we don't
             * use a try-catch directly is so that we can swap out a different
             * implementation in DEV mode.
             *
             * @param {String} name of the guard to use for logging or debugging
             * @param {Function} func The function to invoke
             * @param {*} context The context to use when calling the function
             * @param {...*} args Arguments for function
             */
            invokeGuardedCallback: function (name, func, context, a, b, c, d, e, f) {
                invokeGuardedCallback.apply(ReactErrorUtils, arguments);
            },
            /**
             * Same as invokeGuardedCallback, but instead of returning an error, it stores
             * it in a global so it can be rethrown by `rethrowCaughtError` later.
             * TODO: See if _caughtError and _rethrowError can be unified.
             *
             * @param {String} name of the guard to use for logging or debugging
             * @param {Function} func The function to invoke
             * @param {*} context The context to use when calling the function
             * @param {...*} args Arguments for function
             */
            invokeGuardedCallbackAndCatchFirstError: function (name, func, context, a, b, c, d, e, f) {
                ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
                if (ReactErrorUtils.hasCaughtError()) {
                    var error = ReactErrorUtils.clearCaughtError();
                    if (!ReactErrorUtils._hasRethrowError) {
                        ReactErrorUtils._hasRethrowError = true;
                        ReactErrorUtils._rethrowError = error;
                    }
                }
            },
            /**
             * During execution of guarded functions we will capture the first error which
             * we will rethrow to be handled by the top level error handler.
             */
            rethrowCaughtError: function () {
                return rethrowCaughtError.apply(ReactErrorUtils, arguments);
            },
            hasCaughtError: function () {
                return ReactErrorUtils._hasCaughtError;
            },
            clearCaughtError: function () {
                if (ReactErrorUtils._hasCaughtError) {
                    var error = ReactErrorUtils._caughtError;
                    ReactErrorUtils._caughtError = null;
                    ReactErrorUtils._hasCaughtError = false;
                    return error;
                }
                else {
                    invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
                }
            }
        };
        var invokeGuardedCallback = function (name, func, context, a, b, c, d, e, f) {
            ReactErrorUtils._hasCaughtError = false;
            ReactErrorUtils._caughtError = null;
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
                func.apply(context, funcArgs);
            }
            catch (error) {
                ReactErrorUtils._caughtError = error;
                ReactErrorUtils._hasCaughtError = true;
            }
        };
        {
            // In DEV mode, we swap out invokeGuardedCallback for a special version
            // that plays more nicely with the browser's DevTools. The idea is to preserve
            // "Pause on exceptions" behavior. Because React wraps all user-provided
            // functions in invokeGuardedCallback, and the production version of
            // invokeGuardedCallback uses a try-catch, all user exceptions are treated
            // like caught exceptions, and the DevTools won't pause unless the developer
            // takes the extra step of enabling pause on caught exceptions. This is
            // untintuitive, though, because even though React has caught the error, from
            // the developer's perspective, the error is uncaught.
            //
            // To preserve the expected "Pause on exceptions" behavior, we don't use a
            // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
            // DOM node, and call the user-provided callback from inside an event handler
            // for that fake event. If the callback throws, the error is "captured" using
            // a global event handler. But because the error happens in a different
            // event loop context, it does not interrupt the normal program flow.
            // Effectively, this gives us try-catch behavior without actually using
            // try-catch. Neat!
            // Check that the browser supports the APIs we need to implement our special
            // DEV version of invokeGuardedCallback
            if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
                var fakeNode = document.createElement('react');
                var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
                    // Keeps track of whether the user-provided callback threw an error. We
                    // set this to true at the beginning, then set it to false right after
                    // calling the function. If the function errors, `didError` will never be
                    // set to false. This strategy works even if the browser is flaky and
                    // fails to call our global error handler, because it doesn't rely on
                    // the error event at all.
                    var didError = true;
                    // Create an event handler for our fake event. We will synchronously
                    // dispatch our fake event using `dispatchEvent`. Inside the handler, we
                    // call the user-provided callback.
                    var funcArgs = Array.prototype.slice.call(arguments, 3);
                    function callCallback() {
                        // We immediately remove the callback from event listeners so that
                        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                        // nested call would trigger the fake event handlers of any call higher
                        // in the stack.
                        fakeNode.removeEventListener(evtType, callCallback, false);
                        func.apply(context, funcArgs);
                        didError = false;
                    }
                    // Create a global error event handler. We use this to capture the value
                    // that was thrown. It's possible that this error handler will fire more
                    // than once; for example, if non-React code also calls `dispatchEvent`
                    // and a handler for that event throws. We should be resilient to most of
                    // those cases. Even if our error event handler fires more than once, the
                    // last error event is always used. If the callback actually does error,
                    // we know that the last error event is the correct one, because it's not
                    // possible for anything else to have happened in between our callback
                    // erroring and the code that follows the `dispatchEvent` call below. If
                    // the callback doesn't error, but the error event was fired, we know to
                    // ignore it because `didError` will be false, as described above.
                    var error = void 0;
                    // Use this to track whether the error event is ever called.
                    var didSetError = false;
                    var isCrossOriginError = false;
                    function onError(event) {
                        error = event.error;
                        didSetError = true;
                        if (error === null && event.colno === 0 && event.lineno === 0) {
                            isCrossOriginError = true;
                        }
                    }
                    // Create a fake event type.
                    var evtType = 'react-' + (name ? name : 'invokeguardedcallback');
                    // Attach our event handlers
                    window.addEventListener('error', onError);
                    fakeNode.addEventListener(evtType, callCallback, false);
                    // Synchronously dispatch our fake event. If the user-provided function
                    // errors, it will trigger our global error handler.
                    var evt = document.createEvent('Event');
                    evt.initEvent(evtType, false, false);
                    fakeNode.dispatchEvent(evt);
                    if (didError) {
                        if (!didSetError) {
                            // The callback errored, but the error event never fired.
                            error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
                        }
                        else if (isCrossOriginError) {
                            error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
                        }
                        ReactErrorUtils._hasCaughtError = true;
                        ReactErrorUtils._caughtError = error;
                    }
                    else {
                        ReactErrorUtils._hasCaughtError = false;
                        ReactErrorUtils._caughtError = null;
                    }
                    // Remove our event listeners
                    window.removeEventListener('error', onError);
                };
                invokeGuardedCallback = invokeGuardedCallbackDev;
            }
        }
        var rethrowCaughtError = function () {
            if (ReactErrorUtils._hasRethrowError) {
                var error = ReactErrorUtils._rethrowError;
                ReactErrorUtils._rethrowError = null;
                ReactErrorUtils._hasRethrowError = false;
                throw error;
            }
        };
        /**
         * Injectable ordering of event plugins.
         */
        var eventPluginOrder = null;
        /**
         * Injectable mapping from names to event plugin modules.
         */
        var namesToPlugins = {};
        /**
         * Recomputes the plugin list using the injected plugins and plugin ordering.
         *
         * @private
         */
        function recomputePluginOrdering() {
            if (!eventPluginOrder) {
                // Wait until an `eventPluginOrder` is injected.
                return;
            }
            for (var pluginName in namesToPlugins) {
                var pluginModule = namesToPlugins[pluginName];
                var pluginIndex = eventPluginOrder.indexOf(pluginName);
                !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
                if (plugins[pluginIndex]) {
                    continue;
                }
                !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
                plugins[pluginIndex] = pluginModule;
                var publishedEvents = pluginModule.eventTypes;
                for (var eventName in publishedEvents) {
                    !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
                }
            }
        }
        /**
         * Publishes an event so that it can be dispatched by the supplied plugin.
         *
         * @param {object} dispatchConfig Dispatch configuration for the event.
         * @param {object} PluginModule Plugin publishing the event.
         * @return {boolean} True if the event was successfully published.
         * @private
         */
        function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
            !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
            eventNameDispatchConfigs[eventName] = dispatchConfig;
            var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
            if (phasedRegistrationNames) {
                for (var phaseName in phasedRegistrationNames) {
                    if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                        var phasedRegistrationName = phasedRegistrationNames[phaseName];
                        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
                    }
                }
                return true;
            }
            else if (dispatchConfig.registrationName) {
                publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
                return true;
            }
            return false;
        }
        /**
         * Publishes a registration name that is used to identify dispatched events.
         *
         * @param {string} registrationName Registration name to add.
         * @param {object} PluginModule Plugin publishing the event.
         * @private
         */
        function publishRegistrationName(registrationName, pluginModule, eventName) {
            !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
            registrationNameModules[registrationName] = pluginModule;
            registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
            {
                var lowerCasedName = registrationName.toLowerCase();
                possibleRegistrationNames[lowerCasedName] = registrationName;
                if (registrationName === 'onDoubleClick') {
                    possibleRegistrationNames.ondblclick = registrationName;
                }
            }
        }
        /**
         * Registers plugins so that they can extract and dispatch events.
         *
         * @see {EventPluginHub}
         */
        /**
         * Ordered list of injected plugins.
         */
        var plugins = [];
        /**
         * Mapping from event name to dispatch config
         */
        var eventNameDispatchConfigs = {};
        /**
         * Mapping from registration name to plugin module
         */
        var registrationNameModules = {};
        /**
         * Mapping from registration name to event name
         */
        var registrationNameDependencies = {};
        /**
         * Mapping from lowercase registration names to the properly cased version,
         * used to warn in the case of missing event handlers. Available
         * only in true.
         * @type {Object}
         */
        var possibleRegistrationNames = {};
        // Trust the developer to only use possibleRegistrationNames in true
        /**
         * Injects an ordering of plugins (by plugin name). This allows the ordering
         * to be decoupled from injection of the actual plugins so that ordering is
         * always deterministic regardless of packaging, on-the-fly injection, etc.
         *
         * @param {array} InjectedEventPluginOrder
         * @internal
         * @see {EventPluginHub.injection.injectEventPluginOrder}
         */
        function injectEventPluginOrder(injectedEventPluginOrder) {
            !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
            // Clone the ordering so it cannot be dynamically mutated.
            eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
            recomputePluginOrdering();
        }
        /**
         * Injects plugins to be used by `EventPluginHub`. The plugin names must be
         * in the ordering injected by `injectEventPluginOrder`.
         *
         * Plugins can be injected as part of page initialization or on-the-fly.
         *
         * @param {object} injectedNamesToPlugins Map from names to plugin modules.
         * @internal
         * @see {EventPluginHub.injection.injectEventPluginsByName}
         */
        function injectEventPluginsByName(injectedNamesToPlugins) {
            var isOrderingDirty = false;
            for (var pluginName in injectedNamesToPlugins) {
                if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                    continue;
                }
                var pluginModule = injectedNamesToPlugins[pluginName];
                if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
                    !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
                    namesToPlugins[pluginName] = pluginModule;
                    isOrderingDirty = true;
                }
            }
            if (isOrderingDirty) {
                recomputePluginOrdering();
            }
        }
        var EventPluginRegistry = Object.freeze({
            plugins: plugins,
            eventNameDispatchConfigs: eventNameDispatchConfigs,
            registrationNameModules: registrationNameModules,
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames,
            injectEventPluginOrder: injectEventPluginOrder,
            injectEventPluginsByName: injectEventPluginsByName
        });
        var getFiberCurrentPropsFromNode = null;
        var getInstanceFromNode = null;
        var getNodeFromInstance = null;
        var injection$2 = {
            injectComponentTree: function (Injected) {
                getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
                getInstanceFromNode = Injected.getInstanceFromNode;
                getNodeFromInstance = Injected.getNodeFromInstance;
                {
                    warning(getNodeFromInstance && getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
                }
            }
        };
        var validateEventDispatches;
        {
            validateEventDispatches = function (event) {
                var dispatchListeners = event._dispatchListeners;
                var dispatchInstances = event._dispatchInstances;
                var listenersIsArr = Array.isArray(dispatchListeners);
                var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
                var instancesIsArr = Array.isArray(dispatchInstances);
                var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
                warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');
            };
        }
        /**
         * Dispatch the event to the listener.
         * @param {SyntheticEvent} event SyntheticEvent to handle
         * @param {boolean} simulated If the event is simulated (changes exn behavior)
         * @param {function} listener Application-level callback
         * @param {*} inst Internal component instance
         */
        function executeDispatch(event, simulated, listener, inst) {
            var type = event.type || 'unknown-event';
            event.currentTarget = getNodeFromInstance(inst);
            ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
            event.currentTarget = null;
        }
        /**
         * Standard/simple iteration through an event's collected dispatches.
         */
        function executeDispatchesInOrder(event, simulated) {
            var dispatchListeners = event._dispatchListeners;
            var dispatchInstances = event._dispatchInstances;
            {
                validateEventDispatches(event);
            }
            if (Array.isArray(dispatchListeners)) {
                for (var i = 0; i < dispatchListeners.length; i++) {
                    if (event.isPropagationStopped()) {
                        break;
                    }
                    // Listeners and Instances are two parallel arrays that are always in sync.
                    executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
                }
            }
            else if (dispatchListeners) {
                executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
            }
            event._dispatchListeners = null;
            event._dispatchInstances = null;
        }
        /**
         * @see executeDispatchesInOrderStopAtTrueImpl
         */
        /**
         * Execution of a "direct" dispatch - there must be at most one dispatch
         * accumulated on the event or it is considered an error. It doesn't really make
         * sense for an event with multiple dispatches (bubbled) to keep track of the
         * return values at each dispatch execution, but it does tend to make sense when
         * dealing with "direct" dispatches.
         *
         * @return {*} The return value of executing the single dispatch.
         */
        /**
         * @param {SyntheticEvent} event
         * @return {boolean} True iff number of dispatches accumulated is greater than 0.
         */
        /**
         * Accumulates items that must not be null or undefined into the first one. This
         * is used to conserve memory by avoiding array allocations, and thus sacrifices
         * API cleanness. Since `current` can be null before being passed in and not
         * null after this function, make sure to assign it back to `current`:
         *
         * `a = accumulateInto(a, b);`
         *
         * This API should be sparingly used. Try `accumulate` for something cleaner.
         *
         * @return {*|array<*>} An accumulation of items.
         */
        function accumulateInto(current, next) {
            !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;
            if (current == null) {
                return next;
            }
            // Both are not empty. Warning: Never call x.concat(y) when you are not
            // certain that x is an Array (x could be a string with concat method).
            if (Array.isArray(current)) {
                if (Array.isArray(next)) {
                    current.push.apply(current, next);
                    return current;
                }
                current.push(next);
                return current;
            }
            if (Array.isArray(next)) {
                // A bit too dangerous to mutate `next`.
                return [current].concat(next);
            }
            return [current, next];
        }
        /**
         * @param {array} arr an "accumulation" of items which is either an Array or
         * a single item. Useful when paired with the `accumulate` module. This is a
         * simple utility that allows us to reason about a collection of items, but
         * handling the case when there is exactly one item (and we do not need to
         * allocate an array).
         * @param {function} cb Callback invoked with each element or a collection.
         * @param {?} [scope] Scope used as `this` in a callback.
         */
        function forEachAccumulated(arr, cb, scope) {
            if (Array.isArray(arr)) {
                arr.forEach(cb, scope);
            }
            else if (arr) {
                cb.call(scope, arr);
            }
        }
        /**
         * Internal queue of events that have accumulated their dispatches and are
         * waiting to have their dispatches executed.
         */
        var eventQueue = null;
        /**
         * Dispatches an event and releases it back into the pool, unless persistent.
         *
         * @param {?object} event Synthetic event to be dispatched.
         * @param {boolean} simulated If the event is simulated (changes exn behavior)
         * @private
         */
        var executeDispatchesAndRelease = function (event, simulated) {
            if (event) {
                executeDispatchesInOrder(event, simulated);
                if (!event.isPersistent()) {
                    event.constructor.release(event);
                }
            }
        };
        var executeDispatchesAndReleaseSimulated = function (e) {
            return executeDispatchesAndRelease(e, true);
        };
        var executeDispatchesAndReleaseTopLevel = function (e) {
            return executeDispatchesAndRelease(e, false);
        };
        function isInteractive(tag) {
            return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
        }
        function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
                case 'onClick':
                case 'onClickCapture':
                case 'onDoubleClick':
                case 'onDoubleClickCapture':
                case 'onMouseDown':
                case 'onMouseDownCapture':
                case 'onMouseMove':
                case 'onMouseMoveCapture':
                case 'onMouseUp':
                case 'onMouseUpCapture':
                    return !!(props.disabled && isInteractive(type));
                default:
                    return false;
            }
        }
        /**
         * This is a unified interface for event plugins to be installed and configured.
         *
         * Event plugins can implement the following properties:
         *
         *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
         *     Required. When a top-level event is fired, this method is expected to
         *     extract synthetic events that will in turn be queued and dispatched.
         *
         *   `eventTypes` {object}
         *     Optional, plugins that fire events must publish a mapping of registration
         *     names that are used to register listeners. Values of this mapping must
         *     be objects that contain `registrationName` or `phasedRegistrationNames`.
         *
         *   `executeDispatch` {function(object, function, string)}
         *     Optional, allows plugins to override how an event gets dispatched. By
         *     default, the listener is simply invoked.
         *
         * Each plugin that is injected into `EventsPluginHub` is immediately operable.
         *
         * @public
         */
        /**
         * Methods for injecting dependencies.
         */
        var injection$1 = {
            /**
             * @param {array} InjectedEventPluginOrder
             * @public
             */
            injectEventPluginOrder: injectEventPluginOrder,
            /**
             * @param {object} injectedNamesToPlugins Map from names to plugin modules.
             */
            injectEventPluginsByName: injectEventPluginsByName
        };
        /**
         * @param {object} inst The instance, which is the source of events.
         * @param {string} registrationName Name of listener (e.g. `onClick`).
         * @return {?function} The stored callback.
         */
        function getListener(inst, registrationName) {
            var listener;
            // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
            // live here; needs to be moved to a better place soon
            var stateNode = inst.stateNode;
            if (!stateNode) {
                // Work in progress (ex: onload events in incremental mode).
                return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (!props) {
                // Work in progress.
                return null;
            }
            listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
                return null;
            }
            !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
            return listener;
        }
        /**
         * Allows registered plugins an opportunity to extract events from top-level
         * native browser events.
         *
         * @return {*} An accumulation of synthetic events.
         * @internal
         */
        function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var events;
            for (var i = 0; i < plugins.length; i++) {
                // Not every plugin in the ordering may be loaded at runtime.
                var possiblePlugin = plugins[i];
                if (possiblePlugin) {
                    var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                    if (extractedEvents) {
                        events = accumulateInto(events, extractedEvents);
                    }
                }
            }
            return events;
        }
        /**
         * Enqueues a synthetic event that should be dispatched when
         * `processEventQueue` is invoked.
         *
         * @param {*} events An accumulation of synthetic events.
         * @internal
         */
        function enqueueEvents(events) {
            if (events) {
                eventQueue = accumulateInto(eventQueue, events);
            }
        }
        /**
         * Dispatches all synthetic events on the event queue.
         *
         * @internal
         */
        function processEventQueue(simulated) {
            // Set `eventQueue` to null before processing it so that we can tell if more
            // events get enqueued while processing.
            var processingEventQueue = eventQueue;
            eventQueue = null;
            if (!processingEventQueue) {
                return;
            }
            if (simulated) {
                forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
            }
            else {
                forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
            }
            !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
            // This would be a good time to rethrow if any of the event handlers threw.
            ReactErrorUtils.rethrowCaughtError();
        }
        var EventPluginHub = Object.freeze({
            injection: injection$1,
            getListener: getListener,
            extractEvents: extractEvents,
            enqueueEvents: enqueueEvents,
            processEventQueue: processEventQueue
        });
        var IndeterminateComponent = 0; // Before we know whether it is functional or class
        var FunctionalComponent = 1;
        var ClassComponent = 2;
        var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
        var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
        var HostComponent = 5;
        var HostText = 6;
        var CallComponent = 7;
        var CallHandlerPhase = 8;
        var ReturnComponent = 9;
        var Fragment = 10;
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = '__reactInternalInstance$' + randomKey;
        var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
        function precacheFiberNode$1(hostInst, node) {
            node[internalInstanceKey] = hostInst;
        }
        /**
         * Given a DOM node, return the closest ReactDOMComponent or
         * ReactDOMTextComponent instance ancestor.
         */
        function getClosestInstanceFromNode(node) {
            if (node[internalInstanceKey]) {
                return node[internalInstanceKey];
            }
            // Walk up the tree until we find an ancestor whose instance we have cached.
            var parents = [];
            while (!node[internalInstanceKey]) {
                parents.push(node);
                if (node.parentNode) {
                    node = node.parentNode;
                }
                else {
                    // Top of the tree. This node must not be part of a React tree (or is
                    // unmounted, potentially).
                    return null;
                }
            }
            var closest = void 0;
            var inst = node[internalInstanceKey];
            if (inst.tag === HostComponent || inst.tag === HostText) {
                // In Fiber, this will always be the deepest root.
                return inst;
            }
            for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
                closest = inst;
            }
            return closest;
        }
        /**
         * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
         * instance, or null if the node was not rendered by this React.
         */
        function getInstanceFromNode$1(node) {
            var inst = node[internalInstanceKey];
            if (inst) {
                if (inst.tag === HostComponent || inst.tag === HostText) {
                    return inst;
                }
                else {
                    return null;
                }
            }
            return null;
        }
        /**
         * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
         * DOM node.
         */
        function getNodeFromInstance$1(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
                // In Fiber this, is just the state node right now. We assume it will be
                // a host component or host text.
                return inst.stateNode;
            }
            // Without this first invariant, passing a non-DOM-component triggers the next
            // invariant for a missing parent, which is super confusing.
            invariant(false, 'getNodeFromInstance: Invalid argument.');
        }
        function getFiberCurrentPropsFromNode$1(node) {
            return node[internalEventHandlersKey] || null;
        }
        function updateFiberProps$1(node, props) {
            node[internalEventHandlersKey] = props;
        }
        var ReactDOMComponentTree = Object.freeze({
            precacheFiberNode: precacheFiberNode$1,
            getClosestInstanceFromNode: getClosestInstanceFromNode,
            getInstanceFromNode: getInstanceFromNode$1,
            getNodeFromInstance: getNodeFromInstance$1,
            getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
            updateFiberProps: updateFiberProps$1
        });
        function getParent(inst) {
            do {
                inst = inst['return'];
                // TODO: If this is a HostRoot we might want to bail out.
                // That is depending on if we want nested subtrees (layers) to bubble
                // events to their parent. We could also go through parentNode on the
                // host node but that wouldn't work for React Native and doesn't let us
                // do the portal feature.
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
                return inst;
            }
            return null;
        }
        /**
         * Return the lowest common ancestor of A and B, or null if they are in
         * different trees.
         */
        function getLowestCommonAncestor(instA, instB) {
            var depthA = 0;
            for (var tempA = instA; tempA; tempA = getParent(tempA)) {
                depthA++;
            }
            var depthB = 0;
            for (var tempB = instB; tempB; tempB = getParent(tempB)) {
                depthB++;
            }
            // If A is deeper, crawl up.
            while (depthA - depthB > 0) {
                instA = getParent(instA);
                depthA--;
            }
            // If B is deeper, crawl up.
            while (depthB - depthA > 0) {
                instB = getParent(instB);
                depthB--;
            }
            // Walk in lockstep until we find a match.
            var depth = depthA;
            while (depth--) {
                if (instA === instB || instA === instB.alternate) {
                    return instA;
                }
                instA = getParent(instA);
                instB = getParent(instB);
            }
            return null;
        }
        /**
         * Return if A is an ancestor of B.
         */
        /**
         * Return the parent instance of the passed-in instance.
         */
        function getParentInstance(inst) {
            return getParent(inst);
        }
        /**
         * Simulates the traversal of a two-phase, capture/bubble event dispatch.
         */
        function traverseTwoPhase(inst, fn, arg) {
            var path = [];
            while (inst) {
                path.push(inst);
                inst = getParent(inst);
            }
            var i;
            for (i = path.length; i-- > 0;) {
                fn(path[i], 'captured', arg);
            }
            for (i = 0; i < path.length; i++) {
                fn(path[i], 'bubbled', arg);
            }
        }
        /**
         * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
         * should would receive a `mouseEnter` or `mouseLeave` event.
         *
         * Does not invoke the callback on the nearest common ancestor because nothing
         * "entered" or "left" that element.
         */
        function traverseEnterLeave(from, to, fn, argFrom, argTo) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            var pathFrom = [];
            while (true) {
                if (!from) {
                    break;
                }
                if (from === common) {
                    break;
                }
                var alternate = from.alternate;
                if (alternate !== null && alternate === common) {
                    break;
                }
                pathFrom.push(from);
                from = getParent(from);
            }
            var pathTo = [];
            while (true) {
                if (!to) {
                    break;
                }
                if (to === common) {
                    break;
                }
                var _alternate = to.alternate;
                if (_alternate !== null && _alternate === common) {
                    break;
                }
                pathTo.push(to);
                to = getParent(to);
            }
            for (var i = 0; i < pathFrom.length; i++) {
                fn(pathFrom[i], 'bubbled', argFrom);
            }
            for (var _i = pathTo.length; _i-- > 0;) {
                fn(pathTo[_i], 'captured', argTo);
            }
        }
        /**
         * Some event types have a notion of different registration names for different
         * "phases" of propagation. This finds listeners by a given phase.
         */
        function listenerAtPhase(inst, event, propagationPhase) {
            var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
            return getListener(inst, registrationName);
        }
        /**
         * A small set of propagation patterns, each of which will accept a small amount
         * of information, and generate a set of "dispatch ready event objects" - which
         * are sets of events that have already been annotated with a set of dispatched
         * listener functions/ids. The API is designed this way to discourage these
         * propagation strategies from actually executing the dispatches, since we
         * always want to collect the entire set of dispatches before executing even a
         * single one.
         */
        /**
         * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
         * here, allows us to not have to bind or create functions for each event.
         * Mutating the event's members allows us to not have to create a wrapping
         * "dispatch" object that pairs the event with the listener.
         */
        function accumulateDirectionalDispatches(inst, phase, event) {
            {
                warning(inst, 'Dispatching inst must not be null');
            }
            var listener = listenerAtPhase(inst, event, phase);
            if (listener) {
                event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
                event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
            }
        }
        /**
         * Collect dispatches (must be entirely collected before dispatching - see unit
         * tests). Lazily allocate the array to conserve memory.  We must loop through
         * each event and perform the traversal for each one. We cannot perform a
         * single traversal for the entire collection of events because each event may
         * have a different target.
         */
        function accumulateTwoPhaseDispatchesSingle(event) {
            if (event && event.dispatchConfig.phasedRegistrationNames) {
                traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
            }
        }
        /**
         * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
         */
        function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
            if (event && event.dispatchConfig.phasedRegistrationNames) {
                var targetInst = event._targetInst;
                var parentInst = targetInst ? getParentInstance(targetInst) : null;
                traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
            }
        }
        /**
         * Accumulates without regard to direction, does not look for phased
         * registration names. Same as `accumulateDirectDispatchesSingle` but without
         * requiring that the `dispatchMarker` be the same as the dispatched ID.
         */
        function accumulateDispatches(inst, ignoredDirection, event) {
            if (inst && event && event.dispatchConfig.registrationName) {
                var registrationName = event.dispatchConfig.registrationName;
                var listener = getListener(inst, registrationName);
                if (listener) {
                    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
                    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
                }
            }
        }
        /**
         * Accumulates dispatches on an `SyntheticEvent`, but only for the
         * `dispatchMarker`.
         * @param {SyntheticEvent} event
         */
        function accumulateDirectDispatchesSingle(event) {
            if (event && event.dispatchConfig.registrationName) {
                accumulateDispatches(event._targetInst, null, event);
            }
        }
        function accumulateTwoPhaseDispatches(events) {
            forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
        }
        function accumulateTwoPhaseDispatchesSkipTarget(events) {
            forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
        }
        function accumulateEnterLeaveDispatches(leave, enter, from, to) {
            traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
        }
        function accumulateDirectDispatches(events) {
            forEachAccumulated(events, accumulateDirectDispatchesSingle);
        }
        var EventPropagators = Object.freeze({
            accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
            accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
            accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches,
            accumulateDirectDispatches: accumulateDirectDispatches
        });
        var contentKey = null;
        /**
         * Gets the key used to access text content on a DOM node.
         *
         * @return {?string} Key used to access text content.
         * @internal
         */
        function getTextContentAccessor() {
            if (!contentKey && ExecutionEnvironment.canUseDOM) {
                // Prefer textContent to innerText because many browsers support both but
                // SVG <text> elements don't support innerText even when <div> does.
                contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
            }
            return contentKey;
        }
        /**
         * This helper object stores information about text content of a target node,
         * allowing comparison of content before and after a given event.
         *
         * Identify the node where selection currently begins, then observe
         * both its text content and its current position in the DOM. Since the
         * browser may natively replace the target node during composition, we can
         * use its position to find its replacement.
         *
         *
         */
        var compositionState = {
            _root: null,
            _startText: null,
            _fallbackText: null
        };
        function initialize(nativeEventTarget) {
            compositionState._root = nativeEventTarget;
            compositionState._startText = getText();
            return true;
        }
        function reset() {
            compositionState._root = null;
            compositionState._startText = null;
            compositionState._fallbackText = null;
        }
        function getData() {
            if (compositionState._fallbackText) {
                return compositionState._fallbackText;
            }
            var start;
            var startValue = compositionState._startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
                if (startValue[start] !== endValue[start]) {
                    break;
                }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
                if (startValue[startLength - end] !== endValue[endLength - end]) {
                    break;
                }
            }
            var sliceTail = end > 1 ? 1 - end : undefined;
            compositionState._fallbackText = endValue.slice(start, sliceTail);
            return compositionState._fallbackText;
        }
        function getText() {
            if ('value' in compositionState._root) {
                return compositionState._root.value;
            }
            return compositionState._root[getTextContentAccessor()];
        }
        /* eslint valid-typeof: 0 */
        var didWarnForAddedNewProperty = false;
        var isProxySupported = typeof Proxy === 'function';
        var EVENT_POOL_SIZE = 10;
        var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
        /**
         * @interface Event
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */
        var EventInterface = {
            type: null,
            target: null,
            // currentTarget is set when dispatching; no use in copying it here
            currentTarget: emptyFunction.thatReturnsNull,
            eventPhase: null,
            bubbles: null,
            cancelable: null,
            timeStamp: function (event) {
                return event.timeStamp || Date.now();
            },
            defaultPrevented: null,
            isTrusted: null
        };
        /**
         * Synthetic events are dispatched by event plugins, typically in response to a
         * top-level event delegation handler.
         *
         * These systems should generally use pooling to reduce the frequency of garbage
         * collection. The system should check `isPersistent` to determine whether the
         * event should be released into the pool after being dispatched. Users that
         * need a persisted event should invoke `persist`.
         *
         * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
         * normalizing browser quirks. Subclasses do not necessarily have to implement a
         * DOM interface; custom application-specific events can also subclass this.
         *
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {*} targetInst Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @param {DOMEventTarget} nativeEventTarget Target node.
         */
        function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
            {
                // these have a getter/setter for warnings
                delete this.nativeEvent;
                delete this.preventDefault;
                delete this.stopPropagation;
            }
            this.dispatchConfig = dispatchConfig;
            this._targetInst = targetInst;
            this.nativeEvent = nativeEvent;
            var Interface = this.constructor.Interface;
            for (var propName in Interface) {
                if (!Interface.hasOwnProperty(propName)) {
                    continue;
                }
                {
                    delete this[propName]; // this has a getter/setter for warnings
                }
                var normalize = Interface[propName];
                if (normalize) {
                    this[propName] = normalize(nativeEvent);
                }
                else {
                    if (propName === 'target') {
                        this.target = nativeEventTarget;
                    }
                    else {
                        this[propName] = nativeEvent[propName];
                    }
                }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
                this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
            }
            else {
                this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
            }
            this.isPropagationStopped = emptyFunction.thatReturnsFalse;
            return this;
        }
        _assign(SyntheticEvent.prototype, {
            preventDefault: function () {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                    return;
                }
                if (event.preventDefault) {
                    event.preventDefault();
                }
                else if (typeof event.returnValue !== 'unknown') {
                    event.returnValue = false;
                }
                this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
            },
            stopPropagation: function () {
                var event = this.nativeEvent;
                if (!event) {
                    return;
                }
                if (event.stopPropagation) {
                    event.stopPropagation();
                }
                else if (typeof event.cancelBubble !== 'unknown') {
                    // The ChangeEventPlugin registers a "propertychange" event for
                    // IE. This event does not support bubbling or cancelling, and
                    // any references to cancelBubble throw "Member not found".  A
                    // typeof check of "unknown" circumvents this issue (and is also
                    // IE specific).
                    event.cancelBubble = true;
                }
                this.isPropagationStopped = emptyFunction.thatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function () {
                this.isPersistent = emptyFunction.thatReturnsTrue;
            },
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: emptyFunction.thatReturnsFalse,
            /**
             * `PooledClass` looks for `destructor` on each instance it releases.
             */
            destructor: function () {
                var Interface = this.constructor.Interface;
                for (var propName in Interface) {
                    {
                        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
                    }
                }
                for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
                    this[shouldBeReleasedProperties[i]] = null;
                }
                {
                    Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
                    Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
                    Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
                }
            }
        });
        SyntheticEvent.Interface = EventInterface;
        /**
         * Helper to reduce boilerplate when creating subclasses.
         *
         * @param {function} Class
         * @param {?object} Interface
         */
        SyntheticEvent.augmentClass = function (Class, Interface) {
            var Super = this;
            var E = function () { };
            E.prototype = Super.prototype;
            var prototype = new E();
            _assign(prototype, Class.prototype);
            Class.prototype = prototype;
            Class.prototype.constructor = Class;
            Class.Interface = _assign({}, Super.Interface, Interface);
            Class.augmentClass = Super.augmentClass;
            addEventPoolingTo(Class);
        };
        /** Proxying after everything set on SyntheticEvent
         * to resolve Proxy issue on some WebKit browsers
         * in which some Event properties are set to undefined (GH#10010)
         */
        {
            if (isProxySupported) {
                /*eslint-disable no-func-assign */
                SyntheticEvent = new Proxy(SyntheticEvent, {
                    construct: function (target, args) {
                        return this.apply(target, Object.create(target.prototype), args);
                    },
                    apply: function (constructor, that, args) {
                        return new Proxy(constructor.apply(that, args), {
                            set: function (target, prop, value) {
                                if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                                    warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');
                                    didWarnForAddedNewProperty = true;
                                }
                                target[prop] = value;
                                return true;
                            }
                        });
                    }
                });
                /*eslint-enable no-func-assign */
            }
        }
        addEventPoolingTo(SyntheticEvent);
        /**
         * Helper to nullify syntheticEvent instance properties when destructing
         *
         * @param {String} propName
         * @param {?object} getVal
         * @return {object} defineProperty object
         */
        function getPooledWarningPropertyDefinition(propName, getVal) {
            var isFunction = typeof getVal === 'function';
            return {
                configurable: true,
                set: set,
                get: get
            };
            function set(val) {
                var action = isFunction ? 'setting the method' : 'setting the property';
                warn(action, 'This is effectively a no-op');
                return val;
            }
            function get() {
                var action = isFunction ? 'accessing the method' : 'accessing the property';
                var result = isFunction ? 'This is a no-op function' : 'This is set to null';
                warn(action, result);
                return getVal;
            }
            function warn(action, result) {
                var warningCondition = false;
                warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
            }
        }
        function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
            var EventConstructor = this;
            if (EventConstructor.eventPool.length) {
                var instance = EventConstructor.eventPool.pop();
                EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
                return instance;
            }
            return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
        }
        function releasePooledEvent(event) {
            var EventConstructor = this;
            !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance  into a pool of a different type.') : void 0;
            event.destructor();
            if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
                EventConstructor.eventPool.push(event);
            }
        }
        function addEventPoolingTo(EventConstructor) {
            EventConstructor.eventPool = [];
            EventConstructor.getPooled = getPooledEvent;
            EventConstructor.release = releasePooledEvent;
        }
        var SyntheticEvent$1 = SyntheticEvent;
        /**
         * @interface Event
         * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
         */
        var CompositionEventInterface = {
            data: null
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticEvent}
         */
        function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent$1.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
        /**
         * @interface Event
         * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
         *      /#events-inputevents
         */
        var InputEventInterface = {
            data: null
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticEvent}
         */
        function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent$1.augmentClass(SyntheticInputEvent, InputEventInterface);
        var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
        var START_KEYCODE = 229;
        var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
        var documentMode = null;
        if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
            documentMode = document.documentMode;
        }
        // Webkit offers a very useful `textInput` event that can be used to
        // directly represent `beforeInput`. The IE `textinput` event is not as
        // useful, so we don't use it.
        var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
        // In IE9+, we have access to composition events, but the data supplied
        // by the native compositionend event may be incorrect. Japanese ideographic
        // spaces, for instance (\u3000) are not recorded correctly.
        var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        /**
         * Opera <= 12 includes TextEvent in window, but does not fire
         * text input events. Rely on keypress instead.
         */
        function isPresto() {
            var opera = window.opera;
            return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
        }
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        // Events and their corresponding property names.
        var eventTypes = {
            beforeInput: {
                phasedRegistrationNames: {
                    bubbled: 'onBeforeInput',
                    captured: 'onBeforeInputCapture'
                },
                dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
            },
            compositionEnd: {
                phasedRegistrationNames: {
                    bubbled: 'onCompositionEnd',
                    captured: 'onCompositionEndCapture'
                },
                dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
            },
            compositionStart: {
                phasedRegistrationNames: {
                    bubbled: 'onCompositionStart',
                    captured: 'onCompositionStartCapture'
                },
                dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
            },
            compositionUpdate: {
                phasedRegistrationNames: {
                    bubbled: 'onCompositionUpdate',
                    captured: 'onCompositionUpdateCapture'
                },
                dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
            }
        };
        // Track whether we've ever handled a keypress on the space key.
        var hasSpaceKeypress = false;
        /**
         * Return whether a native keypress event is assumed to be a command.
         * This is required because Firefox fires `keypress` events for key commands
         * (cut, copy, select-all, etc.) even though no character is inserted.
         */
        function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
                // ctrlKey && altKey is equivalent to AltGr, and is not a command.
                !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        /**
         * Translate native top level events into event types.
         *
         * @param {string} topLevelType
         * @return {object}
         */
        function getCompositionEventType(topLevelType) {
            switch (topLevelType) {
                case 'topCompositionStart':
                    return eventTypes.compositionStart;
                case 'topCompositionEnd':
                    return eventTypes.compositionEnd;
                case 'topCompositionUpdate':
                    return eventTypes.compositionUpdate;
            }
        }
        /**
         * Does our fallback best-guess model think this event signifies that
         * composition has begun?
         *
         * @param {string} topLevelType
         * @param {object} nativeEvent
         * @return {boolean}
         */
        function isFallbackCompositionStart(topLevelType, nativeEvent) {
            return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
        }
        /**
         * Does our fallback mode think that this event is the end of composition?
         *
         * @param {string} topLevelType
         * @param {object} nativeEvent
         * @return {boolean}
         */
        function isFallbackCompositionEnd(topLevelType, nativeEvent) {
            switch (topLevelType) {
                case 'topKeyUp':
                    // Command keys insert or clear IME input.
                    return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
                case 'topKeyDown':
                    // Expect IME keyCode on each keydown. If we get any other
                    // code we must have exited earlier.
                    return nativeEvent.keyCode !== START_KEYCODE;
                case 'topKeyPress':
                case 'topMouseDown':
                case 'topBlur':
                    // Events are not possible without cancelling IME.
                    return true;
                default:
                    return false;
            }
        }
        /**
         * Google Input Tools provides composition data via a CustomEvent,
         * with the `data` property populated in the `detail` object. If this
         * is available on the event object, use it. If not, this is a plain
         * composition event and we have nothing special to extract.
         *
         * @param {object} nativeEvent
         * @return {?string}
         */
        function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === 'object' && 'data' in detail) {
                return detail.data;
            }
            return null;
        }
        // Track the current IME composition status, if any.
        var isComposing = false;
        /**
         * @return {?object} A SyntheticCompositionEvent.
         */
        function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
                eventType = getCompositionEventType(topLevelType);
            }
            else if (!isComposing) {
                if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
                    eventType = eventTypes.compositionStart;
                }
            }
            else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                eventType = eventTypes.compositionEnd;
            }
            if (!eventType) {
                return null;
            }
            if (useFallbackCompositionData) {
                // The current composition is stored statically and must not be
                // overwritten while composition continues.
                if (!isComposing && eventType === eventTypes.compositionStart) {
                    isComposing = initialize(nativeEventTarget);
                }
                else if (eventType === eventTypes.compositionEnd) {
                    if (isComposing) {
                        fallbackData = getData();
                    }
                }
            }
            var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
            if (fallbackData) {
                // Inject data generated from fallback path into the synthetic event.
                // This matches the property of native CompositionEventInterface.
                event.data = fallbackData;
            }
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                    event.data = customData;
                }
            }
            accumulateTwoPhaseDispatches(event);
            return event;
        }
        /**
         * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.
         * @param {object} nativeEvent Native browser event.
         * @return {?string} The string corresponding to this `beforeInput` event.
         */
        function getNativeBeforeInputChars(topLevelType, nativeEvent) {
            switch (topLevelType) {
                case 'topCompositionEnd':
                    return getDataFromCustomEvent(nativeEvent);
                case 'topKeyPress':
                    /**
                     * If native `textInput` events are available, our goal is to make
                     * use of them. However, there is a special case: the spacebar key.
                     * In Webkit, preventing default on a spacebar `textInput` event
                     * cancels character insertion, but it *also* causes the browser
                     * to fall back to its default spacebar behavior of scrolling the
                     * page.
                     *
                     * Tracking at:
                     * https://code.google.com/p/chromium/issues/detail?id=355103
                     *
                     * To avoid this issue, use the keypress event as if no `textInput`
                     * event is available.
                     */
                    var which = nativeEvent.which;
                    if (which !== SPACEBAR_CODE) {
                        return null;
                    }
                    hasSpaceKeypress = true;
                    return SPACEBAR_CHAR;
                case 'topTextInput':
                    // Record the characters to be added to the DOM.
                    var chars = nativeEvent.data;
                    // If it's a spacebar character, assume that we have already handled
                    // it at the keypress level and bail immediately. Android Chrome
                    // doesn't give us keycodes, so we need to blacklist it.
                    if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                        return null;
                    }
                    return chars;
                default:
                    // For other native event types, do nothing.
                    return null;
            }
        }
        /**
         * For browsers that do not provide the `textInput` event, extract the
         * appropriate string to use for SyntheticInputEvent.
         *
         * @param {string} topLevelType Record from `BrowserEventConstants`.
         * @param {object} nativeEvent Native browser event.
         * @return {?string} The fallback string for this `beforeInput` event.
         */
        function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
            // If we are currently composing (IME) and using a fallback to do so,
            // try to extract the composed characters from the fallback object.
            // If composition event is available, we extract a string only at
            // compositionevent, otherwise extract it at fallback events.
            if (isComposing) {
                if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                    var chars = getData();
                    reset();
                    isComposing = false;
                    return chars;
                }
                return null;
            }
            switch (topLevelType) {
                case 'topPaste':
                    // If a paste event occurs after a keypress, throw out the input
                    // chars. Paste events should not lead to BeforeInput events.
                    return null;
                case 'topKeyPress':
                    /**
                     * As of v27, Firefox may fire keypress events even when no character
                     * will be inserted. A few possibilities:
                     *
                     * - `which` is `0`. Arrow keys, Esc key, etc.
                     *
                     * - `which` is the pressed key code, but no char is available.
                     *   Ex: 'AltGr + d` in Polish. There is no modified character for
                     *   this key combination and no character is inserted into the
                     *   document, but FF fires the keypress for char code `100` anyway.
                     *   No `input` event will occur.
                     *
                     * - `which` is the pressed key code, but a command combination is
                     *   being used. Ex: `Cmd+C`. No character is inserted, and no
                     *   `input` event will occur.
                     */
                    if (!isKeypressCommand(nativeEvent)) {
                        // IE fires the `keypress` event when a user types an emoji via
                        // Touch keyboard of Windows.  In such a case, the `char` property
                        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                        // is 2, the property `which` does not represent an emoji correctly.
                        // In such a case, we directly return the `char` property instead of
                        // using `which`.
                        if (nativeEvent.char && nativeEvent.char.length > 1) {
                            return nativeEvent.char;
                        }
                        else if (nativeEvent.which) {
                            return String.fromCharCode(nativeEvent.which);
                        }
                    }
                    return null;
                case 'topCompositionEnd':
                    return useFallbackCompositionData ? null : nativeEvent.data;
                default:
                    return null;
            }
        }
        /**
         * Extract a SyntheticInputEvent for `beforeInput`, based on either native
         * `textInput` or fallback behavior.
         *
         * @return {?object} A SyntheticInputEvent.
         */
        function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
                chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
            }
            else {
                chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
            }
            // If no characters are being inserted, no BeforeInput event should
            // be fired.
            if (!chars) {
                return null;
            }
            var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
            event.data = chars;
            accumulateTwoPhaseDispatches(event);
            return event;
        }
        /**
         * Create an `onBeforeInput` event to match
         * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
         *
         * This event plugin is based on the native `textInput` event
         * available in Chrome, Safari, Opera, and IE. This event fires after
         * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
         *
         * `beforeInput` is spec'd but not implemented in any browsers, and
         * the `input` event does not provide any useful information about what has
         * actually been added, contrary to the spec. Thus, `textInput` is the best
         * available event to identify the characters that have actually been inserted
         * into the target node.
         *
         * This plugin is also responsible for emitting `composition` events, thus
         * allowing us to share composition fallback code for both `beforeInput` and
         * `composition` event types.
         */
        var BeforeInputEventPlugin = {
            eventTypes: eventTypes,
            extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
            }
        };
        // Use to restore controlled state after a change event has fired.
        var fiberHostComponent = null;
        var ReactControlledComponentInjection = {
            injectFiberControlledHostComponent: function (hostComponentImpl) {
                // The fiber implementation doesn't use dynamic dispatch so we need to
                // inject the implementation.
                fiberHostComponent = hostComponentImpl;
            }
        };
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
            // We perform this translation at the end of the event loop so that we
            // always receive the correct fiber here
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
                // Unmounted
                return;
            }
            !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function') ? invariant(false, 'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
            fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
        }
        var injection$3 = ReactControlledComponentInjection;
        function enqueueStateRestore(target) {
            if (restoreTarget) {
                if (restoreQueue) {
                    restoreQueue.push(target);
                }
                else {
                    restoreQueue = [target];
                }
            }
            else {
                restoreTarget = target;
            }
        }
        function restoreStateIfNeeded() {
            if (!restoreTarget) {
                return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
                for (var i = 0; i < queuedTargets.length; i++) {
                    restoreStateOfTarget(queuedTargets[i]);
                }
            }
        }
        var ReactControlledComponent = Object.freeze({
            injection: injection$3,
            enqueueStateRestore: enqueueStateRestore,
            restoreStateIfNeeded: restoreStateIfNeeded
        });
        // Used as a way to call batchedUpdates when we don't have a reference to
        // the renderer. Such as when we're dispatching events or if third party
        // libraries need to call batchedUpdates. Eventually, this API will go away when
        // everything is batched by default. We'll then have a similar API to opt-out of
        // scheduled work and instead do synchronous work.
        // Defaults
        var fiberBatchedUpdates = function (fn, bookkeeping) {
            return fn(bookkeeping);
        };
        var isNestingBatched = false;
        function batchedUpdates(fn, bookkeeping) {
            if (isNestingBatched) {
                // If we are currently inside another batch, we need to wait until it
                // fully completes before restoring state. Therefore, we add the target to
                // a queue of work.
                return fiberBatchedUpdates(fn, bookkeeping);
            }
            isNestingBatched = true;
            try {
                return fiberBatchedUpdates(fn, bookkeeping);
            }
            finally {
                // Here we wait until all updates have propagated, which is important
                // when using controlled components within layers:
                // https://github.com/facebook/react/issues/1698
                // Then we restore state of any controlled component.
                isNestingBatched = false;
                restoreStateIfNeeded();
            }
        }
        var ReactGenericBatchingInjection = {
            injectFiberBatchedUpdates: function (_batchedUpdates) {
                fiberBatchedUpdates = _batchedUpdates;
            }
        };
        var injection$4 = ReactGenericBatchingInjection;
        /**
         * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
         */
        var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            'datetime-local': true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
        };
        function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === 'input') {
                return !!supportedInputTypes[elem.type];
            }
            if (nodeName === 'textarea') {
                return true;
            }
            return false;
        }
        /**
         * HTML nodeType values that represent the type of the node
         */
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        /**
         * Gets the target node from a native browser event by accounting for
         * inconsistencies in browser DOM APIs.
         *
         * @param {object} nativeEvent Native browser event.
         * @return {DOMEventTarget} Target node.
         */
        function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            // Normalize SVG <use> element events #4963
            if (target.correspondingUseElement) {
                target = target.correspondingUseElement;
            }
            // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
            // @see http://www.quirksmode.org/js/events_properties.html
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var useHasFeature;
        if (ExecutionEnvironment.canUseDOM) {
            useHasFeature = document.implementation && document.implementation.hasFeature &&
                // always returns true in newer browsers as per the standard.
                // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
                document.implementation.hasFeature('', '') !== true;
        }
        /**
         * Checks if an event is supported in the current execution environment.
         *
         * NOTE: This will not work correctly for non-generic events such as `change`,
         * `reset`, `load`, `error`, and `select`.
         *
         * Borrows from Modernizr.
         *
         * @param {string} eventNameSuffix Event name, e.g. "click".
         * @param {?boolean} capture Check if the capture phase is supported.
         * @return {boolean} True if the event is supported.
         * @internal
         * @license Modernizr 3.0.0pre (Custom Build) | MIT
         */
        function isEventSupported(eventNameSuffix, capture) {
            if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
                return false;
            }
            var eventName = 'on' + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
                var element = document.createElement('div');
                element.setAttribute(eventName, 'return;');
                isSupported = typeof element[eventName] === 'function';
            }
            if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
                // This is the only way to test support for the `wheel` event in IE9+.
                isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
            }
            return isSupported;
        }
        function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
        }
        function getTracker(node) {
            return node._valueTracker;
        }
        function detachTracker(node) {
            node._valueTracker = null;
        }
        function getValueFromNode(node) {
            var value = '';
            if (!node) {
                return value;
            }
            if (isCheckable(node)) {
                value = node.checked ? 'true' : 'false';
            }
            else {
                value = node.value;
            }
            return value;
        }
        function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? 'checked' : 'value';
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = '' + node[valueField];
            // if someone has already defined a value or Safari, then bail
            // and don't track value will cause over reporting of changes,
            // but it's better then a hard failure
            // (needed for certain tests that spyOn input values and Safari)
            if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
                return;
            }
            Object.defineProperty(node, valueField, {
                enumerable: descriptor.enumerable,
                configurable: true,
                get: function () {
                    return descriptor.get.call(this);
                },
                set: function (value) {
                    currentValue = '' + value;
                    descriptor.set.call(this, value);
                }
            });
            var tracker = {
                getValue: function () {
                    return currentValue;
                },
                setValue: function (value) {
                    currentValue = '' + value;
                },
                stopTracking: function () {
                    detachTracker(node);
                    delete node[valueField];
                }
            };
            return tracker;
        }
        function track(node) {
            if (getTracker(node)) {
                return;
            }
            // TODO: Once it's just Fiber we can move this to node._wrapperState
            node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
            if (!node) {
                return false;
            }
            var tracker = getTracker(node);
            // if there is no tracker at this point it's unlikely
            // that trying again will succeed
            if (!tracker) {
                return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
                tracker.setValue(nextValue);
                return true;
            }
            return false;
        }
        var eventTypes$1 = {
            change: {
                phasedRegistrationNames: {
                    bubbled: 'onChange',
                    captured: 'onChangeCapture'
                },
                dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
            }
        };
        function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
            var event = SyntheticEvent$1.getPooled(eventTypes$1.change, inst, nativeEvent, target);
            event.type = 'change';
            // Flag this event loop as needing state restore.
            enqueueStateRestore(target);
            accumulateTwoPhaseDispatches(event);
            return event;
        }
        /**
         * For IE shims
         */
        var activeElement = null;
        var activeElementInst = null;
        /**
         * SECTION: handle `change` event
         */
        function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
        }
        function manualDispatchChangeEvent(nativeEvent) {
            var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            // If change and propertychange bubbled, we'd just bind to it like all the
            // other events and have it go through ReactBrowserEventEmitter. Since it
            // doesn't, we manually listen for the events and so we have to enqueue and
            // process the abstract event manually.
            //
            // Batching is necessary here in order to ensure that all event handlers run
            // before the next rerender (including event handlers attached to ancestor
            // elements instead of directly on the input). Without this, controlled
            // components don't work properly in conjunction with event bubbling because
            // the component is rerendered and the value reverted before all the event
            // handlers can run. See https://github.com/facebook/react/issues/708.
            batchedUpdates(runEventInBatch, event);
        }
        function runEventInBatch(event) {
            enqueueEvents(event);
            processEventQueue(false);
        }
        function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance$1(targetInst);
            if (updateValueIfChanged(targetNode)) {
                return targetInst;
            }
        }
        function getTargetInstForChangeEvent(topLevelType, targetInst) {
            if (topLevelType === 'topChange') {
                return targetInst;
            }
        }
        /**
         * SECTION: handle `input` event
         */
        var isInputEventSupported = false;
        if (ExecutionEnvironment.canUseDOM) {
            // IE9 claims to support the input event but fails to trigger it when
            // deleting text, so we ignore its input events.
            isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
        }
        /**
         * (For IE <=9) Starts tracking propertychange events on the passed-in element
         * and override the value property so that we can distinguish user events from
         * value changes in JS.
         */
        function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent('onpropertychange', handlePropertyChange);
        }
        /**
         * (For IE <=9) Removes the event listeners from the currently-tracked element,
         * if any exists.
         */
        function stopWatchingForValueChange() {
            if (!activeElement) {
                return;
            }
            activeElement.detachEvent('onpropertychange', handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
        }
        /**
         * (For IE <=9) Handles a propertychange event, sending a `change` event if
         * the value of the active element has changed.
         */
        function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== 'value') {
                return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
                manualDispatchChangeEvent(nativeEvent);
            }
        }
        function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
            if (topLevelType === 'topFocus') {
                // In IE9, propertychange fires for most input events but is buggy and
                // doesn't fire when text is deleted, but conveniently, selectionchange
                // appears to fire in all of the remaining cases so we catch those and
                // forward the event if the value has changed
                // In either case, we don't want to call the event handler if the value
                // is changed from JS so we redefine a setter for `.value` that updates
                // our activeElementValue variable, allowing us to ignore those changes
                //
                // stopWatching() should be a noop here but we call it just in case we
                // missed a blur event somehow.
                stopWatchingForValueChange();
                startWatchingForValueChange(target, targetInst);
            }
            else if (topLevelType === 'topBlur') {
                stopWatchingForValueChange();
            }
        }
        // For IE8 and IE9.
        function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
            if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
                // On the selectionchange event, the target is just document which isn't
                // helpful for us so just check activeElement instead.
                //
                // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
                // propertychange on the first input event after setting `value` from a
                // script and fires only keydown, keypress, keyup. Catching keyup usually
                // gets it and catching keydown lets us fire an event for the first
                // keystroke if user does a key repeat (it'll be a little delayed: right
                // before the second keystroke). Other input methods (e.g., paste) seem to
                // fire selectionchange normally.
                return getInstIfValueChanged(activeElementInst);
            }
        }
        /**
         * SECTION: handle `click` event
         */
        function shouldUseClickEvent(elem) {
            // Use the `click` event to detect changes to checkbox and radio inputs.
            // This approach works across all browsers, whereas `change` does not fire
            // until `blur` in IE8.
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
        }
        function getTargetInstForClickEvent(topLevelType, targetInst) {
            if (topLevelType === 'topClick') {
                return getInstIfValueChanged(targetInst);
            }
        }
        function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
            if (topLevelType === 'topInput' || topLevelType === 'topChange') {
                return getInstIfValueChanged(targetInst);
            }
        }
        function handleControlledInputBlur(inst, node) {
            // TODO: In IE, inst is occasionally null. Why?
            if (inst == null) {
                return;
            }
            // Fiber and ReactDOM keep wrapper state in separate places
            var state = inst._wrapperState || node._wrapperState;
            if (!state || !state.controlled || node.type !== 'number') {
                return;
            }
            // If controlled, assign the value attribute to the current value on blur
            var value = '' + node.value;
            if (node.getAttribute('value') !== value) {
                node.setAttribute('value', value);
            }
        }
        /**
         * This plugin creates an `onChange` event that normalizes change events
         * across form elements. This event fires at a time when it's possible to
         * change the element's value without seeing a flicker.
         *
         * Supported elements are:
         * - input (see `isTextInputElement`)
         * - textarea
         * - select
         */
        var ChangeEventPlugin = {
            eventTypes: eventTypes$1,
            _isInputEventSupported: isInputEventSupported,
            extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
                var getTargetInstFunc, handleEventFunc;
                if (shouldUseChangeEvent(targetNode)) {
                    getTargetInstFunc = getTargetInstForChangeEvent;
                }
                else if (isTextInputElement(targetNode)) {
                    if (isInputEventSupported) {
                        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                    }
                    else {
                        getTargetInstFunc = getTargetInstForInputEventPolyfill;
                        handleEventFunc = handleEventsForInputEventPolyfill;
                    }
                }
                else if (shouldUseClickEvent(targetNode)) {
                    getTargetInstFunc = getTargetInstForClickEvent;
                }
                if (getTargetInstFunc) {
                    var inst = getTargetInstFunc(topLevelType, targetInst);
                    if (inst) {
                        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                        return event;
                    }
                }
                if (handleEventFunc) {
                    handleEventFunc(topLevelType, targetNode, targetInst);
                }
                // When blurring, set the value attribute for number inputs
                if (topLevelType === 'topBlur') {
                    handleControlledInputBlur(targetInst, targetNode);
                }
            }
        };
        /**
         * Module that is injectable into `EventPluginHub`, that specifies a
         * deterministic ordering of `EventPlugin`s. A convenient way to reason about
         * plugins, without having to package every one of them. This is better than
         * having plugins be ordered in the same order that they are injected because
         * that ordering would be influenced by the packaging order.
         * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
         * preventing default on events is convenient in `SimpleEventPlugin` handlers.
         */
        var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
        /**
         * @interface UIEvent
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */
        var UIEventInterface = {
            view: null,
            detail: null
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticEvent}
         */
        function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent$1.augmentClass(SyntheticUIEvent, UIEventInterface);
        /**
         * Translation from modifier key to the associated property in the event.
         * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
         */
        var modifierKeyToProp = {
            Alt: 'altKey',
            Control: 'ctrlKey',
            Meta: 'metaKey',
            Shift: 'shiftKey'
        };
        // IE8 does not implement getModifierState so we simply map it to the only
        // modifier keys exposed by the event itself, does not support Lock-keys.
        // Currently, all major browsers except Chrome seems to support Lock-keys.
        function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
                return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
        }
        /**
         * @interface MouseEvent
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */
        var MouseEventInterface = {
            screenX: null,
            screenY: null,
            clientX: null,
            clientY: null,
            pageX: null,
            pageY: null,
            ctrlKey: null,
            shiftKey: null,
            altKey: null,
            metaKey: null,
            getModifierState: getEventModifierState,
            button: null,
            buttons: null,
            relatedTarget: function (event) {
                return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
            }
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticUIEvent}
         */
        function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
        var eventTypes$2 = {
            mouseEnter: {
                registrationName: 'onMouseEnter',
                dependencies: ['topMouseOut', 'topMouseOver']
            },
            mouseLeave: {
                registrationName: 'onMouseLeave',
                dependencies: ['topMouseOut', 'topMouseOver']
            }
        };
        var EnterLeaveEventPlugin = {
            eventTypes: eventTypes$2,
            /**
             * For almost every interaction we care about, there will be both a top-level
             * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
             * we do not extract duplicate events. However, moving the mouse into the
             * browser from outside will not fire a `mouseout` event. In this case, we use
             * the `mouseover` top-level event.
             */
            extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
                    return null;
                }
                if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
                    // Must not be a mouse in or mouse out - ignoring.
                    return null;
                }
                var win;
                if (nativeEventTarget.window === nativeEventTarget) {
                    // `nativeEventTarget` is probably a window object.
                    win = nativeEventTarget;
                }
                else {
                    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
                    var doc = nativeEventTarget.ownerDocument;
                    if (doc) {
                        win = doc.defaultView || doc.parentWindow;
                    }
                    else {
                        win = window;
                    }
                }
                var from;
                var to;
                if (topLevelType === 'topMouseOut') {
                    from = targetInst;
                    var related = nativeEvent.relatedTarget || nativeEvent.toElement;
                    to = related ? getClosestInstanceFromNode(related) : null;
                }
                else {
                    // Moving to a node from outside the window.
                    from = null;
                    to = targetInst;
                }
                if (from === to) {
                    // Nothing pertains to our managed components.
                    return null;
                }
                var fromNode = from == null ? win : getNodeFromInstance$1(from);
                var toNode = to == null ? win : getNodeFromInstance$1(to);
                var leave = SyntheticMouseEvent.getPooled(eventTypes$2.mouseLeave, from, nativeEvent, nativeEventTarget);
                leave.type = 'mouseleave';
                leave.target = fromNode;
                leave.relatedTarget = toNode;
                var enter = SyntheticMouseEvent.getPooled(eventTypes$2.mouseEnter, to, nativeEvent, nativeEventTarget);
                enter.type = 'mouseenter';
                enter.target = toNode;
                enter.relatedTarget = fromNode;
                accumulateEnterLeaveDispatches(leave, enter, from, to);
                return [leave, enter];
            }
        };
        /**
         * `ReactInstanceMap` maintains a mapping from a public facing stateful
         * instance (key) and the internal representation (value). This allows public
         * methods to accept the user facing instance as an argument and map them back
         * to internal methods.
         *
         * Note that this module is currently shared and assumed to be stateless.
         * If this becomes an actual Map, that will break.
         */
        /**
         * This API should be called `delete` but we'd have to make sure to always
         * transform these to strings for IE support. When this transform is fully
         * supported we can rename it.
         */
        function get(key) {
            return key._reactInternalFiber;
        }
        function has(key) {
            return key._reactInternalFiber !== undefined;
        }
        function set(key, value) {
            key._reactInternalFiber = value;
        }
        var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;
        function getComponentName(fiber) {
            var type = fiber.type;
            if (typeof type === 'string') {
                return type;
            }
            if (typeof type === 'function') {
                return type.displayName || type.name;
            }
            return null;
        }
        // Don't change these two values:
        var NoEffect = 0; //           0b00000000
        var PerformedWork = 1; //      0b00000001
        // You can change the rest (and add more).
        var Placement = 2; //          0b00000010
        var Update = 4; //             0b00000100
        var PlacementAndUpdate = 6; // 0b00000110
        var Deletion = 8; //           0b00001000
        var ContentReset = 16; //      0b00010000
        var Callback = 32; //          0b00100000
        var Err = 64; //               0b01000000
        var Ref = 128; //              0b10000000
        var MOUNTING = 1;
        var MOUNTED = 2;
        var UNMOUNTED = 3;
        function isFiberMountedImpl(fiber) {
            var node = fiber;
            if (!fiber.alternate) {
                // If there is no alternate, this might be a new tree that isn't inserted
                // yet. If it is, then it will have a pending insertion effect on it.
                if ((node.effectTag & Placement) !== NoEffect) {
                    return MOUNTING;
                }
                while (node['return']) {
                    node = node['return'];
                    if ((node.effectTag & Placement) !== NoEffect) {
                        return MOUNTING;
                    }
                }
            }
            else {
                while (node['return']) {
                    node = node['return'];
                }
            }
            if (node.tag === HostRoot) {
                // TODO: Check if this was a nested HostRoot when used with
                // renderContainerIntoSubtree.
                return MOUNTED;
            }
            // If we didn't hit the root, that means that we're in an disconnected tree
            // that has been unmounted.
            return UNMOUNTED;
        }
        function isFiberMounted(fiber) {
            return isFiberMountedImpl(fiber) === MOUNTED;
        }
        function isMounted(component) {
            {
                var owner = ReactCurrentOwner.current;
                if (owner !== null && owner.tag === ClassComponent) {
                    var ownerFiber = owner;
                    var instance = ownerFiber.stateNode;
                    warning(instance._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber) || 'A component');
                    instance._warnedAboutRefsInRender = true;
                }
            }
            var fiber = get(component);
            if (!fiber) {
                return false;
            }
            return isFiberMountedImpl(fiber) === MOUNTED;
        }
        function assertIsMounted(fiber) {
            !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
        }
        function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
                // If there is no alternate, then we only need to check if it is mounted.
                var state = isFiberMountedImpl(fiber);
                !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
                if (state === MOUNTING) {
                    return null;
                }
                return fiber;
            }
            // If we have two possible branches, we'll walk backwards up to the root
            // to see what path the root points to. On the way we may hit one of the
            // special cases and we'll deal with them.
            var a = fiber;
            var b = alternate;
            while (true) {
                var parentA = a['return'];
                var parentB = parentA ? parentA.alternate : null;
                if (!parentA || !parentB) {
                    // We're at the root.
                    break;
                }
                // If both copies of the parent fiber point to the same child, we can
                // assume that the child is current. This happens when we bailout on low
                // priority: the bailed out fiber's child reuses the current child.
                if (parentA.child === parentB.child) {
                    var child = parentA.child;
                    while (child) {
                        if (child === a) {
                            // We've determined that A is the current branch.
                            assertIsMounted(parentA);
                            return fiber;
                        }
                        if (child === b) {
                            // We've determined that B is the current branch.
                            assertIsMounted(parentA);
                            return alternate;
                        }
                        child = child.sibling;
                    }
                    // We should never have an alternate for any mounting node. So the only
                    // way this could possibly happen is if this was unmounted, if at all.
                    invariant(false, 'Unable to find node on an unmounted component.');
                }
                if (a['return'] !== b['return']) {
                    // The return pointer of A and the return pointer of B point to different
                    // fibers. We assume that return pointers never criss-cross, so A must
                    // belong to the child set of A.return, and B must belong to the child
                    // set of B.return.
                    a = parentA;
                    b = parentB;
                }
                else {
                    // The return pointers point to the same fiber. We'll have to use the
                    // default, slow path: scan the child sets of each parent alternate to see
                    // which child belongs to which set.
                    //
                    // Search parent A's child set
                    var didFindChild = false;
                    var _child = parentA.child;
                    while (_child) {
                        if (_child === a) {
                            didFindChild = true;
                            a = parentA;
                            b = parentB;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentA;
                            a = parentB;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) {
                        // Search parent B's child set
                        _child = parentB.child;
                        while (_child) {
                            if (_child === a) {
                                didFindChild = true;
                                a = parentB;
                                b = parentA;
                                break;
                            }
                            if (_child === b) {
                                didFindChild = true;
                                b = parentB;
                                a = parentA;
                                break;
                            }
                            _child = _child.sibling;
                        }
                        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
                    }
                }
                !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            }
            // If the root is not a host container, we're in a disconnected tree. I.e.
            // unmounted.
            !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
            if (a.stateNode.current === a) {
                // We've determined that A is the current branch.
                return fiber;
            }
            // Otherwise B has to be current branch.
            return alternate;
        }
        function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
                return null;
            }
            // Next we'll drill down this component to find the first HostComponent/Text.
            var node = currentParent;
            while (true) {
                if (node.tag === HostComponent || node.tag === HostText) {
                    return node;
                }
                else if (node.child) {
                    node.child['return'] = node;
                    node = node.child;
                    continue;
                }
                if (node === currentParent) {
                    return null;
                }
                while (!node.sibling) {
                    if (!node['return'] || node['return'] === currentParent) {
                        return null;
                    }
                    node = node['return'];
                }
                node.sibling['return'] = node['return'];
                node = node.sibling;
            }
            // Flow needs the return null here, but ESLint complains about it.
            // eslint-disable-next-line no-unreachable
            return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
                return null;
            }
            // Next we'll drill down this component to find the first HostComponent/Text.
            var node = currentParent;
            while (true) {
                if (node.tag === HostComponent || node.tag === HostText) {
                    return node;
                }
                else if (node.child && node.tag !== HostPortal) {
                    node.child['return'] = node;
                    node = node.child;
                    continue;
                }
                if (node === currentParent) {
                    return null;
                }
                while (!node.sibling) {
                    if (!node['return'] || node['return'] === currentParent) {
                        return null;
                    }
                    node = node['return'];
                }
                node.sibling['return'] = node['return'];
                node = node.sibling;
            }
            // Flow needs the return null here, but ESLint complains about it.
            // eslint-disable-next-line no-unreachable
            return null;
        }
        var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
        var callbackBookkeepingPool = [];
        /**
         * Find the deepest React component completely containing the root of the
         * passed-in instance (for use when entire React trees are nested within each
         * other). If React trees are not nested, returns null.
         */
        function findRootContainerNode(inst) {
            // TODO: It may be a good idea to cache this to prevent unnecessary DOM
            // traversal, but caching is difficult to do correctly without using a
            // mutation observer to listen for all DOM changes.
            while (inst['return']) {
                inst = inst['return'];
            }
            if (inst.tag !== HostRoot) {
                // This can happen if we're in a detached tree.
                return null;
            }
            return inst.stateNode.containerInfo;
        }
        // Used to store ancestor hierarchy in top level callback
        function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
            if (callbackBookkeepingPool.length) {
                var instance = callbackBookkeepingPool.pop();
                instance.topLevelType = topLevelType;
                instance.nativeEvent = nativeEvent;
                instance.targetInst = targetInst;
                return instance;
            }
            return {
                topLevelType: topLevelType,
                nativeEvent: nativeEvent,
                targetInst: targetInst,
                ancestors: []
            };
        }
        function releaseTopLevelCallbackBookKeeping(instance) {
            instance.topLevelType = null;
            instance.nativeEvent = null;
            instance.targetInst = null;
            instance.ancestors.length = 0;
            if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
                callbackBookkeepingPool.push(instance);
            }
        }
        function handleTopLevelImpl(bookKeeping) {
            var targetInst = bookKeeping.targetInst;
            // Loop through the hierarchy, in case there's any nested components.
            // It's important that we build the array of ancestors before calling any
            // event handlers, because event handlers can modify the DOM, leading to
            // inconsistencies with ReactMount's node cache. See #1105.
            var ancestor = targetInst;
            do {
                if (!ancestor) {
                    bookKeeping.ancestors.push(ancestor);
                    break;
                }
                var root = findRootContainerNode(ancestor);
                if (!root) {
                    break;
                }
                bookKeeping.ancestors.push(ancestor);
                ancestor = getClosestInstanceFromNode(root);
            } while (ancestor);
            for (var i = 0; i < bookKeeping.ancestors.length; i++) {
                targetInst = bookKeeping.ancestors[i];
                _handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
            }
        }
        // TODO: can we stop exporting these?
        var _enabled = true;
        var _handleTopLevel = void 0;
        function setHandleTopLevel(handleTopLevel) {
            _handleTopLevel = handleTopLevel;
        }
        function setEnabled(enabled) {
            _enabled = !!enabled;
        }
        function isEnabled() {
            return _enabled;
        }
        /**
         * Traps top-level events by using event bubbling.
         *
         * @param {string} topLevelType Record from `BrowserEventConstants`.
         * @param {string} handlerBaseName Event name (e.g. "click").
         * @param {object} element Element on which to attach listener.
         * @return {?object} An object with a remove function which will forcefully
         *                  remove the listener.
         * @internal
         */
        function trapBubbledEvent(topLevelType, handlerBaseName, element) {
            if (!element) {
                return null;
            }
            return EventListener.listen(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));
        }
        /**
         * Traps a top-level event by using event capturing.
         *
         * @param {string} topLevelType Record from `BrowserEventConstants`.
         * @param {string} handlerBaseName Event name (e.g. "click").
         * @param {object} element Element on which to attach listener.
         * @return {?object} An object with a remove function which will forcefully
         *                  remove the listener.
         * @internal
         */
        function trapCapturedEvent(topLevelType, handlerBaseName, element) {
            if (!element) {
                return null;
            }
            return EventListener.capture(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));
        }
        function dispatchEvent(topLevelType, nativeEvent) {
            if (!_enabled) {
                return;
            }
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
                // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
            var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);
            try {
                // Event queue being processed in the same cycle allows
                // `preventDefault`.
                batchedUpdates(handleTopLevelImpl, bookKeeping);
            }
            finally {
                releaseTopLevelCallbackBookKeeping(bookKeeping);
            }
        }
        var ReactDOMEventListener = Object.freeze({
            get _enabled() { return _enabled; },
            get _handleTopLevel() { return _handleTopLevel; },
            setHandleTopLevel: setHandleTopLevel,
            setEnabled: setEnabled,
            isEnabled: isEnabled,
            trapBubbledEvent: trapBubbledEvent,
            trapCapturedEvent: trapCapturedEvent,
            dispatchEvent: dispatchEvent
        });
        /**
         * Generate a mapping of standard vendor prefixes using the defined style property and event name.
         *
         * @param {string} styleProp
         * @param {string} eventName
         * @returns {object}
         */
        function makePrefixMap(styleProp, eventName) {
            var prefixes = {};
            prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes['Webkit' + styleProp] = 'webkit' + eventName;
            prefixes['Moz' + styleProp] = 'moz' + eventName;
            prefixes['ms' + styleProp] = 'MS' + eventName;
            prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
            return prefixes;
        }
        /**
         * A list of event names to a configurable list of vendor prefixes.
         */
        var vendorPrefixes = {
            animationend: makePrefixMap('Animation', 'AnimationEnd'),
            animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
            animationstart: makePrefixMap('Animation', 'AnimationStart'),
            transitionend: makePrefixMap('Transition', 'TransitionEnd')
        };
        /**
         * Event names that have already been detected and prefixed (if applicable).
         */
        var prefixedEventNames = {};
        /**
         * Element to check for prefixes on.
         */
        var style = {};
        /**
         * Bootstrap if a DOM exists.
         */
        if (ExecutionEnvironment.canUseDOM) {
            style = document.createElement('div').style;
            // On some platforms, in particular some releases of Android 4.x,
            // the un-prefixed "animation" and "transition" properties are defined on the
            // style object but the events that fire will still be prefixed, so we need
            // to check if the un-prefixed events are usable, and if not remove them from the map.
            if (!('AnimationEvent' in window)) {
                delete vendorPrefixes.animationend.animation;
                delete vendorPrefixes.animationiteration.animation;
                delete vendorPrefixes.animationstart.animation;
            }
            // Same as above
            if (!('TransitionEvent' in window)) {
                delete vendorPrefixes.transitionend.transition;
            }
        }
        /**
         * Attempts to determine the correct vendor prefixed event name.
         *
         * @param {string} eventName
         * @returns {string}
         */
        function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
                return prefixedEventNames[eventName];
            }
            else if (!vendorPrefixes[eventName]) {
                return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
                if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                    return prefixedEventNames[eventName] = prefixMap[styleProp];
                }
            }
            return '';
        }
        /**
         * Types of raw signals from the browser caught at the top level.
         *
         * For events like 'submit' which don't consistently bubble (which we
         * trap at a lower node than `document`), binding at `document` would
         * cause duplicate events so we don't include them here.
         */
        var topLevelTypes$1 = {
            topAbort: 'abort',
            topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
            topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
            topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
            topBlur: 'blur',
            topCancel: 'cancel',
            topCanPlay: 'canplay',
            topCanPlayThrough: 'canplaythrough',
            topChange: 'change',
            topClick: 'click',
            topClose: 'close',
            topCompositionEnd: 'compositionend',
            topCompositionStart: 'compositionstart',
            topCompositionUpdate: 'compositionupdate',
            topContextMenu: 'contextmenu',
            topCopy: 'copy',
            topCut: 'cut',
            topDoubleClick: 'dblclick',
            topDrag: 'drag',
            topDragEnd: 'dragend',
            topDragEnter: 'dragenter',
            topDragExit: 'dragexit',
            topDragLeave: 'dragleave',
            topDragOver: 'dragover',
            topDragStart: 'dragstart',
            topDrop: 'drop',
            topDurationChange: 'durationchange',
            topEmptied: 'emptied',
            topEncrypted: 'encrypted',
            topEnded: 'ended',
            topError: 'error',
            topFocus: 'focus',
            topInput: 'input',
            topKeyDown: 'keydown',
            topKeyPress: 'keypress',
            topKeyUp: 'keyup',
            topLoadedData: 'loadeddata',
            topLoad: 'load',
            topLoadedMetadata: 'loadedmetadata',
            topLoadStart: 'loadstart',
            topMouseDown: 'mousedown',
            topMouseMove: 'mousemove',
            topMouseOut: 'mouseout',
            topMouseOver: 'mouseover',
            topMouseUp: 'mouseup',
            topPaste: 'paste',
            topPause: 'pause',
            topPlay: 'play',
            topPlaying: 'playing',
            topProgress: 'progress',
            topRateChange: 'ratechange',
            topScroll: 'scroll',
            topSeeked: 'seeked',
            topSeeking: 'seeking',
            topSelectionChange: 'selectionchange',
            topStalled: 'stalled',
            topSuspend: 'suspend',
            topTextInput: 'textInput',
            topTimeUpdate: 'timeupdate',
            topToggle: 'toggle',
            topTouchCancel: 'touchcancel',
            topTouchEnd: 'touchend',
            topTouchMove: 'touchmove',
            topTouchStart: 'touchstart',
            topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
            topVolumeChange: 'volumechange',
            topWaiting: 'waiting',
            topWheel: 'wheel'
        };
        var BrowserEventConstants = {
            topLevelTypes: topLevelTypes$1
        };
        function runEventQueueInBatch(events) {
            enqueueEvents(events);
            processEventQueue(false);
        }
        /**
         * Streams a fired top-level event to `EventPluginHub` where plugins have the
         * opportunity to create `ReactEvent`s to be dispatched.
         */
        function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            runEventQueueInBatch(events);
        }
        var topLevelTypes = BrowserEventConstants.topLevelTypes;
        /**
         * Summary of `ReactBrowserEventEmitter` event handling:
         *
         *  - Top-level delegation is used to trap most native browser events. This
         *    may only occur in the main thread and is the responsibility of
         *    ReactDOMEventListener, which is injected and can therefore support
         *    pluggable event sources. This is the only work that occurs in the main
         *    thread.
         *
         *  - We normalize and de-duplicate events to account for browser quirks. This
         *    may be done in the worker thread.
         *
         *  - Forward these native events (with the associated top-level type used to
         *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
         *    to extract any synthetic events.
         *
         *  - The `EventPluginHub` will then process each event by annotating them with
         *    "dispatches", a sequence of listeners and IDs that care about that event.
         *
         *  - The `EventPluginHub` then dispatches the events.
         *
         * Overview of React and the event system:
         *
         * +------------+    .
         * |    DOM     |    .
         * +------------+    .
         *       |           .
         *       v           .
         * +------------+    .
         * | ReactEvent |    .
         * |  Listener  |    .
         * +------------+    .                         +-----------+
         *       |           .               +--------+|SimpleEvent|
         *       |           .               |         |Plugin     |
         * +-----|------+    .               v         +-----------+
         * |     |      |    .    +--------------+                    +------------+
         * |     +-----------.--->|EventPluginHub|                    |    Event   |
         * |            |    .    |              |     +-----------+  | Propagators|
         * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
         * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
         * |            |    .    |              |     +-----------+  |  utilities |
         * |     +-----------.--->|              |                    +------------+
         * |     |      |    .    +--------------+
         * +-----|------+    .                ^        +-----------+
         *       |           .                |        |Enter/Leave|
         *       +           .                +-------+|Plugin     |
         * +-------------+   .                         +-----------+
         * | application |   .
         * |-------------|   .
         * |             |   .
         * |             |   .
         * +-------------+   .
         *                   .
         *    React Core     .  General Purpose Event Plugin System
         */
        var alreadyListeningTo = {};
        var reactTopListenersCounter = 0;
        /**
         * To ensure no conflicts with other potential React instances on the page
         */
        var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);
        function getListeningForDocument(mountAt) {
            // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
            // directly.
            if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
                mountAt[topListenersIDKey] = reactTopListenersCounter++;
                alreadyListeningTo[mountAt[topListenersIDKey]] = {};
            }
            return alreadyListeningTo[mountAt[topListenersIDKey]];
        }
        /**
         * We listen for bubbled touch events on the document object.
         *
         * Firefox v8.01 (and possibly others) exhibited strange behavior when
         * mounting `onmousemove` events at some node that was not the document
         * element. The symptoms were that if your mouse is not moving over something
         * contained within that mount point (for example on the background) the
         * top-level listeners for `onmousemove` won't be called. However, if you
         * register the `mousemove` on the document object, then it will of course
         * catch all `mousemove`s. This along with iOS quirks, justifies restricting
         * top-level listeners to the document object only, at least for these
         * movement types of events and possibly all events.
         *
         * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
         *
         * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
         * they bubble to document.
         *
         * @param {string} registrationName Name of listener (e.g. `onClick`).
         * @param {object} contentDocumentHandle Document which owns the container
         */
        function listenTo(registrationName, contentDocumentHandle) {
            var mountAt = contentDocumentHandle;
            var isListening = getListeningForDocument(mountAt);
            var dependencies = registrationNameDependencies[registrationName];
            for (var i = 0; i < dependencies.length; i++) {
                var dependency = dependencies[i];
                if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
                    if (dependency === 'topScroll') {
                        trapCapturedEvent('topScroll', 'scroll', mountAt);
                    }
                    else if (dependency === 'topFocus' || dependency === 'topBlur') {
                        trapCapturedEvent('topFocus', 'focus', mountAt);
                        trapCapturedEvent('topBlur', 'blur', mountAt);
                        // to make sure blur and focus event listeners are only attached once
                        isListening.topBlur = true;
                        isListening.topFocus = true;
                    }
                    else if (dependency === 'topCancel') {
                        if (isEventSupported('cancel', true)) {
                            trapCapturedEvent('topCancel', 'cancel', mountAt);
                        }
                        isListening.topCancel = true;
                    }
                    else if (dependency === 'topClose') {
                        if (isEventSupported('close', true)) {
                            trapCapturedEvent('topClose', 'close', mountAt);
                        }
                        isListening.topClose = true;
                    }
                    else if (topLevelTypes.hasOwnProperty(dependency)) {
                        trapBubbledEvent(dependency, topLevelTypes[dependency], mountAt);
                    }
                    isListening[dependency] = true;
                }
            }
        }
        function isListeningToAllDependencies(registrationName, mountAt) {
            var isListening = getListeningForDocument(mountAt);
            var dependencies = registrationNameDependencies[registrationName];
            for (var i = 0; i < dependencies.length; i++) {
                var dependency = dependencies[i];
                if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
                    return false;
                }
            }
            return true;
        }
        /**
         * Given any node return the first leaf node without children.
         *
         * @param {DOMElement|DOMTextNode} node
         * @return {DOMElement|DOMTextNode}
         */
        function getLeafNode(node) {
            while (node && node.firstChild) {
                node = node.firstChild;
            }
            return node;
        }
        /**
         * Get the next sibling within a container. This will walk up the
         * DOM if a node's siblings have been exhausted.
         *
         * @param {DOMElement|DOMTextNode} node
         * @return {?DOMElement|DOMTextNode}
         */
        function getSiblingNode(node) {
            while (node) {
                if (node.nextSibling) {
                    return node.nextSibling;
                }
                node = node.parentNode;
            }
        }
        /**
         * Get object describing the nodes which contain characters at offset.
         *
         * @param {DOMElement|DOMTextNode} root
         * @param {number} offset
         * @return {?object}
         */
        function getNodeForCharacterOffset(root, offset) {
            var node = getLeafNode(root);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
                if (node.nodeType === TEXT_NODE) {
                    nodeEnd = nodeStart + node.textContent.length;
                    if (nodeStart <= offset && nodeEnd >= offset) {
                        return {
                            node: node,
                            offset: offset - nodeStart
                        };
                    }
                    nodeStart = nodeEnd;
                }
                node = getLeafNode(getSiblingNode(node));
            }
        }
        /**
         * @param {DOMElement} outerNode
         * @return {?object}
         */
        function getOffsets(outerNode) {
            var selection = window.getSelection && window.getSelection();
            if (!selection || selection.rangeCount === 0) {
                return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode$$1 = selection.focusNode, focusOffset = selection.focusOffset;
            // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
            // up/down buttons on an <input type="number">. Anonymous divs do not seem to
            // expose properties, triggering a "Permission denied error" if any of its
            // properties are accessed. The only seemingly possible way to avoid erroring
            // is to access a property that typically works for non-anonymous divs and
            // catch any error that may otherwise arise. See
            // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
            try {
                /* eslint-disable no-unused-expressions */
                anchorNode.nodeType;
                focusNode$$1.nodeType;
                /* eslint-enable no-unused-expressions */
            }
            catch (e) {
                return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode$$1, focusOffset);
        }
        /**
         * Returns {start, end} where `start` is the character/codepoint index of
         * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
         * `end` is the index of (focusNode, focusOffset).
         *
         * Returns null if you pass in garbage input but we should probably just crash.
         *
         * Exported only for testing.
         */
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode$$1, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer: while (true) {
                var next = null;
                while (true) {
                    if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                        start = length + anchorOffset;
                    }
                    if (node === focusNode$$1 && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                        end = length + focusOffset;
                    }
                    if (node.nodeType === TEXT_NODE) {
                        length += node.nodeValue.length;
                    }
                    if ((next = node.firstChild) === null) {
                        break;
                    }
                    // Moving from `node` to its first child `next`.
                    parentNode = node;
                    node = next;
                }
                while (true) {
                    if (node === outerNode) {
                        // If `outerNode` has children, this is always the second time visiting
                        // it. If it has no children, this is still the first loop, and the only
                        // valid selection is anchorNode and focusNode both equal to this node
                        // and both offsets 0, in which case we will have handled above.
                        break outer;
                    }
                    if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                        start = length;
                    }
                    if (parentNode === focusNode$$1 && ++indexWithinFocus === focusOffset) {
                        end = length;
                    }
                    if ((next = node.nextSibling) !== null) {
                        break;
                    }
                    node = parentNode;
                    parentNode = node.parentNode;
                }
                // Moving from `node` to its next sibling `next`.
                node = next;
            }
            if (start === -1 || end === -1) {
                // This should never happen. (Would happen if the anchor/focus nodes aren't
                // actually inside the passed-in node.)
                return null;
            }
            return {
                start: start,
                end: end
            };
        }
        /**
         * In modern non-IE browsers, we can support both forward and backward
         * selections.
         *
         * Note: IE10+ supports the Selection object, but it does not support
         * the `extend` method, which means that even in modern IE, it's not possible
         * to programmatically create a backward selection. Thus, for all IE
         * versions, we use the old IE API to create our selections.
         *
         * @param {DOMElement|DOMTextNode} node
         * @param {object} offsets
         */
        function setOffsets(node, offsets) {
            if (!window.getSelection) {
                return;
            }
            var selection = window.getSelection();
            var length = node[getTextContentAccessor()].length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
            // IE 11 uses modern selection, but doesn't support the extend method.
            // Flip backward selections, so we can set with a single range.
            if (!selection.extend && start > end) {
                var temp = end;
                end = start;
                start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
                if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                    return;
                }
                var range = document.createRange();
                range.setStart(startMarker.node, startMarker.offset);
                selection.removeAllRanges();
                if (start > end) {
                    selection.addRange(range);
                    selection.extend(endMarker.node, endMarker.offset);
                }
                else {
                    range.setEnd(endMarker.node, endMarker.offset);
                    selection.addRange(range);
                }
            }
        }
        function isInDocument(node) {
            return containsNode(document.documentElement, node);
        }
        /**
         * @ReactInputSelection: React input selection module. Based on Selection.js,
         * but modified to be suitable for react and has a couple of bug fixes (doesn't
         * assume buttons have range selections allowed).
         * Input selection module for React.
         */
        function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
        }
        function getSelectionInformation() {
            var focusedElem = getActiveElement();
            return {
                focusedElem: focusedElem,
                selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
            };
        }
        /**
         * @restoreSelection: If any selection information was potentially lost,
         * restore it. This is useful when performing operations that could remove dom
         * nodes and place them back in, resulting in focus being lost.
         */
        function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElement();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
                if (hasSelectionCapabilities(priorFocusedElem)) {
                    setSelection(priorFocusedElem, priorSelectionRange);
                }
                // Focusing a node can change the scroll position, which is undesirable
                var ancestors = [];
                var ancestor = priorFocusedElem;
                while (ancestor = ancestor.parentNode) {
                    if (ancestor.nodeType === ELEMENT_NODE) {
                        ancestors.push({
                            element: ancestor,
                            left: ancestor.scrollLeft,
                            top: ancestor.scrollTop
                        });
                    }
                }
                focusNode(priorFocusedElem);
                for (var i = 0; i < ancestors.length; i++) {
                    var info = ancestors[i];
                    info.element.scrollLeft = info.left;
                    info.element.scrollTop = info.top;
                }
            }
        }
        /**
         * @getSelection: Gets the selection bounds of a focused textarea, input or
         * contentEditable node.
         * -@input: Look up selection bounds of this input
         * -@return {start: selectionStart, end: selectionEnd}
         */
        function getSelection$1(input) {
            var selection = void 0;
            if ('selectionStart' in input) {
                // Modern browser with input or textarea.
                selection = {
                    start: input.selectionStart,
                    end: input.selectionEnd
                };
            }
            else {
                // Content editable or old IE textarea.
                selection = getOffsets(input);
            }
            return selection || { start: 0, end: 0 };
        }
        /**
         * @setSelection: Sets the selection bounds of a textarea or input and focuses
         * the input.
         * -@input     Set selection bounds of this input or textarea
         * -@offsets   Object of same form that is returned from get*
         */
        function setSelection(input, offsets) {
            var start = offsets.start, end = offsets.end;
            if (end === undefined) {
                end = start;
            }
            if ('selectionStart' in input) {
                input.selectionStart = start;
                input.selectionEnd = Math.min(end, input.value.length);
            }
            else {
                setOffsets(input, offsets);
            }
        }
        var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
        var eventTypes$3 = {
            select: {
                phasedRegistrationNames: {
                    bubbled: 'onSelect',
                    captured: 'onSelectCapture'
                },
                dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
            }
        };
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        /**
         * Get an object which is a unique representation of the current selection.
         *
         * The return value will not be consistent across nodes or browsers, but
         * two identical selections on the same node will return identical objects.
         *
         * @param {DOMElement} node
         * @return {object}
         */
        function getSelection(node) {
            if ('selectionStart' in node && hasSelectionCapabilities(node)) {
                return {
                    start: node.selectionStart,
                    end: node.selectionEnd
                };
            }
            else if (window.getSelection) {
                var selection = window.getSelection();
                return {
                    anchorNode: selection.anchorNode,
                    anchorOffset: selection.anchorOffset,
                    focusNode: selection.focusNode,
                    focusOffset: selection.focusOffset
                };
            }
        }
        /**
         * Poll selection to see whether it's changed.
         *
         * @param {object} nativeEvent
         * @return {?SyntheticEvent}
         */
        function constructSelectEvent(nativeEvent, nativeEventTarget) {
            // Ensure we have the right element, and that the user is not dragging a
            // selection (this matches native `select` event behavior). In HTML5, select
            // fires only on input and textarea thus if there's no focused element we
            // won't dispatch.
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement()) {
                return null;
            }
            // Only fire when selection has actually changed.
            var currentSelection = getSelection(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
                lastSelection = currentSelection;
                var syntheticEvent = SyntheticEvent$1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
                syntheticEvent.type = 'select';
                syntheticEvent.target = activeElement$1;
                accumulateTwoPhaseDispatches(syntheticEvent);
                return syntheticEvent;
            }
            return null;
        }
        /**
         * This plugin creates an `onSelect` event that normalizes select events
         * across form elements.
         *
         * Supported elements are:
         * - input (see `isTextInputElement`)
         * - textarea
         * - contentEditable
         *
         * This differs from native browser implementations in the following ways:
         * - Fires on contentEditable fields as well as inputs.
         * - Fires for collapsed selection.
         * - Fires after user input.
         */
        var SelectEventPlugin = {
            eventTypes: eventTypes$3,
            extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === DOCUMENT_NODE ? nativeEventTarget : nativeEventTarget.ownerDocument;
                // Track whether all listeners exists for this plugin. If none exist, we do
                // not extract events. See #3639.
                if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
                    return null;
                }
                var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
                switch (topLevelType) {
                    // Track the input node that has focus.
                    case 'topFocus':
                        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                            activeElement$1 = targetNode;
                            activeElementInst$1 = targetInst;
                            lastSelection = null;
                        }
                        break;
                    case 'topBlur':
                        activeElement$1 = null;
                        activeElementInst$1 = null;
                        lastSelection = null;
                        break;
                    // Don't fire the event while the user is dragging. This matches the
                    // semantics of the native select event.
                    case 'topMouseDown':
                        mouseDown = true;
                        break;
                    case 'topContextMenu':
                    case 'topMouseUp':
                        mouseDown = false;
                        return constructSelectEvent(nativeEvent, nativeEventTarget);
                    // Chrome and IE fire non-standard event when selection is changed (and
                    // sometimes when it hasn't). IE's event fires out of order with respect
                    // to key and input events on deletion, so we discard it.
                    //
                    // Firefox doesn't support selectionchange, so check selection status
                    // after each key entry. The selection changes after keydown and before
                    // keyup, but we check on keydown as well in the case of holding down a
                    // key, when multiple keydown events are fired but only one keyup is.
                    // This is also our approach for IE handling, for the reason above.
                    case 'topSelectionChange':
                        if (skipSelectionChangeEvent) {
                            break;
                        }
                    // falls through
                    case 'topKeyDown':
                    case 'topKeyUp':
                        return constructSelectEvent(nativeEvent, nativeEventTarget);
                }
                return null;
            }
        };
        /**
         * @interface Event
         * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
         * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
         */
        var AnimationEventInterface = {
            animationName: null,
            elapsedTime: null,
            pseudoElement: null
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticEvent}
         */
        function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent$1.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
        /**
         * @interface Event
         * @see http://www.w3.org/TR/clipboard-apis/
         */
        var ClipboardEventInterface = {
            clipboardData: function (event) {
                return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
            }
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticEvent}
         */
        function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent$1.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
        /**
         * @interface FocusEvent
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */
        var FocusEventInterface = {
            relatedTarget: null
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticUIEvent}
         */
        function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
        /**
         * `charCode` represents the actual "character code" and is safe to use with
         * `String.fromCharCode`. As such, only keys that correspond to printable
         * characters produce a valid `charCode`, the only exception to this is Enter.
         * The Tab-key is considered non-printable and does not have a `charCode`,
         * presumably because it does not produce a tab-character in browsers.
         *
         * @param {object} nativeEvent Native browser event.
         * @return {number} Normalized `charCode` property.
         */
        function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ('charCode' in nativeEvent) {
                charCode = nativeEvent.charCode;
                // FF does not set `charCode` for the Enter-key, check against `keyCode`.
                if (charCode === 0 && keyCode === 13) {
                    charCode = 13;
                }
            }
            else {
                // IE8 does not implement `charCode`, but `keyCode` has the correct value.
                charCode = keyCode;
            }
            // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
            // Must not discard the (non-)printable Enter-key.
            if (charCode >= 32 || charCode === 13) {
                return charCode;
            }
            return 0;
        }
        /**
         * Normalization of deprecated HTML5 `key` values
         * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
         */
        var normalizeKey = {
            Esc: 'Escape',
            Spacebar: ' ',
            Left: 'ArrowLeft',
            Up: 'ArrowUp',
            Right: 'ArrowRight',
            Down: 'ArrowDown',
            Del: 'Delete',
            Win: 'OS',
            Menu: 'ContextMenu',
            Apps: 'ContextMenu',
            Scroll: 'ScrollLock',
            MozPrintableKey: 'Unidentified'
        };
        /**
         * Translation from legacy `keyCode` to HTML5 `key`
         * Only special keys supported, all others depend on keyboard layout or browser
         * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
         */
        var translateToKey = {
            '8': 'Backspace',
            '9': 'Tab',
            '12': 'Clear',
            '13': 'Enter',
            '16': 'Shift',
            '17': 'Control',
            '18': 'Alt',
            '19': 'Pause',
            '20': 'CapsLock',
            '27': 'Escape',
            '32': ' ',
            '33': 'PageUp',
            '34': 'PageDown',
            '35': 'End',
            '36': 'Home',
            '37': 'ArrowLeft',
            '38': 'ArrowUp',
            '39': 'ArrowRight',
            '40': 'ArrowDown',
            '45': 'Insert',
            '46': 'Delete',
            '112': 'F1',
            '113': 'F2',
            '114': 'F3',
            '115': 'F4',
            '116': 'F5',
            '117': 'F6',
            '118': 'F7',
            '119': 'F8',
            '120': 'F9',
            '121': 'F10',
            '122': 'F11',
            '123': 'F12',
            '144': 'NumLock',
            '145': 'ScrollLock',
            '224': 'Meta'
        };
        /**
         * @param {object} nativeEvent Native browser event.
         * @return {string} Normalized `key` property.
         */
        function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
                // Normalize inconsistent values reported by browsers due to
                // implementations of a working draft specification.
                // FireFox implements `key` but returns `MozPrintableKey` for all
                // printable characters (normalized to `Unidentified`), ignore it.
                var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
                if (key !== 'Unidentified') {
                    return key;
                }
            }
            // Browser does not implement `key`, polyfill as much of it as we can.
            if (nativeEvent.type === 'keypress') {
                var charCode = getEventCharCode(nativeEvent);
                // The enter-key is technically both printable and non-printable and can
                // thus be captured by `keypress`, no other non-printable key should.
                return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
                // While user keyboard layout determines the actual meaning of each
                // `keyCode` value, almost all function keys have a universal value.
                return translateToKey[nativeEvent.keyCode] || 'Unidentified';
            }
            return '';
        }
        /**
         * @interface KeyboardEvent
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */
        var KeyboardEventInterface = {
            key: getEventKey,
            location: null,
            ctrlKey: null,
            shiftKey: null,
            altKey: null,
            metaKey: null,
            repeat: null,
            locale: null,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function (event) {
                // `charCode` is the result of a KeyPress event and represents the value of
                // the actual printable character.
                // KeyPress is deprecated, but its replacement is not yet final and not
                // implemented in any major browser. Only KeyPress has charCode.
                if (event.type === 'keypress') {
                    return getEventCharCode(event);
                }
                return 0;
            },
            keyCode: function (event) {
                // `keyCode` is the result of a KeyDown/Up event and represents the value of
                // physical keyboard key.
                // The actual meaning of the value depends on the users' keyboard layout
                // which cannot be detected. Assuming that it is a US keyboard layout
                // provides a surprisingly accurate mapping for US and European users.
                // Due to this, it is left to the user to implement at this time.
                if (event.type === 'keydown' || event.type === 'keyup') {
                    return event.keyCode;
                }
                return 0;
            },
            which: function (event) {
                // `which` is an alias for either `keyCode` or `charCode` depending on the
                // type of the event.
                if (event.type === 'keypress') {
                    return getEventCharCode(event);
                }
                if (event.type === 'keydown' || event.type === 'keyup') {
                    return event.keyCode;
                }
                return 0;
            }
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticUIEvent}
         */
        function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
        /**
         * @interface DragEvent
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */
        var DragEventInterface = {
            dataTransfer: null
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticMouseEvent}
         */
        function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
        /**
         * @interface TouchEvent
         * @see http://www.w3.org/TR/touch-events/
         */
        var TouchEventInterface = {
            touches: null,
            targetTouches: null,
            changedTouches: null,
            altKey: null,
            metaKey: null,
            ctrlKey: null,
            shiftKey: null,
            getModifierState: getEventModifierState
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticUIEvent}
         */
        function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
        /**
         * @interface Event
         * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
         * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
         */
        var TransitionEventInterface = {
            propertyName: null,
            elapsedTime: null,
            pseudoElement: null
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticEvent}
         */
        function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticEvent$1.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
        /**
         * @interface WheelEvent
         * @see http://www.w3.org/TR/DOM-Level-3-Events/
         */
        var WheelEventInterface = {
            deltaX: function (event) {
                return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function (event) {
                return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                        'wheelDelta' in event ? -event.wheelDelta : 0;
            },
            deltaZ: null,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: null
        };
        /**
         * @param {object} dispatchConfig Configuration used to dispatch this event.
         * @param {string} dispatchMarker Marker identifying the event target.
         * @param {object} nativeEvent Native browser event.
         * @extends {SyntheticMouseEvent}
         */
        function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }
        SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
        /**
         * Turns
         * ['abort', ...]
         * into
         * eventTypes = {
         *   'abort': {
         *     phasedRegistrationNames: {
         *       bubbled: 'onAbort',
         *       captured: 'onAbortCapture',
         *     },
         *     dependencies: ['topAbort'],
         *   },
         *   ...
         * };
         * topLevelEventsToDispatchConfig = {
         *   'topAbort': { sameConfig }
         * };
         */
        var eventTypes$4 = {};
        var topLevelEventsToDispatchConfig = {};
        ['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'toggle', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var onEvent = 'on' + capitalizedEvent;
            var topEvent = 'top' + capitalizedEvent;
            var type = {
                phasedRegistrationNames: {
                    bubbled: onEvent,
                    captured: onEvent + 'Capture'
                },
                dependencies: [topEvent]
            };
            eventTypes$4[event] = type;
            topLevelEventsToDispatchConfig[topEvent] = type;
        });
        // Only used in DEV for exhaustiveness validation.
        var knownHTMLTopLevelTypes = ['topAbort', 'topCancel', 'topCanPlay', 'topCanPlayThrough', 'topClose', 'topDurationChange', 'topEmptied', 'topEncrypted', 'topEnded', 'topError', 'topInput', 'topInvalid', 'topLoad', 'topLoadedData', 'topLoadedMetadata', 'topLoadStart', 'topPause', 'topPlay', 'topPlaying', 'topProgress', 'topRateChange', 'topReset', 'topSeeked', 'topSeeking', 'topStalled', 'topSubmit', 'topSuspend', 'topTimeUpdate', 'topToggle', 'topVolumeChange', 'topWaiting'];
        var SimpleEventPlugin = {
            eventTypes: eventTypes$4,
            extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
                if (!dispatchConfig) {
                    return null;
                }
                var EventConstructor;
                switch (topLevelType) {
                    case 'topKeyPress':
                        // Firefox creates a keypress event for function keys too. This removes
                        // the unwanted keypress events. Enter is however both printable and
                        // non-printable. One would expect Tab to be as well (but it isn't).
                        if (getEventCharCode(nativeEvent) === 0) {
                            return null;
                        }
                    /* falls through */
                    case 'topKeyDown':
                    case 'topKeyUp':
                        EventConstructor = SyntheticKeyboardEvent;
                        break;
                    case 'topBlur':
                    case 'topFocus':
                        EventConstructor = SyntheticFocusEvent;
                        break;
                    case 'topClick':
                        // Firefox creates a click event on right mouse clicks. This removes the
                        // unwanted click events.
                        if (nativeEvent.button === 2) {
                            return null;
                        }
                    /* falls through */
                    case 'topDoubleClick':
                    case 'topMouseDown':
                    case 'topMouseMove':
                    case 'topMouseUp':
                    // TODO: Disabled elements should not respond to mouse events
                    /* falls through */
                    case 'topMouseOut':
                    case 'topMouseOver':
                    case 'topContextMenu':
                        EventConstructor = SyntheticMouseEvent;
                        break;
                    case 'topDrag':
                    case 'topDragEnd':
                    case 'topDragEnter':
                    case 'topDragExit':
                    case 'topDragLeave':
                    case 'topDragOver':
                    case 'topDragStart':
                    case 'topDrop':
                        EventConstructor = SyntheticDragEvent;
                        break;
                    case 'topTouchCancel':
                    case 'topTouchEnd':
                    case 'topTouchMove':
                    case 'topTouchStart':
                        EventConstructor = SyntheticTouchEvent;
                        break;
                    case 'topAnimationEnd':
                    case 'topAnimationIteration':
                    case 'topAnimationStart':
                        EventConstructor = SyntheticAnimationEvent;
                        break;
                    case 'topTransitionEnd':
                        EventConstructor = SyntheticTransitionEvent;
                        break;
                    case 'topScroll':
                        EventConstructor = SyntheticUIEvent;
                        break;
                    case 'topWheel':
                        EventConstructor = SyntheticWheelEvent;
                        break;
                    case 'topCopy':
                    case 'topCut':
                    case 'topPaste':
                        EventConstructor = SyntheticClipboardEvent;
                        break;
                    default:
                        {
                            if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                                warning(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
                            }
                        }
                        // HTML Events
                        // @see http://www.w3.org/TR/html5/index.html#events-0
                        EventConstructor = SyntheticEvent$1;
                        break;
                }
                var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
                accumulateTwoPhaseDispatches(event);
                return event;
            }
        };
        setHandleTopLevel(handleTopLevel);
        /**
         * Inject modules for resolving DOM hierarchy and plugin ordering.
         */
        injection$1.injectEventPluginOrder(DOMEventPluginOrder);
        injection$2.injectComponentTree(ReactDOMComponentTree);
        /**
         * Some important event plugins included by default (without having to require
         * them).
         */
        injection$1.injectEventPluginsByName({
            SimpleEventPlugin: SimpleEventPlugin,
            EnterLeaveEventPlugin: EnterLeaveEventPlugin,
            ChangeEventPlugin: ChangeEventPlugin,
            SelectEventPlugin: SelectEventPlugin,
            BeforeInputEventPlugin: BeforeInputEventPlugin
        });
        var enableAsyncSubtreeAPI = true;
        var enableAsyncSchedulingByDefaultInReactDOM = false;
        // Exports ReactDOM.createRoot
        var enableCreateRoot = false;
        var enableUserTimingAPI = true;
        // Mutating mode (React DOM, React ART, React Native):
        var enableMutatingReconciler = true;
        // Experimental noop mode (currently unused):
        var enableNoopReconciler = false;
        // Experimental persistent mode (CS):
        var enablePersistentReconciler = false;
        // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
        var debugRenderPhaseSideEffects = false;
        // Only used in www builds.
        var valueStack = [];
        {
            var fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
            return {
                current: defaultValue
            };
        }
        function pop(cursor, fiber) {
            if (index < 0) {
                {
                    warning(false, 'Unexpected pop.');
                }
                return;
            }
            {
                if (fiber !== fiberStack[index]) {
                    warning(false, 'Unexpected Fiber popped.');
                }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
                fiberStack[index] = null;
            }
            index--;
        }
        function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
                fiberStack[index] = fiber;
            }
            cursor.current = value;
        }
        function reset$1() {
            while (index > -1) {
                valueStack[index] = null;
                {
                    fiberStack[index] = null;
                }
                index--;
            }
        }
        var describeComponentFrame = function (name, source, ownerName) {
            return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
        };
        function describeFiber(fiber) {
            switch (fiber.tag) {
                case IndeterminateComponent:
                case FunctionalComponent:
                case ClassComponent:
                case HostComponent:
                    var owner = fiber._debugOwner;
                    var source = fiber._debugSource;
                    var name = getComponentName(fiber);
                    var ownerName = null;
                    if (owner) {
                        ownerName = getComponentName(owner);
                    }
                    return describeComponentFrame(name, source, ownerName);
                default:
                    return '';
            }
        }
        // This function can only be called with a work-in-progress fiber and
        // only during begin or complete phase. Do not call it under any other
        // circumstances.
        function getStackAddendumByWorkInProgressFiber(workInProgress) {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                // Otherwise this return pointer might point to the wrong tree:
                node = node['return'];
            } while (node);
            return info;
        }
        function getCurrentFiberOwnerName() {
            {
                var fiber = ReactDebugCurrentFiber.current;
                if (fiber === null) {
                    return null;
                }
                var owner = fiber._debugOwner;
                if (owner !== null && typeof owner !== 'undefined') {
                    return getComponentName(owner);
                }
            }
            return null;
        }
        function getCurrentFiberStackAddendum() {
            {
                var fiber = ReactDebugCurrentFiber.current;
                if (fiber === null) {
                    return null;
                }
                // Safe because if current fiber exists, we are reconciling,
                // and it is guaranteed to be the work-in-progress version.
                return getStackAddendumByWorkInProgressFiber(fiber);
            }
            return null;
        }
        function resetCurrentFiber() {
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFiber.current = null;
            ReactDebugCurrentFiber.phase = null;
        }
        function setCurrentFiber(fiber) {
            ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;
            ReactDebugCurrentFiber.current = fiber;
            ReactDebugCurrentFiber.phase = null;
        }
        function setCurrentPhase(phase) {
            ReactDebugCurrentFiber.phase = phase;
        }
        var ReactDebugCurrentFiber = {
            current: null,
            phase: null,
            resetCurrentFiber: resetCurrentFiber,
            setCurrentFiber: setCurrentFiber,
            setCurrentPhase: setCurrentPhase,
            getCurrentFiberOwnerName: getCurrentFiberOwnerName,
            getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
        };
        // Prefix measurements so that it's possible to filter them.
        // Longer prefixes are hard to read in DevTools.
        var reactEmoji = '\u269B';
        var warningEmoji = '\u26D4';
        var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
        // Keep track of current fiber so that we know the path to unwind on pause.
        // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
        var currentFiber = null;
        // If we're in the middle of user code, which fiber and method is it?
        // Reusing `currentFiber` would be confusing for this because user code fiber
        // can change during commit phase too, but we don't need to unwind it (since
        // lifecycles in the commit phase don't resemble a tree).
        var currentPhase = null;
        var currentPhaseFiber = null;
        // Did lifecycle hook schedule an update? This is often a performance problem,
        // so we will keep track of it, and include it in the report.
        // Track commits caused by cascading updates.
        var isCommitting = false;
        var hasScheduledUpdateInCurrentCommit = false;
        var hasScheduledUpdateInCurrentPhase = false;
        var commitCountInCurrentWorkLoop = 0;
        var effectCountInCurrentCommit = 0;
        var isWaitingForCallback = false;
        // During commits, we only show a measurement once per method name
        // to avoid stretch the commit phase with measurement overhead.
        var labelsInCurrentCommit = new Set();
        var formatMarkName = function (markName) {
            return reactEmoji + ' ' + markName;
        };
        var formatLabel = function (label, warning$$1) {
            var prefix = warning$$1 ? warningEmoji + ' ' : reactEmoji + ' ';
            var suffix = warning$$1 ? ' Warning: ' + warning$$1 : '';
            return '' + prefix + label + suffix;
        };
        var beginMark = function (markName) {
            performance.mark(formatMarkName(markName));
        };
        var clearMark = function (markName) {
            performance.clearMarks(formatMarkName(markName));
        };
        var endMark = function (label, markName, warning$$1) {
            var formattedMarkName = formatMarkName(markName);
            var formattedLabel = formatLabel(label, warning$$1);
            try {
                performance.measure(formattedLabel, formattedMarkName);
            }
            catch (err) { }
            // If previous mark was missing for some reason, this will throw.
            // This could only happen if React crashed in an unexpected place earlier.
            // Don't pile on with more errors.
            // Clear marks immediately to avoid growing buffer.
            performance.clearMarks(formattedMarkName);
            performance.clearMeasures(formattedLabel);
        };
        var getFiberMarkName = function (label, debugID) {
            return label + ' (#' + debugID + ')';
        };
        var getFiberLabel = function (componentName, isMounted, phase) {
            if (phase === null) {
                // These are composite component total time measurements.
                return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
            }
            else {
                // Composite component methods.
                return componentName + '.' + phase;
            }
        };
        var beginFiberMark = function (fiber, phase) {
            var componentName = getComponentName(fiber) || 'Unknown';
            var debugID = fiber._debugID;
            var isMounted = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted, phase);
            if (isCommitting && labelsInCurrentCommit.has(label)) {
                // During the commit phase, we don't show duplicate labels because
                // there is a fixed overhead for every measurement, and we don't
                // want to stretch the commit phase beyond necessary.
                return false;
            }
            labelsInCurrentCommit.add(label);
            var markName = getFiberMarkName(label, debugID);
            beginMark(markName);
            return true;
        };
        var clearFiberMark = function (fiber, phase) {
            var componentName = getComponentName(fiber) || 'Unknown';
            var debugID = fiber._debugID;
            var isMounted = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted, phase);
            var markName = getFiberMarkName(label, debugID);
            clearMark(markName);
        };
        var endFiberMark = function (fiber, phase, warning$$1) {
            var componentName = getComponentName(fiber) || 'Unknown';
            var debugID = fiber._debugID;
            var isMounted = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted, phase);
            var markName = getFiberMarkName(label, debugID);
            endMark(label, markName, warning$$1);
        };
        var shouldIgnoreFiber = function (fiber) {
            // Host components should be skipped in the timeline.
            // We could check typeof fiber.type, but does this work with RN?
            switch (fiber.tag) {
                case HostRoot:
                case HostComponent:
                case HostText:
                case HostPortal:
                case ReturnComponent:
                case Fragment:
                    return true;
                default:
                    return false;
            }
        };
        var clearPendingPhaseMeasurement = function () {
            if (currentPhase !== null && currentPhaseFiber !== null) {
                clearFiberMark(currentPhaseFiber, currentPhase);
            }
            currentPhaseFiber = null;
            currentPhase = null;
            hasScheduledUpdateInCurrentPhase = false;
        };
        var pauseTimers = function () {
            // Stops all currently active measurements so that they can be resumed
            // if we continue in a later deferred loop from the same unit of work.
            var fiber = currentFiber;
            while (fiber) {
                if (fiber._debugIsCurrentlyTiming) {
                    endFiberMark(fiber, null, null);
                }
                fiber = fiber['return'];
            }
        };
        var resumeTimersRecursively = function (fiber) {
            if (fiber['return'] !== null) {
                resumeTimersRecursively(fiber['return']);
            }
            if (fiber._debugIsCurrentlyTiming) {
                beginFiberMark(fiber, null);
            }
        };
        var resumeTimers = function () {
            // Resumes all measurements that were active during the last deferred loop.
            if (currentFiber !== null) {
                resumeTimersRecursively(currentFiber);
            }
        };
        function recordEffect() {
            if (enableUserTimingAPI) {
                effectCountInCurrentCommit++;
            }
        }
        function recordScheduleUpdate() {
            if (enableUserTimingAPI) {
                if (isCommitting) {
                    hasScheduledUpdateInCurrentCommit = true;
                }
                if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
                    hasScheduledUpdateInCurrentPhase = true;
                }
            }
        }
        function startRequestCallbackTimer() {
            if (enableUserTimingAPI) {
                if (supportsUserTiming && !isWaitingForCallback) {
                    isWaitingForCallback = true;
                    beginMark('(Waiting for async callback...)');
                }
            }
        }
        function stopRequestCallbackTimer(didExpire) {
            if (enableUserTimingAPI) {
                if (supportsUserTiming) {
                    isWaitingForCallback = false;
                    var warning$$1 = didExpire ? 'React was blocked by main thread' : null;
                    endMark('(Waiting for async callback...)', '(Waiting for async callback...)', warning$$1);
                }
            }
        }
        function startWorkTimer(fiber) {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                    return;
                }
                // If we pause, this is the fiber to unwind from.
                currentFiber = fiber;
                if (!beginFiberMark(fiber, null)) {
                    return;
                }
                fiber._debugIsCurrentlyTiming = true;
            }
        }
        function cancelWorkTimer(fiber) {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                    return;
                }
                // Remember we shouldn't complete measurement for this fiber.
                // Otherwise flamechart will be deep even for small updates.
                fiber._debugIsCurrentlyTiming = false;
                clearFiberMark(fiber, null);
            }
        }
        function stopWorkTimer(fiber) {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                    return;
                }
                // If we pause, its parent is the fiber to unwind from.
                currentFiber = fiber['return'];
                if (!fiber._debugIsCurrentlyTiming) {
                    return;
                }
                fiber._debugIsCurrentlyTiming = false;
                endFiberMark(fiber, null, null);
            }
        }
        function stopFailedWorkTimer(fiber) {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                    return;
                }
                // If we pause, its parent is the fiber to unwind from.
                currentFiber = fiber['return'];
                if (!fiber._debugIsCurrentlyTiming) {
                    return;
                }
                fiber._debugIsCurrentlyTiming = false;
                var warning$$1 = 'An error was thrown inside this error boundary';
                endFiberMark(fiber, null, warning$$1);
            }
        }
        function startPhaseTimer(fiber, phase) {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                    return;
                }
                clearPendingPhaseMeasurement();
                if (!beginFiberMark(fiber, phase)) {
                    return;
                }
                currentPhaseFiber = fiber;
                currentPhase = phase;
            }
        }
        function stopPhaseTimer() {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                    return;
                }
                if (currentPhase !== null && currentPhaseFiber !== null) {
                    var warning$$1 = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
                    endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
                }
                currentPhase = null;
                currentPhaseFiber = null;
            }
        }
        function startWorkLoopTimer(nextUnitOfWork) {
            if (enableUserTimingAPI) {
                currentFiber = nextUnitOfWork;
                if (!supportsUserTiming) {
                    return;
                }
                commitCountInCurrentWorkLoop = 0;
                // This is top level call.
                // Any other measurements are performed within.
                beginMark('(React Tree Reconciliation)');
                // Resume any measurements that were in progress during the last loop.
                resumeTimers();
            }
        }
        function stopWorkLoopTimer(interruptedBy) {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                    return;
                }
                var warning$$1 = null;
                if (interruptedBy !== null) {
                    if (interruptedBy.tag === HostRoot) {
                        warning$$1 = 'A top-level update interrupted the previous render';
                    }
                    else {
                        var componentName = getComponentName(interruptedBy) || 'Unknown';
                        warning$$1 = 'An update to ' + componentName + ' interrupted the previous render';
                    }
                }
                else if (commitCountInCurrentWorkLoop > 1) {
                    warning$$1 = 'There were cascading updates';
                }
                commitCountInCurrentWorkLoop = 0;
                // Pause any measurements until the next loop.
                pauseTimers();
                endMark('(React Tree Reconciliation)', '(React Tree Reconciliation)', warning$$1);
            }
        }
        function startCommitTimer() {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                    return;
                }
                isCommitting = true;
                hasScheduledUpdateInCurrentCommit = false;
                labelsInCurrentCommit.clear();
                beginMark('(Committing Changes)');
            }
        }
        function stopCommitTimer() {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                    return;
                }
                var warning$$1 = null;
                if (hasScheduledUpdateInCurrentCommit) {
                    warning$$1 = 'Lifecycle hook scheduled a cascading update';
                }
                else if (commitCountInCurrentWorkLoop > 0) {
                    warning$$1 = 'Caused by a cascading update in earlier commit';
                }
                hasScheduledUpdateInCurrentCommit = false;
                commitCountInCurrentWorkLoop++;
                isCommitting = false;
                labelsInCurrentCommit.clear();
                endMark('(Committing Changes)', '(Committing Changes)', warning$$1);
            }
        }
        function startCommitHostEffectsTimer() {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                    return;
                }
                effectCountInCurrentCommit = 0;
                beginMark('(Committing Host Effects)');
            }
        }
        function stopCommitHostEffectsTimer() {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                    return;
                }
                var count = effectCountInCurrentCommit;
                effectCountInCurrentCommit = 0;
                endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
            }
        }
        function startCommitLifeCyclesTimer() {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                    return;
                }
                effectCountInCurrentCommit = 0;
                beginMark('(Calling Lifecycle Methods)');
            }
        }
        function stopCommitLifeCyclesTimer() {
            if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                    return;
                }
                var count = effectCountInCurrentCommit;
                effectCountInCurrentCommit = 0;
                endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
            }
        }
        {
            var warnedAboutMissingGetChildContext = {};
        }
        // A cursor to the current merged context object on the stack.
        var contextStackCursor = createCursor(emptyObject);
        // A cursor to a boolean indicating whether the context has changed.
        var didPerformWorkStackCursor = createCursor(false);
        // Keep track of the previous context object that was on the stack.
        // We use this to get access to the parent context after we have already
        // pushed the next context provider, and now need to merge their contexts.
        var previousContext = emptyObject;
        function getUnmaskedContext(workInProgress) {
            var hasOwnContext = isContextProvider(workInProgress);
            if (hasOwnContext) {
                // If the fiber is a context provider itself, when we read its context
                // we have already pushed its own child context on the stack. A context
                // provider should not "see" its own child context. Therefore we read the
                // previous (parent) context instead for a context provider.
                return previousContext;
            }
            return contextStackCursor.current;
        }
        function cacheContext(workInProgress, unmaskedContext, maskedContext) {
            var instance = workInProgress.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
        function getMaskedContext(workInProgress, unmaskedContext) {
            var type = workInProgress.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
                return emptyObject;
            }
            // Avoid recreating masked context unless unmasked context has changed.
            // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
            // This may trigger infinite loops if componentWillReceiveProps calls setState.
            var instance = workInProgress.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
            }
            {
                var name = getComponentName(workInProgress) || 'Unknown';
                checkPropTypes(contextTypes, context, 'context', name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
            }
            // Cache unmasked context so we can avoid recreating masked context unless necessary.
            // Context is created before the class component is instantiated so check for instance.
            if (instance) {
                cacheContext(workInProgress, unmaskedContext, context);
            }
            return context;
        }
        function hasContextChanged() {
            return didPerformWorkStackCursor.current;
        }
        function isContextConsumer(fiber) {
            return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
        }
        function isContextProvider(fiber) {
            return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
        }
        function popContextProvider(fiber) {
            if (!isContextProvider(fiber)) {
                return;
            }
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
        }
        function popTopLevelContextObject(fiber) {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
            !(contextStackCursor.cursor == null) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
        }
        function processChildContext(fiber, parentContext) {
            var instance = fiber.stateNode;
            var childContextTypes = fiber.type.childContextTypes;
            // TODO (bvaughn) Replace this behavior with an invariant() in the future.
            // It has only been added in Fiber to match the (unintentional) behavior in Stack.
            if (typeof instance.getChildContext !== 'function') {
                {
                    var componentName = getComponentName(fiber) || 'Unknown';
                    if (!warnedAboutMissingGetChildContext[componentName]) {
                        warnedAboutMissingGetChildContext[componentName] = true;
                        warning(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
                    }
                }
                return parentContext;
            }
            var childContext = void 0;
            {
                ReactDebugCurrentFiber.setCurrentPhase('getChildContext');
            }
            startPhaseTimer(fiber, 'getChildContext');
            childContext = instance.getChildContext();
            stopPhaseTimer();
            {
                ReactDebugCurrentFiber.setCurrentPhase(null);
            }
            for (var contextKey in childContext) {
                !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || 'Unknown', contextKey) : void 0;
            }
            {
                var name = getComponentName(fiber) || 'Unknown';
                checkPropTypes(childContextTypes, childContext, 'child context', name, 
                // In practice, there is one case in which we won't get a stack. It's when
                // somebody calls unstable_renderSubtreeIntoContainer() and we process
                // context from the parent component instance. The stack will be missing
                // because it's outside of the reconciliation, and so the pointer has not
                // been set. This is rare and doesn't matter. We'll also remove that API.
                ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
            }
            return _assign({}, parentContext, childContext);
        }
        function pushContextProvider(workInProgress) {
            if (!isContextProvider(workInProgress)) {
                return false;
            }
            var instance = workInProgress.stateNode;
            // We push the context as early as possible to ensure stack integrity.
            // If the instance does not exist yet, we will push null at first,
            // and replace it on the stack later when invalidating the context.
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
            // Remember the parent context so we can merge with it later.
            // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
            return true;
        }
        function invalidateContextProvider(workInProgress, didChange) {
            var instance = workInProgress.stateNode;
            !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            if (didChange) {
                // Merge parent and own context.
                // Skip this if we're not updating due to sCU.
                // This avoids unnecessarily recomputing memoized values.
                var mergedContext = processChildContext(workInProgress, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                // Replace the old (or empty) context with the new one.
                // It is important to unwind the context in the reverse order.
                pop(didPerformWorkStackCursor, workInProgress);
                pop(contextStackCursor, workInProgress);
                // Now push the new context and mark that it has changed.
                push(contextStackCursor, mergedContext, workInProgress);
                push(didPerformWorkStackCursor, didChange, workInProgress);
            }
            else {
                pop(didPerformWorkStackCursor, workInProgress);
                push(didPerformWorkStackCursor, didChange, workInProgress);
            }
        }
        function resetContext() {
            previousContext = emptyObject;
            contextStackCursor.current = emptyObject;
            didPerformWorkStackCursor.current = false;
        }
        function findCurrentUnmaskedContext(fiber) {
            // Currently this is only used with renderSubtreeIntoContainer; not sure if it
            // makes sense elsewhere
            !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            var node = fiber;
            while (node.tag !== HostRoot) {
                if (isContextProvider(node)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                var parent = node['return'];
                !parent ? invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                node = parent;
            }
            return node.stateNode.context;
        }
        var NoWork = 0; // TODO: Use an opaque type once ESLint et al support the syntax
        var Sync = 1;
        var Never = 2147483647; // Max int32: Math.pow(2, 31) - 1
        var UNIT_SIZE = 10;
        var MAGIC_NUMBER_OFFSET = 2;
        // 1 unit of expiration time represents 10ms.
        function msToExpirationTime(ms) {
            // Always add an offset so that we don't clash with the magic number for NoWork.
            return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
        }
        function expirationTimeToMs(expirationTime) {
            return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
        }
        function ceiling(num, precision) {
            return ((num / precision | 0) + 1) * precision;
        }
        function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
            return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
        }
        var NoContext = 0;
        var AsyncUpdates = 1;
        {
            var hasBadMapPolyfill = false;
            try {
                var nonExtensibleObject = Object.preventExtensions({});
                /* eslint-disable no-new */
                /* eslint-enable no-new */
            }
            catch (e) {
                // TODO: Consider warning about bad polyfills
                hasBadMapPolyfill = true;
            }
        }
        // A Fiber is work on a Component that needs to be done or was done. There can
        // be more than one per component.
        {
            var debugCounter = 1;
        }
        function FiberNode(tag, key, internalContextTag) {
            // Instance
            this.tag = tag;
            this.key = key;
            this.type = null;
            this.stateNode = null;
            // Fiber
            this['return'] = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = null;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.internalContextTag = internalContextTag;
            // Effects
            this.effectTag = NoEffect;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.expirationTime = NoWork;
            this.alternate = null;
            {
                this._debugID = debugCounter++;
                this._debugSource = null;
                this._debugOwner = null;
                this._debugIsCurrentlyTiming = false;
                if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
                    Object.preventExtensions(this);
                }
            }
        }
        // This is a constructor function, rather than a POJO constructor, still
        // please ensure we do the following:
        // 1) Nobody should add any instance methods on this. Instance methods can be
        //    more difficult to predict when they get optimized and they are almost
        //    never inlined properly in static compilers.
        // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
        //    always know when it is a fiber.
        // 3) We might want to experiment with using numeric keys since they are easier
        //    to optimize in a non-JIT environment.
        // 4) We can easily go from a constructor to a createFiber object literal if that
        //    is faster.
        // 5) It should be easy to port this to a C struct and keep a C implementation
        //    compatible.
        var createFiber = function (tag, key, internalContextTag) {
            // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
            return new FiberNode(tag, key, internalContextTag);
        };
        function shouldConstruct(Component) {
            return !!(Component.prototype && Component.prototype.isReactComponent);
        }
        // This is used to create an alternate fiber to do work on.
        function createWorkInProgress(current, pendingProps, expirationTime) {
            var workInProgress = current.alternate;
            if (workInProgress === null) {
                // We use a double buffering pooling technique because we know that we'll
                // only ever need at most two versions of a tree. We pool the "other" unused
                // node that we're free to reuse. This is lazily created to avoid allocating
                // extra objects for things that are never updated. It also allow us to
                // reclaim the extra memory if needed.
                workInProgress = createFiber(current.tag, current.key, current.internalContextTag);
                workInProgress.type = current.type;
                workInProgress.stateNode = current.stateNode;
                {
                    // DEV-only fields
                    workInProgress._debugID = current._debugID;
                    workInProgress._debugSource = current._debugSource;
                    workInProgress._debugOwner = current._debugOwner;
                }
                workInProgress.alternate = current;
                current.alternate = workInProgress;
            }
            else {
                // We already have an alternate.
                // Reset the effect tag.
                workInProgress.effectTag = NoEffect;
                // The effect list is no longer valid.
                workInProgress.nextEffect = null;
                workInProgress.firstEffect = null;
                workInProgress.lastEffect = null;
            }
            workInProgress.expirationTime = expirationTime;
            workInProgress.pendingProps = pendingProps;
            workInProgress.child = current.child;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue;
            // These will be overridden during the parent's reconciliation
            workInProgress.sibling = current.sibling;
            workInProgress.index = current.index;
            workInProgress.ref = current.ref;
            return workInProgress;
        }
        function createHostRootFiber() {
            var fiber = createFiber(HostRoot, null, NoContext);
            return fiber;
        }
        function createFiberFromElement(element, internalContextTag, expirationTime) {
            var owner = null;
            {
                owner = element._owner;
            }
            var fiber = void 0;
            var type = element.type, key = element.key;
            if (typeof type === 'function') {
                fiber = shouldConstruct(type) ? createFiber(ClassComponent, key, internalContextTag) : createFiber(IndeterminateComponent, key, internalContextTag);
                fiber.type = type;
                fiber.pendingProps = element.props;
            }
            else if (typeof type === 'string') {
                fiber = createFiber(HostComponent, key, internalContextTag);
                fiber.type = type;
                fiber.pendingProps = element.props;
            }
            else if (typeof type === 'object' && type !== null && typeof type.tag === 'number') {
                // Currently assumed to be a continuation and therefore is a fiber already.
                // TODO: The yield system is currently broken for updates in some cases.
                // The reified yield stores a fiber, but we don't know which fiber that is;
                // the current or a workInProgress? When the continuation gets rendered here
                // we don't know if we can reuse that fiber or if we need to clone it.
                // There is probably a clever way to restructure this.
                fiber = type;
                fiber.pendingProps = element.props;
            }
            else {
                var info = '';
                {
                    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner) : null;
                    if (ownerName) {
                        info += '\n\nCheck the render method of `' + ownerName + '`.';
                    }
                }
                invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
            }
            {
                fiber._debugSource = element._source;
                fiber._debugOwner = element._owner;
            }
            fiber.expirationTime = expirationTime;
            return fiber;
        }
        function createFiberFromFragment(elements, internalContextTag, expirationTime, key) {
            var fiber = createFiber(Fragment, key, internalContextTag);
            fiber.pendingProps = elements;
            fiber.expirationTime = expirationTime;
            return fiber;
        }
        function createFiberFromText(content, internalContextTag, expirationTime) {
            var fiber = createFiber(HostText, null, internalContextTag);
            fiber.pendingProps = content;
            fiber.expirationTime = expirationTime;
            return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, NoContext);
            fiber.type = 'DELETED';
            return fiber;
        }
        function createFiberFromCall(call, internalContextTag, expirationTime) {
            var fiber = createFiber(CallComponent, call.key, internalContextTag);
            fiber.type = call.handler;
            fiber.pendingProps = call;
            fiber.expirationTime = expirationTime;
            return fiber;
        }
        function createFiberFromReturn(returnNode, internalContextTag, expirationTime) {
            var fiber = createFiber(ReturnComponent, null, internalContextTag);
            fiber.expirationTime = expirationTime;
            return fiber;
        }
        function createFiberFromPortal(portal, internalContextTag, expirationTime) {
            var fiber = createFiber(HostPortal, portal.key, internalContextTag);
            fiber.pendingProps = portal.children || [];
            fiber.expirationTime = expirationTime;
            fiber.stateNode = {
                containerInfo: portal.containerInfo,
                pendingChildren: null,
                implementation: portal.implementation
            };
            return fiber;
        }
        function createFiberRoot(containerInfo, hydrate) {
            // Cyclic construction. This cheats the type system right now because
            // stateNode is any.
            var uninitializedFiber = createHostRootFiber();
            var root = {
                current: uninitializedFiber,
                containerInfo: containerInfo,
                pendingChildren: null,
                remainingExpirationTime: NoWork,
                isReadyForCommit: false,
                finishedWork: null,
                context: null,
                pendingContext: null,
                hydrate: hydrate,
                nextScheduledRoot: null
            };
            uninitializedFiber.stateNode = root;
            return root;
        }
        var onCommitFiberRoot = null;
        var onCommitFiberUnmount = null;
        var hasLoggedError = false;
        function catchErrors(fn) {
            return function (arg) {
                try {
                    return fn(arg);
                }
                catch (err) {
                    if (true && !hasLoggedError) {
                        hasLoggedError = true;
                        warning(false, 'React DevTools encountered an error: %s', err);
                    }
                }
            };
        }
        function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
                // No DevTools
                return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
                // This isn't a real property on the hook, but it can be set to opt out
                // of DevTools integration and associated warnings and logs.
                // https://github.com/facebook/react/issues/3877
                return true;
            }
            if (!hook.supportsFiber) {
                {
                    warning(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
                }
                // DevTools exists, even though it doesn't support Fiber.
                return true;
            }
            try {
                var rendererID = hook.inject(internals);
                // We have successfully injected, so now it is safe to set up hooks.
                onCommitFiberRoot = catchErrors(function (root) {
                    return hook.onCommitFiberRoot(rendererID, root);
                });
                onCommitFiberUnmount = catchErrors(function (fiber) {
                    return hook.onCommitFiberUnmount(rendererID, fiber);
                });
            }
            catch (err) {
                // Catch all errors because it is unsafe to throw during initialization.
                {
                    warning(false, 'React DevTools encountered an error: %s.', err);
                }
            }
            // DevTools exists
            return true;
        }
        function onCommitRoot(root) {
            if (typeof onCommitFiberRoot === 'function') {
                onCommitFiberRoot(root);
            }
        }
        function onCommitUnmount(fiber) {
            if (typeof onCommitFiberUnmount === 'function') {
                onCommitFiberUnmount(fiber);
            }
        }
        {
            var didWarnUpdateInsideUpdate = false;
        }
        // Callbacks are not validated until invocation
        // Singly linked-list of updates. When an update is scheduled, it is added to
        // the queue of the current fiber and the work-in-progress fiber. The two queues
        // are separate but they share a persistent structure.
        //
        // During reconciliation, updates are removed from the work-in-progress fiber,
        // but they remain on the current fiber. That ensures that if a work-in-progress
        // is aborted, the aborted updates are recovered by cloning from current.
        //
        // The work-in-progress queue is always a subset of the current queue.
        //
        // When the tree is committed, the work-in-progress becomes the current.
        function createUpdateQueue(baseState) {
            var queue = {
                baseState: baseState,
                expirationTime: NoWork,
                first: null,
                last: null,
                callbackList: null,
                hasForceUpdate: false,
                isInitialized: false
            };
            {
                queue.isProcessing = false;
            }
            return queue;
        }
        function insertUpdateIntoQueue(queue, update) {
            // Append the update to the end of the list.
            if (queue.last === null) {
                // Queue is empty
                queue.first = queue.last = update;
            }
            else {
                queue.last.next = update;
                queue.last = update;
            }
            if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {
                queue.expirationTime = update.expirationTime;
            }
        }
        function insertUpdateIntoFiber(fiber, update) {
            // We'll have at least one and at most two distinct update queues.
            var alternateFiber = fiber.alternate;
            var queue1 = fiber.updateQueue;
            if (queue1 === null) {
                // TODO: We don't know what the base state will be until we begin work.
                // It depends on which fiber is the next current. Initialize with an empty
                // base state, then set to the memoizedState when rendering. Not super
                // happy with this approach.
                queue1 = fiber.updateQueue = createUpdateQueue(null);
            }
            var queue2 = void 0;
            if (alternateFiber !== null) {
                queue2 = alternateFiber.updateQueue;
                if (queue2 === null) {
                    queue2 = alternateFiber.updateQueue = createUpdateQueue(null);
                }
            }
            else {
                queue2 = null;
            }
            queue2 = queue2 !== queue1 ? queue2 : null;
            // Warn if an update is scheduled from inside an updater function.
            {
                if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {
                    warning(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
                    didWarnUpdateInsideUpdate = true;
                }
            }
            // If there's only one queue, add the update to that queue and exit.
            if (queue2 === null) {
                insertUpdateIntoQueue(queue1, update);
                return;
            }
            // If either queue is empty, we need to add to both queues.
            if (queue1.last === null || queue2.last === null) {
                insertUpdateIntoQueue(queue1, update);
                insertUpdateIntoQueue(queue2, update);
                return;
            }
            // If both lists are not empty, the last update is the same for both lists
            // because of structural sharing. So, we should only append to one of
            // the lists.
            insertUpdateIntoQueue(queue1, update);
            // But we still need to update the `last` pointer of queue2.
            queue2.last = update;
        }
        function getUpdateExpirationTime(fiber) {
            if (fiber.tag !== ClassComponent && fiber.tag !== HostRoot) {
                return NoWork;
            }
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
                return NoWork;
            }
            return updateQueue.expirationTime;
        }
        function getStateFromUpdate(update, instance, prevState, props) {
            var partialState = update.partialState;
            if (typeof partialState === 'function') {
                var updateFn = partialState;
                // Invoke setState callback an extra time to help detect side-effects.
                if (debugRenderPhaseSideEffects) {
                    updateFn.call(instance, prevState, props);
                }
                return updateFn.call(instance, prevState, props);
            }
            else {
                return partialState;
            }
        }
        function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
            if (current !== null && current.updateQueue === queue) {
                // We need to create a work-in-progress queue, by cloning the current queue.
                var currentQueue = queue;
                queue = workInProgress.updateQueue = {
                    baseState: currentQueue.baseState,
                    expirationTime: currentQueue.expirationTime,
                    first: currentQueue.first,
                    last: currentQueue.last,
                    isInitialized: currentQueue.isInitialized,
                    // These fields are no longer valid because they were already committed.
                    // Reset them.
                    callbackList: null,
                    hasForceUpdate: false
                };
            }
            {
                // Set this flag so we can warn if setState is called inside the update
                // function of another setState.
                queue.isProcessing = true;
            }
            // Reset the remaining expiration time. If we skip over any updates, we'll
            // increase this accordingly.
            queue.expirationTime = NoWork;
            // TODO: We don't know what the base state will be until we begin work.
            // It depends on which fiber is the next current. Initialize with an empty
            // base state, then set to the memoizedState when rendering. Not super
            // happy with this approach.
            var state = void 0;
            if (queue.isInitialized) {
                state = queue.baseState;
            }
            else {
                state = queue.baseState = workInProgress.memoizedState;
                queue.isInitialized = true;
            }
            var dontMutatePrevState = true;
            var update = queue.first;
            var didSkip = false;
            while (update !== null) {
                var updateExpirationTime = update.expirationTime;
                if (updateExpirationTime > renderExpirationTime) {
                    // This update does not have sufficient priority. Skip it.
                    var remainingExpirationTime = queue.expirationTime;
                    if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {
                        // Update the remaining expiration time.
                        queue.expirationTime = updateExpirationTime;
                    }
                    if (!didSkip) {
                        didSkip = true;
                        queue.baseState = state;
                    }
                    // Continue to the next update.
                    update = update.next;
                    continue;
                }
                // This update does have sufficient priority.
                // If no previous updates were skipped, drop this update from the queue by
                // advancing the head of the list.
                if (!didSkip) {
                    queue.first = update.next;
                    if (queue.first === null) {
                        queue.last = null;
                    }
                }
                // Process the update
                var _partialState = void 0;
                if (update.isReplace) {
                    state = getStateFromUpdate(update, instance, state, props);
                    dontMutatePrevState = true;
                }
                else {
                    _partialState = getStateFromUpdate(update, instance, state, props);
                    if (_partialState) {
                        if (dontMutatePrevState) {
                            // $FlowFixMe: Idk how to type this properly.
                            state = _assign({}, state, _partialState);
                        }
                        else {
                            state = _assign(state, _partialState);
                        }
                        dontMutatePrevState = false;
                    }
                }
                if (update.isForced) {
                    queue.hasForceUpdate = true;
                }
                if (update.callback !== null) {
                    // Append to list of callbacks.
                    var _callbackList = queue.callbackList;
                    if (_callbackList === null) {
                        _callbackList = queue.callbackList = [];
                    }
                    _callbackList.push(update);
                }
                update = update.next;
            }
            if (queue.callbackList !== null) {
                workInProgress.effectTag |= Callback;
            }
            else if (queue.first === null && !queue.hasForceUpdate) {
                // The queue is empty. We can reset it.
                workInProgress.updateQueue = null;
            }
            if (!didSkip) {
                didSkip = true;
                queue.baseState = state;
            }
            {
                // No longer processing.
                queue.isProcessing = false;
            }
            return state;
        }
        function commitCallbacks(queue, context) {
            var callbackList = queue.callbackList;
            if (callbackList === null) {
                return;
            }
            // Set the list to null to make sure they don't get called more than once.
            queue.callbackList = null;
            for (var i = 0; i < callbackList.length; i++) {
                var update = callbackList[i];
                var _callback = update.callback;
                // This update might be processed again. Clear the callback so it's only
                // called once.
                update.callback = null;
                !(typeof _callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback) : void 0;
                _callback.call(context);
            }
        }
        var fakeInternalInstance = {};
        var isArray = Array.isArray;
        {
            var didWarnAboutStateAssignmentForComponent = {};
            var warnOnInvalidCallback = function (callback, callerName) {
                warning(callback === null || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
            };
            // This is so gross but it's at least non-critical and can be removed if
            // it causes problems. This is meant to give a nicer error message for
            // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
            // ...)) which otherwise throws a "_processChildContext is not a function"
            // exception.
            Object.defineProperty(fakeInternalInstance, '_processChildContext', {
                enumerable: false,
                value: function () {
                    invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
                }
            });
            Object.freeze(fakeInternalInstance);
        }
        var ReactFiberClassComponent = function (scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
            // Class component state updater
            var updater = {
                isMounted: isMounted,
                enqueueSetState: function (instance, partialState, callback) {
                    var fiber = get(instance);
                    callback = callback === undefined ? null : callback;
                    {
                        warnOnInvalidCallback(callback, 'setState');
                    }
                    var expirationTime = computeExpirationForFiber(fiber);
                    var update = {
                        expirationTime: expirationTime,
                        partialState: partialState,
                        callback: callback,
                        isReplace: false,
                        isForced: false,
                        nextCallback: null,
                        next: null
                    };
                    insertUpdateIntoFiber(fiber, update);
                    scheduleWork(fiber, expirationTime);
                },
                enqueueReplaceState: function (instance, state, callback) {
                    var fiber = get(instance);
                    callback = callback === undefined ? null : callback;
                    {
                        warnOnInvalidCallback(callback, 'replaceState');
                    }
                    var expirationTime = computeExpirationForFiber(fiber);
                    var update = {
                        expirationTime: expirationTime,
                        partialState: state,
                        callback: callback,
                        isReplace: true,
                        isForced: false,
                        nextCallback: null,
                        next: null
                    };
                    insertUpdateIntoFiber(fiber, update);
                    scheduleWork(fiber, expirationTime);
                },
                enqueueForceUpdate: function (instance, callback) {
                    var fiber = get(instance);
                    callback = callback === undefined ? null : callback;
                    {
                        warnOnInvalidCallback(callback, 'forceUpdate');
                    }
                    var expirationTime = computeExpirationForFiber(fiber);
                    var update = {
                        expirationTime: expirationTime,
                        partialState: null,
                        callback: callback,
                        isReplace: false,
                        isForced: true,
                        nextCallback: null,
                        next: null
                    };
                    insertUpdateIntoFiber(fiber, update);
                    scheduleWork(fiber, expirationTime);
                }
            };
            function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
                if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
                    // If the workInProgress already has an Update effect, return true
                    return true;
                }
                var instance = workInProgress.stateNode;
                var type = workInProgress.type;
                if (typeof instance.shouldComponentUpdate === 'function') {
                    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
                    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
                    stopPhaseTimer();
                    // Simulate an async bailout/interruption by invoking lifecycle twice.
                    if (debugRenderPhaseSideEffects) {
                        instance.shouldComponentUpdate(newProps, newState, newContext);
                    }
                    {
                        warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(workInProgress) || 'Unknown');
                    }
                    return shouldUpdate;
                }
                if (type.prototype && type.prototype.isPureReactComponent) {
                    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
                }
                return true;
            }
            function checkClassInstance(workInProgress) {
                var instance = workInProgress.stateNode;
                var type = workInProgress.type;
                {
                    var name = getComponentName(workInProgress);
                    var renderPresent = instance.render;
                    if (!renderPresent) {
                        if (type.prototype && typeof type.prototype.render === 'function') {
                            warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
                        }
                        else {
                            warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
                        }
                    }
                    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
                    warning(noGetInitialStateOnES6, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
                    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
                    warning(noGetDefaultPropsOnES6, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
                    var noInstancePropTypes = !instance.propTypes;
                    warning(noInstancePropTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
                    var noInstanceContextTypes = !instance.contextTypes;
                    warning(noInstanceContextTypes, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
                    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
                    warning(noComponentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
                    if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
                        warning(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(workInProgress) || 'A pure component');
                    }
                    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
                    warning(noComponentDidUnmount, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
                    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
                    warning(noComponentDidReceiveProps, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
                    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
                    warning(noComponentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
                    var hasMutatedProps = instance.props !== workInProgress.pendingProps;
                    warning(instance.props === undefined || !hasMutatedProps, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
                    var noInstanceDefaultProps = !instance.defaultProps;
                    warning(noInstanceDefaultProps, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
                }
                var state = instance.state;
                if (state && (typeof state !== 'object' || isArray(state))) {
                    warning(false, '%s.state: must be set to an object or null', getComponentName(workInProgress));
                }
                if (typeof instance.getChildContext === 'function') {
                    warning(typeof workInProgress.type.childContextTypes === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', getComponentName(workInProgress));
                }
            }
            function resetInputPointers(workInProgress, instance) {
                instance.props = workInProgress.memoizedProps;
                instance.state = workInProgress.memoizedState;
            }
            function adoptClassInstance(workInProgress, instance) {
                instance.updater = updater;
                workInProgress.stateNode = instance;
                // The instance needs access to the fiber so that it can schedule updates
                set(instance, workInProgress);
                {
                    instance._reactInternalInstance = fakeInternalInstance;
                }
            }
            function constructClassInstance(workInProgress, props) {
                var ctor = workInProgress.type;
                var unmaskedContext = getUnmaskedContext(workInProgress);
                var needsContext = isContextConsumer(workInProgress);
                var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
                var instance = new ctor(props, context);
                adoptClassInstance(workInProgress, instance);
                // Cache unmasked context so we can avoid recreating masked context unless necessary.
                // ReactFiberContext usually updates this cache but can't for newly-created instances.
                if (needsContext) {
                    cacheContext(workInProgress, unmaskedContext, context);
                }
                return instance;
            }
            function callComponentWillMount(workInProgress, instance) {
                startPhaseTimer(workInProgress, 'componentWillMount');
                var oldState = instance.state;
                instance.componentWillMount();
                stopPhaseTimer();
                // Simulate an async bailout/interruption by invoking lifecycle twice.
                if (debugRenderPhaseSideEffects) {
                    instance.componentWillMount();
                }
                if (oldState !== instance.state) {
                    {
                        warning(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress));
                    }
                    updater.enqueueReplaceState(instance, instance.state, null);
                }
            }
            function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
                startPhaseTimer(workInProgress, 'componentWillReceiveProps');
                var oldState = instance.state;
                instance.componentWillReceiveProps(newProps, newContext);
                stopPhaseTimer();
                // Simulate an async bailout/interruption by invoking lifecycle twice.
                if (debugRenderPhaseSideEffects) {
                    instance.componentWillReceiveProps(newProps, newContext);
                }
                if (instance.state !== oldState) {
                    {
                        var componentName = getComponentName(workInProgress) || 'Component';
                        if (!didWarnAboutStateAssignmentForComponent[componentName]) {
                            warning(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
                            didWarnAboutStateAssignmentForComponent[componentName] = true;
                        }
                    }
                    updater.enqueueReplaceState(instance, instance.state, null);
                }
            }
            // Invokes the mount life-cycles on a previously never rendered instance.
            function mountClassInstance(workInProgress, renderExpirationTime) {
                var current = workInProgress.alternate;
                {
                    checkClassInstance(workInProgress);
                }
                var instance = workInProgress.stateNode;
                var state = instance.state || null;
                var props = workInProgress.pendingProps;
                !props ? invariant(false, 'There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                var unmaskedContext = getUnmaskedContext(workInProgress);
                instance.props = props;
                instance.state = workInProgress.memoizedState = state;
                instance.refs = emptyObject;
                instance.context = getMaskedContext(workInProgress, unmaskedContext);
                if (enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {
                    workInProgress.internalContextTag |= AsyncUpdates;
                }
                if (typeof instance.componentWillMount === 'function') {
                    callComponentWillMount(workInProgress, instance);
                    // If we had additional state updates during this life-cycle, let's
                    // process them now.
                    var updateQueue = workInProgress.updateQueue;
                    if (updateQueue !== null) {
                        instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);
                    }
                }
                if (typeof instance.componentDidMount === 'function') {
                    workInProgress.effectTag |= Update;
                }
            }
            // Called on a preexisting class instance. Returns false if a resumed render
            // could be reused.
            // function resumeMountClassInstance(
            //   workInProgress: Fiber,
            //   priorityLevel: PriorityLevel,
            // ): boolean {
            //   const instance = workInProgress.stateNode;
            //   resetInputPointers(workInProgress, instance);
            //   let newState = workInProgress.memoizedState;
            //   let newProps = workInProgress.pendingProps;
            //   if (!newProps) {
            //     // If there isn't any new props, then we'll reuse the memoized props.
            //     // This could be from already completed work.
            //     newProps = workInProgress.memoizedProps;
            //     invariant(
            //       newProps != null,
            //       'There should always be pending or memoized props. This error is ' +
            //         'likely caused by a bug in React. Please file an issue.',
            //     );
            //   }
            //   const newUnmaskedContext = getUnmaskedContext(workInProgress);
            //   const newContext = getMaskedContext(workInProgress, newUnmaskedContext);
            //   const oldContext = instance.context;
            //   const oldProps = workInProgress.memoizedProps;
            //   if (
            //     typeof instance.componentWillReceiveProps === 'function' &&
            //     (oldProps !== newProps || oldContext !== newContext)
            //   ) {
            //     callComponentWillReceiveProps(
            //       workInProgress,
            //       instance,
            //       newProps,
            //       newContext,
            //     );
            //   }
            //   // Process the update queue before calling shouldComponentUpdate
            //   const updateQueue = workInProgress.updateQueue;
            //   if (updateQueue !== null) {
            //     newState = processUpdateQueue(
            //       workInProgress,
            //       updateQueue,
            //       instance,
            //       newState,
            //       newProps,
            //       priorityLevel,
            //     );
            //   }
            //   // TODO: Should we deal with a setState that happened after the last
            //   // componentWillMount and before this componentWillMount? Probably
            //   // unsupported anyway.
            //   if (
            //     !checkShouldComponentUpdate(
            //       workInProgress,
            //       workInProgress.memoizedProps,
            //       newProps,
            //       workInProgress.memoizedState,
            //       newState,
            //       newContext,
            //     )
            //   ) {
            //     // Update the existing instance's state, props, and context pointers even
            //     // though we're bailing out.
            //     instance.props = newProps;
            //     instance.state = newState;
            //     instance.context = newContext;
            //     return false;
            //   }
            //   // Update the input pointers now so that they are correct when we call
            //   // componentWillMount
            //   instance.props = newProps;
            //   instance.state = newState;
            //   instance.context = newContext;
            //   if (typeof instance.componentWillMount === 'function') {
            //     callComponentWillMount(workInProgress, instance);
            //     // componentWillMount may have called setState. Process the update queue.
            //     const newUpdateQueue = workInProgress.updateQueue;
            //     if (newUpdateQueue !== null) {
            //       newState = processUpdateQueue(
            //         workInProgress,
            //         newUpdateQueue,
            //         instance,
            //         newState,
            //         newProps,
            //         priorityLevel,
            //       );
            //     }
            //   }
            //   if (typeof instance.componentDidMount === 'function') {
            //     workInProgress.effectTag |= Update;
            //   }
            //   instance.state = newState;
            //   return true;
            // }
            // Invokes the update life-cycles and returns false if it shouldn't rerender.
            function updateClassInstance(current, workInProgress, renderExpirationTime) {
                var instance = workInProgress.stateNode;
                resetInputPointers(workInProgress, instance);
                var oldProps = workInProgress.memoizedProps;
                var newProps = workInProgress.pendingProps;
                if (!newProps) {
                    // If there aren't any new props, then we'll reuse the memoized props.
                    // This could be from already completed work.
                    newProps = oldProps;
                    !(newProps != null) ? invariant(false, 'There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                }
                var oldContext = instance.context;
                var newUnmaskedContext = getUnmaskedContext(workInProgress);
                var newContext = getMaskedContext(workInProgress, newUnmaskedContext);
                // Note: During these life-cycles, instance.props/instance.state are what
                // ever the previously attempted to render - not the "current". However,
                // during componentDidUpdate we pass the "current" props.
                if (typeof instance.componentWillReceiveProps === 'function' && (oldProps !== newProps || oldContext !== newContext)) {
                    callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
                }
                // Compute the next state using the memoized state and the update queue.
                var oldState = workInProgress.memoizedState;
                // TODO: Previous state can be null.
                var newState = void 0;
                if (workInProgress.updateQueue !== null) {
                    newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
                }
                else {
                    newState = oldState;
                }
                if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
                    // If an update was already in progress, we should schedule an Update
                    // effect even though we're bailing out, so that cWU/cDU are called.
                    if (typeof instance.componentDidUpdate === 'function') {
                        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                            workInProgress.effectTag |= Update;
                        }
                    }
                    return false;
                }
                var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);
                if (shouldUpdate) {
                    if (typeof instance.componentWillUpdate === 'function') {
                        startPhaseTimer(workInProgress, 'componentWillUpdate');
                        instance.componentWillUpdate(newProps, newState, newContext);
                        stopPhaseTimer();
                        // Simulate an async bailout/interruption by invoking lifecycle twice.
                        if (debugRenderPhaseSideEffects) {
                            instance.componentWillUpdate(newProps, newState, newContext);
                        }
                    }
                    if (typeof instance.componentDidUpdate === 'function') {
                        workInProgress.effectTag |= Update;
                    }
                }
                else {
                    // If an update was already in progress, we should schedule an Update
                    // effect even though we're bailing out, so that cWU/cDU are called.
                    if (typeof instance.componentDidUpdate === 'function') {
                        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                            workInProgress.effectTag |= Update;
                        }
                    }
                    // If shouldComponentUpdate returned false, we should still update the
                    // memoized props/state to indicate that this work can be reused.
                    memoizeProps(workInProgress, newProps);
                    memoizeState(workInProgress, newState);
                }
                // Update the existing instance's state, props, and context pointers even
                // if shouldComponentUpdate returns false.
                instance.props = newProps;
                instance.state = newState;
                instance.context = newContext;
                return shouldUpdate;
            }
            return {
                adoptClassInstance: adoptClassInstance,
                constructClassInstance: constructClassInstance,
                mountClassInstance: mountClassInstance,
                // resumeMountClassInstance,
                updateClassInstance: updateClassInstance
            };
        };
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.
        var hasSymbol = typeof Symbol === 'function' && Symbol['for'];
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
        var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
        var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';
        function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable === 'undefined') {
                return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === 'function') {
                return maybeIterator;
            }
            return null;
        }
        var getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
        {
            var didWarnAboutMaps = false;
            /**
             * Warn if there's no key explicitly set on dynamic arrays of children or
             * object keys are not valid. This allows us to keep track of children between
             * updates.
             */
            var ownerHasKeyUseWarning = {};
            var ownerHasFunctionTypeWarning = {};
            var warnForMissingKey = function (child) {
                if (child === null || typeof child !== 'object') {
                    return;
                }
                if (!child._store || child._store.validated || child.key != null) {
                    return;
                }
                !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                child._store.validated = true;
                var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum$1() || '');
                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                    return;
                }
                ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                warning(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum$1());
            };
        }
        var isArray$1 = Array.isArray;
        function coerceRef(current, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== 'function') {
                if (element._owner) {
                    var owner = element._owner;
                    var inst = void 0;
                    if (owner) {
                        var ownerFiber = owner;
                        !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
                        inst = ownerFiber.stateNode;
                    }
                    !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
                    var stringRef = '' + mixedRef;
                    // Check if previous string ref matches new string ref
                    if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
                        return current.ref;
                    }
                    var ref = function (value) {
                        var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
                        if (value === null) {
                            delete refs[stringRef];
                        }
                        else {
                            refs[stringRef] = value;
                        }
                    };
                    ref._stringRef = stringRef;
                    return ref;
                }
                else {
                    !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function or a string.') : void 0;
                    !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).', mixedRef) : void 0;
                }
            }
            return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== 'textarea') {
                var addendum = '';
                {
                    addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum$1() || '');
                }
                invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
            }
        }
        function warnOnFunctionType() {
            var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + (getCurrentFiberStackAddendum$1() || '');
            if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
                return;
            }
            ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
            warning(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum$1() || '');
        }
        // This wrapper function exists because I expect to clone the code in each path
        // to be able to optimize each path individually by branching early. This needs
        // a compiler or we can do it manually. Helpers that don't need this branching
        // live outside of this function.
        function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
                if (!shouldTrackSideEffects) {
                    // Noop.
                    return;
                }
                // Deletions are added in reversed order so we add it to the front.
                // At this point, the return fiber's effect list is empty except for
                // deletions, so we can just append the deletion to the list. The remaining
                // effects aren't added until the complete phase. Once we implement
                // resuming, this may not be true.
                var last = returnFiber.lastEffect;
                if (last !== null) {
                    last.nextEffect = childToDelete;
                    returnFiber.lastEffect = childToDelete;
                }
                else {
                    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                }
                childToDelete.nextEffect = null;
                childToDelete.effectTag = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
                if (!shouldTrackSideEffects) {
                    // Noop.
                    return null;
                }
                // TODO: For the shouldClone case, this could be micro-optimized a bit by
                // assuming that after the first child we've already added everything.
                var childToDelete = currentFirstChild;
                while (childToDelete !== null) {
                    deleteChild(returnFiber, childToDelete);
                    childToDelete = childToDelete.sibling;
                }
                return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
                // Add the remaining children to a temporary map so that we can find them by
                // keys quickly. Implicit (null) keys get added to this set with their index
                var existingChildren = new Map();
                var existingChild = currentFirstChild;
                while (existingChild !== null) {
                    if (existingChild.key !== null) {
                        existingChildren.set(existingChild.key, existingChild);
                    }
                    else {
                        existingChildren.set(existingChild.index, existingChild);
                    }
                    existingChild = existingChild.sibling;
                }
                return existingChildren;
            }
            function useFiber(fiber, pendingProps, expirationTime) {
                // We currently set sibling to null and index to 0 here because it is easy
                // to forget to do before returning it. E.g. for the single child case.
                var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
                clone.index = 0;
                clone.sibling = null;
                return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
                newFiber.index = newIndex;
                if (!shouldTrackSideEffects) {
                    // Noop.
                    return lastPlacedIndex;
                }
                var current = newFiber.alternate;
                if (current !== null) {
                    var oldIndex = current.index;
                    if (oldIndex < lastPlacedIndex) {
                        // This is a move.
                        newFiber.effectTag = Placement;
                        return lastPlacedIndex;
                    }
                    else {
                        // This item can stay in place.
                        return oldIndex;
                    }
                }
                else {
                    // This is an insertion.
                    newFiber.effectTag = Placement;
                    return lastPlacedIndex;
                }
            }
            function placeSingleChild(newFiber) {
                // This is simpler for the single child case. We only need to do a
                // placement for inserting new children.
                if (shouldTrackSideEffects && newFiber.alternate === null) {
                    newFiber.effectTag = Placement;
                }
                return newFiber;
            }
            function updateTextNode(returnFiber, current, textContent, expirationTime) {
                if (current === null || current.tag !== HostText) {
                    // Insert
                    var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
                    created['return'] = returnFiber;
                    return created;
                }
                else {
                    // Update
                    var existing = useFiber(current, textContent, expirationTime);
                    existing['return'] = returnFiber;
                    return existing;
                }
            }
            function updateElement(returnFiber, current, element, expirationTime) {
                if (current !== null && current.type === element.type) {
                    // Move based on index
                    var existing = useFiber(current, element.props, expirationTime);
                    existing.ref = coerceRef(current, element);
                    existing['return'] = returnFiber;
                    {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                    }
                    return existing;
                }
                else {
                    // Insert
                    var created = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
                    created.ref = coerceRef(current, element);
                    created['return'] = returnFiber;
                    return created;
                }
            }
            function updateCall(returnFiber, current, call, expirationTime) {
                // TODO: Should this also compare handler to determine whether to reuse?
                if (current === null || current.tag !== CallComponent) {
                    // Insert
                    var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
                    created['return'] = returnFiber;
                    return created;
                }
                else {
                    // Move based on index
                    var existing = useFiber(current, call, expirationTime);
                    existing['return'] = returnFiber;
                    return existing;
                }
            }
            function updateReturn(returnFiber, current, returnNode, expirationTime) {
                if (current === null || current.tag !== ReturnComponent) {
                    // Insert
                    var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
                    created.type = returnNode.value;
                    created['return'] = returnFiber;
                    return created;
                }
                else {
                    // Move based on index
                    var existing = useFiber(current, null, expirationTime);
                    existing.type = returnNode.value;
                    existing['return'] = returnFiber;
                    return existing;
                }
            }
            function updatePortal(returnFiber, current, portal, expirationTime) {
                if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                    // Insert
                    var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
                    created['return'] = returnFiber;
                    return created;
                }
                else {
                    // Update
                    var existing = useFiber(current, portal.children || [], expirationTime);
                    existing['return'] = returnFiber;
                    return existing;
                }
            }
            function updateFragment(returnFiber, current, fragment, expirationTime, key) {
                if (current === null || current.tag !== Fragment) {
                    // Insert
                    var created = createFiberFromFragment(fragment, returnFiber.internalContextTag, expirationTime, key);
                    created['return'] = returnFiber;
                    return created;
                }
                else {
                    // Update
                    var existing = useFiber(current, fragment, expirationTime);
                    existing['return'] = returnFiber;
                    return existing;
                }
            }
            function createChild(returnFiber, newChild, expirationTime) {
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                    // Text nodes don't have keys. If the previous node is implicitly keyed
                    // we can continue to replace it without aborting even if it is not a text
                    // node.
                    var created = createFiberFromText('' + newChild, returnFiber.internalContextTag, expirationTime);
                    created['return'] = returnFiber;
                    return created;
                }
                if (typeof newChild === 'object' && newChild !== null) {
                    switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                            {
                                if (newChild.type === REACT_FRAGMENT_TYPE) {
                                    var _created = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key);
                                    _created['return'] = returnFiber;
                                    return _created;
                                }
                                else {
                                    var _created2 = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime);
                                    _created2.ref = coerceRef(null, newChild);
                                    _created2['return'] = returnFiber;
                                    return _created2;
                                }
                            }
                        case REACT_CALL_TYPE:
                            {
                                var _created3 = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime);
                                _created3['return'] = returnFiber;
                                return _created3;
                            }
                        case REACT_RETURN_TYPE:
                            {
                                var _created4 = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime);
                                _created4.type = newChild.value;
                                _created4['return'] = returnFiber;
                                return _created4;
                            }
                        case REACT_PORTAL_TYPE:
                            {
                                var _created5 = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime);
                                _created5['return'] = returnFiber;
                                return _created5;
                            }
                    }
                    if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        var _created6 = createFiberFromFragment(newChild, returnFiber.internalContextTag, expirationTime, null);
                        _created6['return'] = returnFiber;
                        return _created6;
                    }
                    throwOnInvalidObjectType(returnFiber, newChild);
                }
                {
                    if (typeof newChild === 'function') {
                        warnOnFunctionType();
                    }
                }
                return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
                // Update the fiber if the keys match, otherwise return null.
                var key = oldFiber !== null ? oldFiber.key : null;
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                    // Text nodes don't have keys. If the previous node is implicitly keyed
                    // we can continue to replace it without aborting even if it is not a text
                    // node.
                    if (key !== null) {
                        return null;
                    }
                    return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
                }
                if (typeof newChild === 'object' && newChild !== null) {
                    switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                            {
                                if (newChild.key === key) {
                                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                                        return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                                    }
                                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                                }
                                else {
                                    return null;
                                }
                            }
                        case REACT_CALL_TYPE:
                            {
                                if (newChild.key === key) {
                                    return updateCall(returnFiber, oldFiber, newChild, expirationTime);
                                }
                                else {
                                    return null;
                                }
                            }
                        case REACT_RETURN_TYPE:
                            {
                                // Returns don't have keys. If the previous node is implicitly keyed
                                // we can continue to replace it without aborting even if it is not a
                                // yield.
                                if (key === null) {
                                    return updateReturn(returnFiber, oldFiber, newChild, expirationTime);
                                }
                                else {
                                    return null;
                                }
                            }
                        case REACT_PORTAL_TYPE:
                            {
                                if (newChild.key === key) {
                                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                                }
                                else {
                                    return null;
                                }
                            }
                    }
                    if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        if (key !== null) {
                            return null;
                        }
                        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
                    }
                    throwOnInvalidObjectType(returnFiber, newChild);
                }
                {
                    if (typeof newChild === 'function') {
                        warnOnFunctionType();
                    }
                }
                return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                    // Text nodes don't have keys, so we neither have to check the old nor
                    // new node for the key. If both are text nodes, they match.
                    var matchedFiber = existingChildren.get(newIdx) || null;
                    return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
                }
                if (typeof newChild === 'object' && newChild !== null) {
                    switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                            {
                                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                if (newChild.type === REACT_FRAGMENT_TYPE) {
                                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                                }
                                return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                            }
                        case REACT_CALL_TYPE:
                            {
                                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                return updateCall(returnFiber, _matchedFiber2, newChild, expirationTime);
                            }
                        case REACT_RETURN_TYPE:
                            {
                                // Returns don't have keys, so we neither have to check the old nor
                                // new node for the key. If both are returns, they match.
                                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                                return updateReturn(returnFiber, _matchedFiber3, newChild, expirationTime);
                            }
                        case REACT_PORTAL_TYPE:
                            {
                                var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                return updatePortal(returnFiber, _matchedFiber4, newChild, expirationTime);
                            }
                    }
                    if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        var _matchedFiber5 = existingChildren.get(newIdx) || null;
                        return updateFragment(returnFiber, _matchedFiber5, newChild, expirationTime, null);
                    }
                    throwOnInvalidObjectType(returnFiber, newChild);
                }
                {
                    if (typeof newChild === 'function') {
                        warnOnFunctionType();
                    }
                }
                return null;
            }
            /**
             * Warns if there is a duplicate or missing key
             */
            function warnOnInvalidKey(child, knownKeys) {
                {
                    if (typeof child !== 'object' || child === null) {
                        return knownKeys;
                    }
                    switch (child.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                        case REACT_CALL_TYPE:
                        case REACT_PORTAL_TYPE:
                            warnForMissingKey(child);
                            var key = child.key;
                            if (typeof key !== 'string') {
                                break;
                            }
                            if (knownKeys === null) {
                                knownKeys = new Set();
                                knownKeys.add(key);
                                break;
                            }
                            if (!knownKeys.has(key)) {
                                knownKeys.add(key);
                                break;
                            }
                            warning(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum$1());
                            break;
                        default:
                            break;
                    }
                }
                return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
                // This algorithm can't optimize by searching from boths ends since we
                // don't have backpointers on fibers. I'm trying to see how far we can get
                // with that model. If it ends up not being worth the tradeoffs, we can
                // add it later.
                // Even with a two ended optimization, we'd want to optimize for the case
                // where there are few changes and brute force the comparison instead of
                // going for the Map. It'd like to explore hitting that path first in
                // forward-only mode and only go for the Map once we notice that we need
                // lots of look ahead. This doesn't handle reversal as well as two ended
                // search but that's unusual. Besides, for the two ended optimization to
                // work on Iterables, we'd need to copy the whole set.
                // In this first iteration, we'll just live with hitting the bad case
                // (adding everything to a Map) in for every insert/move.
                // If you change this code, also update reconcileChildrenIterator() which
                // uses the same algorithm.
                {
                    // First, validate keys.
                    var knownKeys = null;
                    for (var i = 0; i < newChildren.length; i++) {
                        var child = newChildren[i];
                        knownKeys = warnOnInvalidKey(child, knownKeys);
                    }
                }
                var resultingFirstChild = null;
                var previousNewFiber = null;
                var oldFiber = currentFirstChild;
                var lastPlacedIndex = 0;
                var newIdx = 0;
                var nextOldFiber = null;
                for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                    if (oldFiber.index > newIdx) {
                        nextOldFiber = oldFiber;
                        oldFiber = null;
                    }
                    else {
                        nextOldFiber = oldFiber.sibling;
                    }
                    var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
                    if (newFiber === null) {
                        // TODO: This breaks on empty slots like null children. That's
                        // unfortunate because it triggers the slow path all the time. We need
                        // a better way to communicate whether this was a miss or null,
                        // boolean, undefined, etc.
                        if (oldFiber === null) {
                            oldFiber = nextOldFiber;
                        }
                        break;
                    }
                    if (shouldTrackSideEffects) {
                        if (oldFiber && newFiber.alternate === null) {
                            // We matched the slot, but we didn't reuse the existing fiber, so we
                            // need to delete the existing child.
                            deleteChild(returnFiber, oldFiber);
                        }
                    }
                    lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                        // TODO: Move out of the loop. This only happens for the first run.
                        resultingFirstChild = newFiber;
                    }
                    else {
                        // TODO: Defer siblings if we're not at the right index for this slot.
                        // I.e. if we had null values before, then we want to defer this
                        // for each null value. However, we also don't want to call updateSlot
                        // with the previous one.
                        previousNewFiber.sibling = newFiber;
                    }
                    previousNewFiber = newFiber;
                    oldFiber = nextOldFiber;
                }
                if (newIdx === newChildren.length) {
                    // We've reached the end of the new children. We can delete the rest.
                    deleteRemainingChildren(returnFiber, oldFiber);
                    return resultingFirstChild;
                }
                if (oldFiber === null) {
                    // If we don't have any more existing children we can choose a fast path
                    // since the rest will all be insertions.
                    for (; newIdx < newChildren.length; newIdx++) {
                        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                        if (!_newFiber) {
                            continue;
                        }
                        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                        if (previousNewFiber === null) {
                            // TODO: Move out of the loop. This only happens for the first run.
                            resultingFirstChild = _newFiber;
                        }
                        else {
                            previousNewFiber.sibling = _newFiber;
                        }
                        previousNewFiber = _newFiber;
                    }
                    return resultingFirstChild;
                }
                // Add all children to a key map for quick lookups.
                var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                // Keep scanning and use the map to restore deleted items as moves.
                for (; newIdx < newChildren.length; newIdx++) {
                    var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
                    if (_newFiber2) {
                        if (shouldTrackSideEffects) {
                            if (_newFiber2.alternate !== null) {
                                // The new fiber is a work in progress, but if there exists a
                                // current, that means that we reused the fiber. We need to delete
                                // it from the child list so that we don't add it to the deletion
                                // list.
                                existingChildren['delete'](_newFiber2.key === null ? newIdx : _newFiber2.key);
                            }
                        }
                        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                        if (previousNewFiber === null) {
                            resultingFirstChild = _newFiber2;
                        }
                        else {
                            previousNewFiber.sibling = _newFiber2;
                        }
                        previousNewFiber = _newFiber2;
                    }
                }
                if (shouldTrackSideEffects) {
                    // Any existing children that weren't consumed above were deleted. We need
                    // to add them to the deletion list.
                    existingChildren.forEach(function (child) {
                        return deleteChild(returnFiber, child);
                    });
                }
                return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
                // This is the same implementation as reconcileChildrenArray(),
                // but using the iterator instead.
                var iteratorFn = getIteratorFn(newChildrenIterable);
                !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                {
                    // Warn about using Maps as children
                    if (typeof newChildrenIterable.entries === 'function') {
                        var possibleMap = newChildrenIterable;
                        if (possibleMap.entries === iteratorFn) {
                            warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum$1());
                            didWarnAboutMaps = true;
                        }
                    }
                    // First, validate keys.
                    // We'll get a different iterator later for the main pass.
                    var _newChildren = iteratorFn.call(newChildrenIterable);
                    if (_newChildren) {
                        var knownKeys = null;
                        var _step = _newChildren.next();
                        for (; !_step.done; _step = _newChildren.next()) {
                            var child = _step.value;
                            knownKeys = warnOnInvalidKey(child, knownKeys);
                        }
                    }
                }
                var newChildren = iteratorFn.call(newChildrenIterable);
                !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;
                var resultingFirstChild = null;
                var previousNewFiber = null;
                var oldFiber = currentFirstChild;
                var lastPlacedIndex = 0;
                var newIdx = 0;
                var nextOldFiber = null;
                var step = newChildren.next();
                for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                    if (oldFiber.index > newIdx) {
                        nextOldFiber = oldFiber;
                        oldFiber = null;
                    }
                    else {
                        nextOldFiber = oldFiber.sibling;
                    }
                    var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
                    if (newFiber === null) {
                        // TODO: This breaks on empty slots like null children. That's
                        // unfortunate because it triggers the slow path all the time. We need
                        // a better way to communicate whether this was a miss or null,
                        // boolean, undefined, etc.
                        if (!oldFiber) {
                            oldFiber = nextOldFiber;
                        }
                        break;
                    }
                    if (shouldTrackSideEffects) {
                        if (oldFiber && newFiber.alternate === null) {
                            // We matched the slot, but we didn't reuse the existing fiber, so we
                            // need to delete the existing child.
                            deleteChild(returnFiber, oldFiber);
                        }
                    }
                    lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                        // TODO: Move out of the loop. This only happens for the first run.
                        resultingFirstChild = newFiber;
                    }
                    else {
                        // TODO: Defer siblings if we're not at the right index for this slot.
                        // I.e. if we had null values before, then we want to defer this
                        // for each null value. However, we also don't want to call updateSlot
                        // with the previous one.
                        previousNewFiber.sibling = newFiber;
                    }
                    previousNewFiber = newFiber;
                    oldFiber = nextOldFiber;
                }
                if (step.done) {
                    // We've reached the end of the new children. We can delete the rest.
                    deleteRemainingChildren(returnFiber, oldFiber);
                    return resultingFirstChild;
                }
                if (oldFiber === null) {
                    // If we don't have any more existing children we can choose a fast path
                    // since the rest will all be insertions.
                    for (; !step.done; newIdx++, step = newChildren.next()) {
                        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                        if (_newFiber3 === null) {
                            continue;
                        }
                        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                        if (previousNewFiber === null) {
                            // TODO: Move out of the loop. This only happens for the first run.
                            resultingFirstChild = _newFiber3;
                        }
                        else {
                            previousNewFiber.sibling = _newFiber3;
                        }
                        previousNewFiber = _newFiber3;
                    }
                    return resultingFirstChild;
                }
                // Add all children to a key map for quick lookups.
                var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                // Keep scanning and use the map to restore deleted items as moves.
                for (; !step.done; newIdx++, step = newChildren.next()) {
                    var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
                    if (_newFiber4 !== null) {
                        if (shouldTrackSideEffects) {
                            if (_newFiber4.alternate !== null) {
                                // The new fiber is a work in progress, but if there exists a
                                // current, that means that we reused the fiber. We need to delete
                                // it from the child list so that we don't add it to the deletion
                                // list.
                                existingChildren['delete'](_newFiber4.key === null ? newIdx : _newFiber4.key);
                            }
                        }
                        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                        if (previousNewFiber === null) {
                            resultingFirstChild = _newFiber4;
                        }
                        else {
                            previousNewFiber.sibling = _newFiber4;
                        }
                        previousNewFiber = _newFiber4;
                    }
                }
                if (shouldTrackSideEffects) {
                    // Any existing children that weren't consumed above were deleted. We need
                    // to add them to the deletion list.
                    existingChildren.forEach(function (child) {
                        return deleteChild(returnFiber, child);
                    });
                }
                return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
                // There's no need to check for keys on text nodes since we don't have a
                // way to define them.
                if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                    // We already have an existing node so let's just update it and delete
                    // the rest.
                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                    var existing = useFiber(currentFirstChild, textContent, expirationTime);
                    existing['return'] = returnFiber;
                    return existing;
                }
                // The existing first child is not a text node so we need to create one
                // and delete the existing ones.
                deleteRemainingChildren(returnFiber, currentFirstChild);
                var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
                created['return'] = returnFiber;
                return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
                var key = element.key;
                var child = currentFirstChild;
                while (child !== null) {
                    // TODO: If key === null and child.key === null, then this only applies to
                    // the first item in the list.
                    if (child.key === key) {
                        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
                            existing.ref = coerceRef(child, element);
                            existing['return'] = returnFiber;
                            {
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                            }
                            return existing;
                        }
                        else {
                            deleteRemainingChildren(returnFiber, child);
                            break;
                        }
                    }
                    else {
                        deleteChild(returnFiber, child);
                    }
                    child = child.sibling;
                }
                if (element.type === REACT_FRAGMENT_TYPE) {
                    var created = createFiberFromFragment(element.props.children, returnFiber.internalContextTag, expirationTime, element.key);
                    created['return'] = returnFiber;
                    return created;
                }
                else {
                    var _created7 = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
                    _created7.ref = coerceRef(currentFirstChild, element);
                    _created7['return'] = returnFiber;
                    return _created7;
                }
            }
            function reconcileSingleCall(returnFiber, currentFirstChild, call, expirationTime) {
                var key = call.key;
                var child = currentFirstChild;
                while (child !== null) {
                    // TODO: If key === null and child.key === null, then this only applies to
                    // the first item in the list.
                    if (child.key === key) {
                        if (child.tag === CallComponent) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, call, expirationTime);
                            existing['return'] = returnFiber;
                            return existing;
                        }
                        else {
                            deleteRemainingChildren(returnFiber, child);
                            break;
                        }
                    }
                    else {
                        deleteChild(returnFiber, child);
                    }
                    child = child.sibling;
                }
                var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
                created['return'] = returnFiber;
                return created;
            }
            function reconcileSingleReturn(returnFiber, currentFirstChild, returnNode, expirationTime) {
                // There's no need to check for keys on yields since they're stateless.
                var child = currentFirstChild;
                if (child !== null) {
                    if (child.tag === ReturnComponent) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, null, expirationTime);
                        existing.type = returnNode.value;
                        existing['return'] = returnFiber;
                        return existing;
                    }
                    else {
                        deleteRemainingChildren(returnFiber, child);
                    }
                }
                var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
                created.type = returnNode.value;
                created['return'] = returnFiber;
                return created;
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
                var key = portal.key;
                var child = currentFirstChild;
                while (child !== null) {
                    // TODO: If key === null and child.key === null, then this only applies to
                    // the first item in the list.
                    if (child.key === key) {
                        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, portal.children || [], expirationTime);
                            existing['return'] = returnFiber;
                            return existing;
                        }
                        else {
                            deleteRemainingChildren(returnFiber, child);
                            break;
                        }
                    }
                    else {
                        deleteChild(returnFiber, child);
                    }
                    child = child.sibling;
                }
                var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
                created['return'] = returnFiber;
                return created;
            }
            // This API will tag the children with the side-effect of the reconciliation
            // itself. They will be added to the side-effect list as we pass through the
            // children and the parent.
            function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
                // This function is not recursive.
                // If the top level item is an array, we treat it as a set of children,
                // not as a fragment. Nested arrays on the other hand will be treated as
                // fragment nodes. Recursion happens at the normal flow.
                // Handle top level unkeyed fragments as if they were arrays.
                // This leads to an ambiguity between <>{[...]}</> and <>...</>.
                // We treat the ambiguous cases above the same.
                if (typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {
                    newChild = newChild.props.children;
                }
                // Handle object types
                var isObject = typeof newChild === 'object' && newChild !== null;
                if (isObject) {
                    switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                            return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                        case REACT_CALL_TYPE:
                            return placeSingleChild(reconcileSingleCall(returnFiber, currentFirstChild, newChild, expirationTime));
                        case REACT_RETURN_TYPE:
                            return placeSingleChild(reconcileSingleReturn(returnFiber, currentFirstChild, newChild, expirationTime));
                        case REACT_PORTAL_TYPE:
                            return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
                    }
                }
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                    return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
                }
                if (isArray$1(newChild)) {
                    return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
                }
                if (getIteratorFn(newChild)) {
                    return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
                }
                if (isObject) {
                    throwOnInvalidObjectType(returnFiber, newChild);
                }
                {
                    if (typeof newChild === 'function') {
                        warnOnFunctionType();
                    }
                }
                if (typeof newChild === 'undefined') {
                    // If the new child is undefined, and the return fiber is a composite
                    // component, throw an error. If Fiber return types are disabled,
                    // we already threw above.
                    switch (returnFiber.tag) {
                        case ClassComponent:
                            {
                                {
                                    var instance = returnFiber.stateNode;
                                    if (instance.render._isMockFunction) {
                                        // We allow auto-mocks to proceed as if they're returning null.
                                        break;
                                    }
                                }
                            }
                        // Intentionally fall through to the next case, which handles both
                        // functions and classes
                        // eslint-disable-next-lined no-fallthrough
                        case FunctionalComponent:
                            {
                                var Component = returnFiber.type;
                                invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
                            }
                    }
                }
                // Remaining cases are all treated as empty.
                return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current, workInProgress) {
            !(current === null || workInProgress.child === current.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;
            if (workInProgress.child === null) {
                return;
            }
            var currentChild = workInProgress.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
            workInProgress.child = newChild;
            newChild['return'] = workInProgress;
            while (currentChild.sibling !== null) {
                currentChild = currentChild.sibling;
                newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
                newChild['return'] = workInProgress;
            }
            newChild.sibling = null;
        }
        {
            var warnedAboutStatelessRefs = {};
        }
        var ReactFiberBeginWork = function (config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
            var shouldSetTextContent = config.shouldSetTextContent, useSyncScheduling = config.useSyncScheduling, shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
            var pushHostContext = hostContext.pushHostContext, pushHostContainer = hostContext.pushHostContainer;
            var enterHydrationState = hydrationContext.enterHydrationState, resetHydrationState = hydrationContext.resetHydrationState, tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;
            var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState), adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance, constructClassInstance = _ReactFiberClassCompo.constructClassInstance, mountClassInstance = _ReactFiberClassCompo.mountClassInstance, updateClassInstance = _ReactFiberClassCompo.updateClassInstance;
            // TODO: Remove this and use reconcileChildrenAtExpirationTime directly.
            function reconcileChildren(current, workInProgress, nextChildren) {
                reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
            }
            function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
                if (current === null) {
                    // If this is a fresh new component that hasn't been rendered yet, we
                    // won't update its child set by applying minimal side-effects. Instead,
                    // we will add them all to the child before it gets rendered. That means
                    // we can optimize this reconciliation pass by not tracking side-effects.
                    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
                }
                else {
                    // If the current child is the same as the work in progress, it means that
                    // we haven't yet started any work on these children. Therefore, we use
                    // the clone algorithm to create a copy of all the current children.
                    // If we had any progressed work already, that is invalid at this point so
                    // let's throw it out.
                    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
                }
            }
            function updateFragment(current, workInProgress) {
                var nextChildren = workInProgress.pendingProps;
                if (hasContextChanged()) {
                    // Normally we can bail out on props equality but if context has changed
                    // we don't do the bailout and we have to reuse existing props instead.
                    if (nextChildren === null) {
                        nextChildren = workInProgress.memoizedProps;
                    }
                }
                else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
                    return bailoutOnAlreadyFinishedWork(current, workInProgress);
                }
                reconcileChildren(current, workInProgress, nextChildren);
                memoizeProps(workInProgress, nextChildren);
                return workInProgress.child;
            }
            function markRef(current, workInProgress) {
                var ref = workInProgress.ref;
                if (ref !== null && (!current || current.ref !== ref)) {
                    // Schedule a Ref effect
                    workInProgress.effectTag |= Ref;
                }
            }
            function updateFunctionalComponent(current, workInProgress) {
                var fn = workInProgress.type;
                var nextProps = workInProgress.pendingProps;
                var memoizedProps = workInProgress.memoizedProps;
                if (hasContextChanged()) {
                    // Normally we can bail out on props equality but if context has changed
                    // we don't do the bailout and we have to reuse existing props instead.
                    if (nextProps === null) {
                        nextProps = memoizedProps;
                    }
                }
                else {
                    if (nextProps === null || memoizedProps === nextProps) {
                        return bailoutOnAlreadyFinishedWork(current, workInProgress);
                    }
                    // TODO: consider bringing fn.shouldComponentUpdate() back.
                    // It used to be here.
                }
                var unmaskedContext = getUnmaskedContext(workInProgress);
                var context = getMaskedContext(workInProgress, unmaskedContext);
                var nextChildren;
                {
                    ReactCurrentOwner.current = workInProgress;
                    ReactDebugCurrentFiber.setCurrentPhase('render');
                    nextChildren = fn(nextProps, context);
                    ReactDebugCurrentFiber.setCurrentPhase(null);
                }
                // React DevTools reads this flag.
                workInProgress.effectTag |= PerformedWork;
                reconcileChildren(current, workInProgress, nextChildren);
                memoizeProps(workInProgress, nextProps);
                return workInProgress.child;
            }
            function updateClassComponent(current, workInProgress, renderExpirationTime) {
                // Push context providers early to prevent context stack mismatches.
                // During mounting we don't know the child context yet as the instance doesn't exist.
                // We will invalidate the child context in finishClassComponent() right after rendering.
                var hasContext = pushContextProvider(workInProgress);
                var shouldUpdate = void 0;
                if (current === null) {
                    if (!workInProgress.stateNode) {
                        // In the initial pass we might need to construct the instance.
                        constructClassInstance(workInProgress, workInProgress.pendingProps);
                        mountClassInstance(workInProgress, renderExpirationTime);
                        shouldUpdate = true;
                    }
                    else {
                        invariant(false, 'Resuming work not yet implemented.');
                        // In a resume, we'll already have an instance we can reuse.
                        // shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
                    }
                }
                else {
                    shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
                }
                return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
            }
            function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
                // Refs should update even if shouldComponentUpdate returns false
                markRef(current, workInProgress);
                if (!shouldUpdate) {
                    // Context providers should defer to sCU for rendering
                    if (hasContext) {
                        invalidateContextProvider(workInProgress, false);
                    }
                    return bailoutOnAlreadyFinishedWork(current, workInProgress);
                }
                var instance = workInProgress.stateNode;
                // Rerender
                ReactCurrentOwner.current = workInProgress;
                var nextChildren = void 0;
                {
                    ReactDebugCurrentFiber.setCurrentPhase('render');
                    nextChildren = instance.render();
                    if (debugRenderPhaseSideEffects) {
                        instance.render();
                    }
                    ReactDebugCurrentFiber.setCurrentPhase(null);
                }
                // React DevTools reads this flag.
                workInProgress.effectTag |= PerformedWork;
                reconcileChildren(current, workInProgress, nextChildren);
                // Memoize props and state using the values we just used to render.
                // TODO: Restructure so we never read values from the instance.
                memoizeState(workInProgress, instance.state);
                memoizeProps(workInProgress, instance.props);
                // The context might have changed so we need to recalculate it.
                if (hasContext) {
                    invalidateContextProvider(workInProgress, true);
                }
                return workInProgress.child;
            }
            function pushHostRootContext(workInProgress) {
                var root = workInProgress.stateNode;
                if (root.pendingContext) {
                    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
                }
                else if (root.context) {
                    // Should always be set
                    pushTopLevelContextObject(workInProgress, root.context, false);
                }
                pushHostContainer(workInProgress, root.containerInfo);
            }
            function updateHostRoot(current, workInProgress, renderExpirationTime) {
                pushHostRootContext(workInProgress);
                var updateQueue = workInProgress.updateQueue;
                if (updateQueue !== null) {
                    var prevState = workInProgress.memoizedState;
                    var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);
                    if (prevState === state) {
                        // If the state is the same as before, that's a bailout because we had
                        // no work that expires at this time.
                        resetHydrationState();
                        return bailoutOnAlreadyFinishedWork(current, workInProgress);
                    }
                    var element = state.element;
                    var root = workInProgress.stateNode;
                    if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
                        // If we don't have any current children this might be the first pass.
                        // We always try to hydrate. If this isn't a hydration pass there won't
                        // be any children to hydrate which is effectively the same thing as
                        // not hydrating.
                        // This is a bit of a hack. We track the host root as a placement to
                        // know that we're currently in a mounting state. That way isMounted
                        // works as expected. We must reset this before committing.
                        // TODO: Delete this when we delete isMounted and findDOMNode.
                        workInProgress.effectTag |= Placement;
                        // Ensure that children mount into this root without tracking
                        // side-effects. This ensures that we don't store Placement effects on
                        // nodes that will be hydrated.
                        workInProgress.child = mountChildFibers(workInProgress, null, element, renderExpirationTime);
                    }
                    else {
                        // Otherwise reset hydration state in case we aborted and resumed another
                        // root.
                        resetHydrationState();
                        reconcileChildren(current, workInProgress, element);
                    }
                    memoizeState(workInProgress, state);
                    return workInProgress.child;
                }
                resetHydrationState();
                // If there is no update queue, that's a bailout because the root has no props.
                return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
            function updateHostComponent(current, workInProgress, renderExpirationTime) {
                pushHostContext(workInProgress);
                if (current === null) {
                    tryToClaimNextHydratableInstance(workInProgress);
                }
                var type = workInProgress.type;
                var memoizedProps = workInProgress.memoizedProps;
                var nextProps = workInProgress.pendingProps;
                if (nextProps === null) {
                    nextProps = memoizedProps;
                    !(nextProps !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                }
                var prevProps = current !== null ? current.memoizedProps : null;
                if (hasContextChanged()) {
                    // Normally we can bail out on props equality but if context has changed
                    // we don't do the bailout and we have to reuse existing props instead.
                }
                else if (nextProps === null || memoizedProps === nextProps) {
                    return bailoutOnAlreadyFinishedWork(current, workInProgress);
                }
                var nextChildren = nextProps.children;
                var isDirectTextChild = shouldSetTextContent(type, nextProps);
                if (isDirectTextChild) {
                    // We special case a direct text child of a host node. This is a common
                    // case. We won't handle it as a reified child. We will instead handle
                    // this in the host environment that also have access to this prop. That
                    // avoids allocating another HostText fiber and traversing it.
                    nextChildren = null;
                }
                else if (prevProps && shouldSetTextContent(type, prevProps)) {
                    // If we're switching from a direct text child to a normal child, or to
                    // empty, we need to schedule the text content to be reset.
                    workInProgress.effectTag |= ContentReset;
                }
                markRef(current, workInProgress);
                // Check the host config to see if the children are offscreen/hidden.
                if (renderExpirationTime !== Never && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {
                    // Down-prioritize the children.
                    workInProgress.expirationTime = Never;
                    // Bailout and come back to this fiber later.
                    return null;
                }
                reconcileChildren(current, workInProgress, nextChildren);
                memoizeProps(workInProgress, nextProps);
                return workInProgress.child;
            }
            function updateHostText(current, workInProgress) {
                if (current === null) {
                    tryToClaimNextHydratableInstance(workInProgress);
                }
                var nextProps = workInProgress.pendingProps;
                if (nextProps === null) {
                    nextProps = workInProgress.memoizedProps;
                }
                memoizeProps(workInProgress, nextProps);
                // Nothing to do here. This is terminal. We'll do the completion step
                // immediately after.
                return null;
            }
            function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
                !(current === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                var fn = workInProgress.type;
                var props = workInProgress.pendingProps;
                var unmaskedContext = getUnmaskedContext(workInProgress);
                var context = getMaskedContext(workInProgress, unmaskedContext);
                var value;
                {
                    if (fn.prototype && typeof fn.prototype.render === 'function') {
                        var componentName = getComponentName(workInProgress);
                        warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
                    }
                    ReactCurrentOwner.current = workInProgress;
                    value = fn(props, context);
                }
                // React DevTools reads this flag.
                workInProgress.effectTag |= PerformedWork;
                if (typeof value === 'object' && value !== null && typeof value.render === 'function') {
                    // Proceed under the assumption that this is a class instance
                    workInProgress.tag = ClassComponent;
                    // Push context providers early to prevent context stack mismatches.
                    // During mounting we don't know the child context yet as the instance doesn't exist.
                    // We will invalidate the child context in finishClassComponent() right after rendering.
                    var hasContext = pushContextProvider(workInProgress);
                    adoptClassInstance(workInProgress, value);
                    mountClassInstance(workInProgress, renderExpirationTime);
                    return finishClassComponent(current, workInProgress, true, hasContext);
                }
                else {
                    // Proceed under the assumption that this is a functional component
                    workInProgress.tag = FunctionalComponent;
                    {
                        var Component = workInProgress.type;
                        if (Component) {
                            warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');
                        }
                        if (workInProgress.ref !== null) {
                            var info = '';
                            var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();
                            if (ownerName) {
                                info += '\n\nCheck the render method of `' + ownerName + '`.';
                            }
                            var warningKey = ownerName || workInProgress._debugID || '';
                            var debugSource = workInProgress._debugSource;
                            if (debugSource) {
                                warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
                            }
                            if (!warnedAboutStatelessRefs[warningKey]) {
                                warnedAboutStatelessRefs[warningKey] = true;
                                warning(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
                            }
                        }
                    }
                    reconcileChildren(current, workInProgress, value);
                    memoizeProps(workInProgress, props);
                    return workInProgress.child;
                }
            }
            function updateCallComponent(current, workInProgress, renderExpirationTime) {
                var nextCall = workInProgress.pendingProps;
                if (hasContextChanged()) {
                    // Normally we can bail out on props equality but if context has changed
                    // we don't do the bailout and we have to reuse existing props instead.
                    if (nextCall === null) {
                        nextCall = current && current.memoizedProps;
                        !(nextCall !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                    }
                }
                else if (nextCall === null || workInProgress.memoizedProps === nextCall) {
                    nextCall = workInProgress.memoizedProps;
                    // TODO: When bailing out, we might need to return the stateNode instead
                    // of the child. To check it for work.
                    // return bailoutOnAlreadyFinishedWork(current, workInProgress);
                }
                var nextChildren = nextCall.children;
                // The following is a fork of reconcileChildrenAtExpirationTime but using
                // stateNode to store the child.
                if (current === null) {
                    workInProgress.stateNode = mountChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
                }
                else {
                    workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
                }
                memoizeProps(workInProgress, nextCall);
                // This doesn't take arbitrary time so we could synchronously just begin
                // eagerly do the work of workInProgress.child as an optimization.
                return workInProgress.stateNode;
            }
            function updatePortalComponent(current, workInProgress, renderExpirationTime) {
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                var nextChildren = workInProgress.pendingProps;
                if (hasContextChanged()) {
                    // Normally we can bail out on props equality but if context has changed
                    // we don't do the bailout and we have to reuse existing props instead.
                    if (nextChildren === null) {
                        nextChildren = current && current.memoizedProps;
                        !(nextChildren != null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                    }
                }
                else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
                    return bailoutOnAlreadyFinishedWork(current, workInProgress);
                }
                if (current === null) {
                    // Portals are special because we don't append the children during mount
                    // but at commit. Therefore we need to track insertions which the normal
                    // flow doesn't do during mount. This doesn't happen at the root because
                    // the root always starts with a "current" with a null child.
                    // TODO: Consider unifying this with how the root works.
                    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
                    memoizeProps(workInProgress, nextChildren);
                }
                else {
                    reconcileChildren(current, workInProgress, nextChildren);
                    memoizeProps(workInProgress, nextChildren);
                }
                return workInProgress.child;
            }
            /*
            function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
              let child = firstChild;
              do {
                // Ensure that the first and last effect of the parent corresponds
                // to the children's first and last effect.
                if (!returnFiber.firstEffect) {
                  returnFiber.firstEffect = child.firstEffect;
                }
                if (child.lastEffect) {
                  if (returnFiber.lastEffect) {
                    returnFiber.lastEffect.nextEffect = child.firstEffect;
                  }
                  returnFiber.lastEffect = child.lastEffect;
                }
              } while (child = child.sibling);
            }
            */
            function bailoutOnAlreadyFinishedWork(current, workInProgress) {
                cancelWorkTimer(workInProgress);
                // TODO: We should ideally be able to bail out early if the children have no
                // more work to do. However, since we don't have a separation of this
                // Fiber's priority and its children yet - we don't know without doing lots
                // of the same work we do anyway. Once we have that separation we can just
                // bail out here if the children has no more work at this priority level.
                // if (workInProgress.priorityOfChildren <= priorityLevel) {
                //   // If there are side-effects in these children that have not yet been
                //   // committed we need to ensure that they get properly transferred up.
                //   if (current && current.child !== workInProgress.child) {
                //     reuseChildrenEffects(workInProgress, child);
                //   }
                //   return null;
                // }
                cloneChildFibers(current, workInProgress);
                return workInProgress.child;
            }
            function bailoutOnLowPriority(current, workInProgress) {
                cancelWorkTimer(workInProgress);
                // TODO: Handle HostComponent tags here as well and call pushHostContext()?
                // See PR 8590 discussion for context
                switch (workInProgress.tag) {
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        break;
                    case ClassComponent:
                        pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                }
                // TODO: What if this is currently in progress?
                // How can that happen? How is this not being cloned?
                return null;
            }
            // TODO: Delete memoizeProps/State and move to reconcile/bailout instead
            function memoizeProps(workInProgress, nextProps) {
                workInProgress.memoizedProps = nextProps;
            }
            function memoizeState(workInProgress, nextState) {
                workInProgress.memoizedState = nextState;
                // Don't reset the updateQueue, in case there are pending updates. Resetting
                // is handled by processUpdateQueue.
            }
            function beginWork(current, workInProgress, renderExpirationTime) {
                if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
                    return bailoutOnLowPriority(current, workInProgress);
                }
                switch (workInProgress.tag) {
                    case IndeterminateComponent:
                        return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);
                    case FunctionalComponent:
                        return updateFunctionalComponent(current, workInProgress);
                    case ClassComponent:
                        return updateClassComponent(current, workInProgress, renderExpirationTime);
                    case HostRoot:
                        return updateHostRoot(current, workInProgress, renderExpirationTime);
                    case HostComponent:
                        return updateHostComponent(current, workInProgress, renderExpirationTime);
                    case HostText:
                        return updateHostText(current, workInProgress);
                    case CallHandlerPhase:
                        // This is a restart. Reset the tag to the initial phase.
                        workInProgress.tag = CallComponent;
                    // Intentionally fall through since this is now the same.
                    case CallComponent:
                        return updateCallComponent(current, workInProgress, renderExpirationTime);
                    case ReturnComponent:
                        // A return component is just a placeholder, we can just run through the
                        // next one immediately.
                        return null;
                    case HostPortal:
                        return updatePortalComponent(current, workInProgress, renderExpirationTime);
                    case Fragment:
                        return updateFragment(current, workInProgress);
                    default:
                        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
                }
            }
            function beginFailedWork(current, workInProgress, renderExpirationTime) {
                // Push context providers here to avoid a push/pop context mismatch.
                switch (workInProgress.tag) {
                    case ClassComponent:
                        pushContextProvider(workInProgress);
                        break;
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        break;
                    default:
                        invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
                }
                // Add an error effect so we can handle the error during the commit phase
                workInProgress.effectTag |= Err;
                // This is a weird case where we do "resume" work — work that failed on
                // our first attempt. Because we no longer have a notion of "progressed
                // deletions," reset the child to the current child to make sure we delete
                // it again. TODO: Find a better way to handle this, perhaps during a more
                // general overhaul of error handling.
                if (current === null) {
                    workInProgress.child = null;
                }
                else if (workInProgress.child !== current.child) {
                    workInProgress.child = current.child;
                }
                if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
                    return bailoutOnLowPriority(current, workInProgress);
                }
                // If we don't bail out, we're going be recomputing our children so we need
                // to drop our effect list.
                workInProgress.firstEffect = null;
                workInProgress.lastEffect = null;
                // Unmount the current children as if the component rendered null
                var nextChildren = null;
                reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);
                if (workInProgress.tag === ClassComponent) {
                    var instance = workInProgress.stateNode;
                    workInProgress.memoizedProps = instance.props;
                    workInProgress.memoizedState = instance.state;
                }
                return workInProgress.child;
            }
            return {
                beginWork: beginWork,
                beginFailedWork: beginFailedWork
            };
        };
        var ReactFiberCompleteWork = function (config, hostContext, hydrationContext) {
            var createInstance = config.createInstance, createTextInstance = config.createTextInstance, appendInitialChild = config.appendInitialChild, finalizeInitialChildren = config.finalizeInitialChildren, prepareUpdate = config.prepareUpdate, mutation = config.mutation, persistence = config.persistence;
            var getRootHostContainer = hostContext.getRootHostContainer, popHostContext = hostContext.popHostContext, getHostContext = hostContext.getHostContext, popHostContainer = hostContext.popHostContainer;
            var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance, prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance, popHydrationState = hydrationContext.popHydrationState;
            function markUpdate(workInProgress) {
                // Tag the fiber with an update effect. This turns a Placement into
                // an UpdateAndPlacement.
                workInProgress.effectTag |= Update;
            }
            function markRef(workInProgress) {
                workInProgress.effectTag |= Ref;
            }
            function appendAllReturns(returns, workInProgress) {
                var node = workInProgress.stateNode;
                if (node) {
                    node['return'] = workInProgress;
                }
                while (node !== null) {
                    if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {
                        invariant(false, 'A call cannot have host component children.');
                    }
                    else if (node.tag === ReturnComponent) {
                        returns.push(node.type);
                    }
                    else if (node.child !== null) {
                        node.child['return'] = node;
                        node = node.child;
                        continue;
                    }
                    while (node.sibling === null) {
                        if (node['return'] === null || node['return'] === workInProgress) {
                            return;
                        }
                        node = node['return'];
                    }
                    node.sibling['return'] = node['return'];
                    node = node.sibling;
                }
            }
            function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {
                var call = workInProgress.memoizedProps;
                !call ? invariant(false, 'Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                // First step of the call has completed. Now we need to do the second.
                // TODO: It would be nice to have a multi stage call represented by a
                // single component, or at least tail call optimize nested ones. Currently
                // that requires additional fields that we don't want to add to the fiber.
                // So this requires nested handlers.
                // Note: This doesn't mutate the alternate node. I don't think it needs to
                // since this stage is reset for every pass.
                workInProgress.tag = CallHandlerPhase;
                // Build up the returns.
                // TODO: Compare this to a generator or opaque helpers like Children.
                var returns = [];
                appendAllReturns(returns, workInProgress);
                var fn = call.handler;
                var props = call.props;
                var nextChildren = fn(props, returns);
                var currentFirstChild = current !== null ? current.child : null;
                workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);
                return workInProgress.child;
            }
            function appendAllChildren(parent, workInProgress) {
                // We only have the top Fiber that was created but we need recurse down its
                // children to find all the terminal nodes.
                var node = workInProgress.child;
                while (node !== null) {
                    if (node.tag === HostComponent || node.tag === HostText) {
                        appendInitialChild(parent, node.stateNode);
                    }
                    else if (node.tag === HostPortal) {
                        // If we have a portal child, then we don't want to traverse
                        // down its children. Instead, we'll get insertions from each child in
                        // the portal directly.
                    }
                    else if (node.child !== null) {
                        node.child['return'] = node;
                        node = node.child;
                        continue;
                    }
                    if (node === workInProgress) {
                        return;
                    }
                    while (node.sibling === null) {
                        if (node['return'] === null || node['return'] === workInProgress) {
                            return;
                        }
                        node = node['return'];
                    }
                    node.sibling['return'] = node['return'];
                    node = node.sibling;
                }
            }
            var updateHostContainer = void 0;
            var updateHostComponent = void 0;
            var updateHostText = void 0;
            if (mutation) {
                if (enableMutatingReconciler) {
                    // Mutation mode
                    updateHostContainer = function (workInProgress) {
                        // Noop
                    };
                    updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
                        // TODO: Type this specific to this type of component.
                        workInProgress.updateQueue = updatePayload;
                        // If the update payload indicates that there is a change or if there
                        // is a new ref we mark this as an update. All the work is done in commitWork.
                        if (updatePayload) {
                            markUpdate(workInProgress);
                        }
                    };
                    updateHostText = function (current, workInProgress, oldText, newText) {
                        // If the text differs, mark it as an update. All the work in done in commitWork.
                        if (oldText !== newText) {
                            markUpdate(workInProgress);
                        }
                    };
                }
                else {
                    invariant(false, 'Mutating reconciler is disabled.');
                }
            }
            else if (persistence) {
                if (enablePersistentReconciler) {
                    // Persistent host tree mode
                    var cloneInstance = persistence.cloneInstance, createContainerChildSet = persistence.createContainerChildSet, appendChildToContainerChildSet = persistence.appendChildToContainerChildSet, finalizeContainerChildren = persistence.finalizeContainerChildren;
                    // An unfortunate fork of appendAllChildren because we have two different parent types.
                    var appendAllChildrenToContainer = function (containerChildSet, workInProgress) {
                        // We only have the top Fiber that was created but we need recurse down its
                        // children to find all the terminal nodes.
                        var node = workInProgress.child;
                        while (node !== null) {
                            if (node.tag === HostComponent || node.tag === HostText) {
                                appendChildToContainerChildSet(containerChildSet, node.stateNode);
                            }
                            else if (node.tag === HostPortal) {
                                // If we have a portal child, then we don't want to traverse
                                // down its children. Instead, we'll get insertions from each child in
                                // the portal directly.
                            }
                            else if (node.child !== null) {
                                node.child['return'] = node;
                                node = node.child;
                                continue;
                            }
                            if (node === workInProgress) {
                                return;
                            }
                            while (node.sibling === null) {
                                if (node['return'] === null || node['return'] === workInProgress) {
                                    return;
                                }
                                node = node['return'];
                            }
                            node.sibling['return'] = node['return'];
                            node = node.sibling;
                        }
                    };
                    updateHostContainer = function (workInProgress) {
                        var portalOrRoot = workInProgress.stateNode;
                        var childrenUnchanged = workInProgress.firstEffect === null;
                        if (childrenUnchanged) {
                            // No changes, just reuse the existing instance.
                        }
                        else {
                            var container = portalOrRoot.containerInfo;
                            var newChildSet = createContainerChildSet(container);
                            if (finalizeContainerChildren(container, newChildSet)) {
                                markUpdate(workInProgress);
                            }
                            portalOrRoot.pendingChildren = newChildSet;
                            // If children might have changed, we have to add them all to the set.
                            appendAllChildrenToContainer(newChildSet, workInProgress);
                            // Schedule an update on the container to swap out the container.
                            markUpdate(workInProgress);
                        }
                    };
                    updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
                        // If there are no effects associated with this node, then none of our children had any updates.
                        // This guarantees that we can reuse all of them.
                        var childrenUnchanged = workInProgress.firstEffect === null;
                        var currentInstance = current.stateNode;
                        if (childrenUnchanged && updatePayload === null) {
                            // No changes, just reuse the existing instance.
                            // Note that this might release a previous clone.
                            workInProgress.stateNode = currentInstance;
                        }
                        else {
                            var recyclableInstance = workInProgress.stateNode;
                            var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
                            if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance)) {
                                markUpdate(workInProgress);
                            }
                            workInProgress.stateNode = newInstance;
                            if (childrenUnchanged) {
                                // If there are no other effects in this tree, we need to flag this node as having one.
                                // Even though we're not going to use it for anything.
                                // Otherwise parents won't know that there are new children to propagate upwards.
                                markUpdate(workInProgress);
                            }
                            else {
                                // If children might have changed, we have to add them all to the set.
                                appendAllChildren(newInstance, workInProgress);
                            }
                        }
                    };
                    updateHostText = function (current, workInProgress, oldText, newText) {
                        if (oldText !== newText) {
                            // If the text content differs, we'll create a new text instance for it.
                            var rootContainerInstance = getRootHostContainer();
                            var currentHostContext = getHostContext();
                            workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
                            // We'll have to mark it as having an effect, even though we won't use the effect for anything.
                            // This lets the parents know that at least one of their children has changed.
                            markUpdate(workInProgress);
                        }
                    };
                }
                else {
                    invariant(false, 'Persistent reconciler is disabled.');
                }
            }
            else {
                if (enableNoopReconciler) {
                    // No host operations
                    updateHostContainer = function (workInProgress) {
                        // Noop
                    };
                    updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
                        // Noop
                    };
                    updateHostText = function (current, workInProgress, oldText, newText) {
                        // Noop
                    };
                }
                else {
                    invariant(false, 'Noop reconciler is disabled.');
                }
            }
            function completeWork(current, workInProgress, renderExpirationTime) {
                // Get the latest props.
                var newProps = workInProgress.pendingProps;
                if (newProps === null) {
                    newProps = workInProgress.memoizedProps;
                }
                else if (workInProgress.expirationTime !== Never || renderExpirationTime === Never) {
                    // Reset the pending props, unless this was a down-prioritization.
                    workInProgress.pendingProps = null;
                }
                switch (workInProgress.tag) {
                    case FunctionalComponent:
                        return null;
                    case ClassComponent:
                        {
                            // We are leaving this subtree, so pop context if any.
                            popContextProvider(workInProgress);
                            return null;
                        }
                    case HostRoot:
                        {
                            popHostContainer(workInProgress);
                            popTopLevelContextObject(workInProgress);
                            var fiberRoot = workInProgress.stateNode;
                            if (fiberRoot.pendingContext) {
                                fiberRoot.context = fiberRoot.pendingContext;
                                fiberRoot.pendingContext = null;
                            }
                            if (current === null || current.child === null) {
                                // If we hydrated, pop so that we can delete any remaining children
                                // that weren't hydrated.
                                popHydrationState(workInProgress);
                                // This resets the hacky state to fix isMounted before committing.
                                // TODO: Delete this when we delete isMounted and findDOMNode.
                                workInProgress.effectTag &= ~Placement;
                            }
                            updateHostContainer(workInProgress);
                            return null;
                        }
                    case HostComponent:
                        {
                            popHostContext(workInProgress);
                            var rootContainerInstance = getRootHostContainer();
                            var type = workInProgress.type;
                            if (current !== null && workInProgress.stateNode != null) {
                                // If we have an alternate, that means this is an update and we need to
                                // schedule a side-effect to do the updates.
                                var oldProps = current.memoizedProps;
                                // If we get updated because one of our children updated, we don't
                                // have newProps so we'll have to reuse them.
                                // TODO: Split the update API as separate for the props vs. children.
                                // Even better would be if children weren't special cased at all tho.
                                var instance = workInProgress.stateNode;
                                var currentHostContext = getHostContext();
                                var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                                updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance);
                                if (current.ref !== workInProgress.ref) {
                                    markRef(workInProgress);
                                }
                            }
                            else {
                                if (!newProps) {
                                    !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                                    // This can happen when we abort work.
                                    return null;
                                }
                                var _currentHostContext = getHostContext();
                                // TODO: Move createInstance to beginWork and keep it on a context
                                // "stack" as the parent. Then append children as we go in beginWork
                                // or completeWork depending on we want to add then top->down or
                                // bottom->up. Top->down is faster in IE11.
                                var wasHydrated = popHydrationState(workInProgress);
                                if (wasHydrated) {
                                    // TODO: Move this and createInstance step into the beginPhase
                                    // to consolidate.
                                    if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                                        // If changes to the hydrated node needs to be applied at the
                                        // commit-phase we mark this as such.
                                        markUpdate(workInProgress);
                                    }
                                }
                                else {
                                    var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);
                                    appendAllChildren(_instance, workInProgress);
                                    // Certain renderers require commit-time effects for initial mount.
                                    // (eg DOM renderer supports auto-focus for certain elements).
                                    // Make sure such renderers get scheduled for later work.
                                    if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {
                                        markUpdate(workInProgress);
                                    }
                                    workInProgress.stateNode = _instance;
                                }
                                if (workInProgress.ref !== null) {
                                    // If there is a ref on a host node we need to schedule a callback
                                    markRef(workInProgress);
                                }
                            }
                            return null;
                        }
                    case HostText:
                        {
                            var newText = newProps;
                            if (current && workInProgress.stateNode != null) {
                                var oldText = current.memoizedProps;
                                // If we have an alternate, that means this is an update and we need
                                // to schedule a side-effect to do the updates.
                                updateHostText(current, workInProgress, oldText, newText);
                            }
                            else {
                                if (typeof newText !== 'string') {
                                    !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                                    // This can happen when we abort work.
                                    return null;
                                }
                                var _rootContainerInstance = getRootHostContainer();
                                var _currentHostContext2 = getHostContext();
                                var _wasHydrated = popHydrationState(workInProgress);
                                if (_wasHydrated) {
                                    if (prepareToHydrateHostTextInstance(workInProgress)) {
                                        markUpdate(workInProgress);
                                    }
                                }
                                else {
                                    workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                                }
                            }
                            return null;
                        }
                    case CallComponent:
                        return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);
                    case CallHandlerPhase:
                        // Reset the tag to now be a first phase call.
                        workInProgress.tag = CallComponent;
                        return null;
                    case ReturnComponent:
                        // Does nothing.
                        return null;
                    case Fragment:
                        return null;
                    case HostPortal:
                        popHostContainer(workInProgress);
                        updateHostContainer(workInProgress);
                        return null;
                    // Error cases
                    case IndeterminateComponent:
                        invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
                    // eslint-disable-next-line no-fallthrough
                    default:
                        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
                }
            }
            return {
                completeWork: completeWork
            };
        };
        var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
        var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
        var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;
        var ReactFiberCommitWork = function (config, captureError) {
            var getPublicInstance = config.getPublicInstance, mutation = config.mutation, persistence = config.persistence;
            var callComponentWillUnmountWithTimer = function (current, instance) {
                startPhaseTimer(current, 'componentWillUnmount');
                instance.props = current.memoizedProps;
                instance.state = current.memoizedState;
                instance.componentWillUnmount();
                stopPhaseTimer();
            };
            // Capture errors so they don't interrupt unmounting.
            function safelyCallComponentWillUnmount(current, instance) {
                {
                    invokeGuardedCallback$2(null, callComponentWillUnmountWithTimer, null, current, instance);
                    if (hasCaughtError$1()) {
                        var unmountError = clearCaughtError$1();
                        captureError(current, unmountError);
                    }
                }
            }
            function safelyDetachRef(current) {
                var ref = current.ref;
                if (ref !== null) {
                    {
                        invokeGuardedCallback$2(null, ref, null, null);
                        if (hasCaughtError$1()) {
                            var refError = clearCaughtError$1();
                            captureError(current, refError);
                        }
                    }
                }
            }
            function commitLifeCycles(current, finishedWork) {
                switch (finishedWork.tag) {
                    case ClassComponent:
                        {
                            var instance = finishedWork.stateNode;
                            if (finishedWork.effectTag & Update) {
                                if (current === null) {
                                    startPhaseTimer(finishedWork, 'componentDidMount');
                                    instance.props = finishedWork.memoizedProps;
                                    instance.state = finishedWork.memoizedState;
                                    instance.componentDidMount();
                                    stopPhaseTimer();
                                }
                                else {
                                    var prevProps = current.memoizedProps;
                                    var prevState = current.memoizedState;
                                    startPhaseTimer(finishedWork, 'componentDidUpdate');
                                    instance.props = finishedWork.memoizedProps;
                                    instance.state = finishedWork.memoizedState;
                                    instance.componentDidUpdate(prevProps, prevState);
                                    stopPhaseTimer();
                                }
                            }
                            var updateQueue = finishedWork.updateQueue;
                            if (updateQueue !== null) {
                                commitCallbacks(updateQueue, instance);
                            }
                            return;
                        }
                    case HostRoot:
                        {
                            var _updateQueue = finishedWork.updateQueue;
                            if (_updateQueue !== null) {
                                var _instance = finishedWork.child !== null ? finishedWork.child.stateNode : null;
                                commitCallbacks(_updateQueue, _instance);
                            }
                            return;
                        }
                    case HostComponent:
                        {
                            var _instance2 = finishedWork.stateNode;
                            // Renderers may schedule work to be done after host components are mounted
                            // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                            // These effects should only be committed when components are first mounted,
                            // aka when there is no current/alternate.
                            if (current === null && finishedWork.effectTag & Update) {
                                var type = finishedWork.type;
                                var props = finishedWork.memoizedProps;
                                commitMount(_instance2, type, props, finishedWork);
                            }
                            return;
                        }
                    case HostText:
                        {
                            // We have no life-cycles associated with text.
                            return;
                        }
                    case HostPortal:
                        {
                            // We have no life-cycles associated with portals.
                            return;
                        }
                    default:
                        {
                            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
                        }
                }
            }
            function commitAttachRef(finishedWork) {
                var ref = finishedWork.ref;
                if (ref !== null) {
                    var instance = finishedWork.stateNode;
                    switch (finishedWork.tag) {
                        case HostComponent:
                            ref(getPublicInstance(instance));
                            break;
                        default:
                            ref(instance);
                    }
                }
            }
            function commitDetachRef(current) {
                var currentRef = current.ref;
                if (currentRef !== null) {
                    currentRef(null);
                }
            }
            // User-originating errors (lifecycles and refs) should not interrupt
            // deletion, so don't let them throw. Host-originating errors should
            // interrupt deletion, so it's okay
            function commitUnmount(current) {
                if (typeof onCommitUnmount === 'function') {
                    onCommitUnmount(current);
                }
                switch (current.tag) {
                    case ClassComponent:
                        {
                            safelyDetachRef(current);
                            var instance = current.stateNode;
                            if (typeof instance.componentWillUnmount === 'function') {
                                safelyCallComponentWillUnmount(current, instance);
                            }
                            return;
                        }
                    case HostComponent:
                        {
                            safelyDetachRef(current);
                            return;
                        }
                    case CallComponent:
                        {
                            commitNestedUnmounts(current.stateNode);
                            return;
                        }
                    case HostPortal:
                        {
                            // TODO: this is recursive.
                            // We are also not using this parent because
                            // the portal will get pushed immediately.
                            if (enableMutatingReconciler && mutation) {
                                unmountHostComponents(current);
                            }
                            else if (enablePersistentReconciler && persistence) {
                                emptyPortalContainer(current);
                            }
                            return;
                        }
                }
            }
            function commitNestedUnmounts(root) {
                // While we're inside a removed host node we don't want to call
                // removeChild on the inner nodes because they're removed by the top
                // call anyway. We also want to call componentWillUnmount on all
                // composites before this host node is removed from the tree. Therefore
                var node = root;
                while (true) {
                    commitUnmount(node);
                    // Visit children because they may contain more composite or host nodes.
                    // Skip portals because commitUnmount() currently visits them recursively.
                    if (node.child !== null && (
                    // If we use mutation we drill down into portals using commitUnmount above.
                    // If we don't use mutation we drill down into portals here instead.
                    !mutation || node.tag !== HostPortal)) {
                        node.child['return'] = node;
                        node = node.child;
                        continue;
                    }
                    if (node === root) {
                        return;
                    }
                    while (node.sibling === null) {
                        if (node['return'] === null || node['return'] === root) {
                            return;
                        }
                        node = node['return'];
                    }
                    node.sibling['return'] = node['return'];
                    node = node.sibling;
                }
            }
            function detachFiber(current) {
                // Cut off the return pointers to disconnect it from the tree. Ideally, we
                // should clear the child pointer of the parent alternate to let this
                // get GC:ed but we don't know which for sure which parent is the current
                // one so we'll settle for GC:ing the subtree of this child. This child
                // itself will be GC:ed when the parent updates the next time.
                current['return'] = null;
                current.child = null;
                if (current.alternate) {
                    current.alternate.child = null;
                    current.alternate['return'] = null;
                }
            }
            if (!mutation) {
                var commitContainer = void 0;
                if (persistence) {
                    var replaceContainerChildren = persistence.replaceContainerChildren, createContainerChildSet = persistence.createContainerChildSet;
                    var emptyPortalContainer = function (current) {
                        var portal = current.stateNode;
                        var containerInfo = portal.containerInfo;
                        var emptyChildSet = createContainerChildSet(containerInfo);
                        replaceContainerChildren(containerInfo, emptyChildSet);
                    };
                    commitContainer = function (finishedWork) {
                        switch (finishedWork.tag) {
                            case ClassComponent:
                                {
                                    return;
                                }
                            case HostComponent:
                                {
                                    return;
                                }
                            case HostText:
                                {
                                    return;
                                }
                            case HostRoot:
                            case HostPortal:
                                {
                                    var portalOrRoot = finishedWork.stateNode;
                                    var containerInfo = portalOrRoot.containerInfo, _pendingChildren = portalOrRoot.pendingChildren;
                                    replaceContainerChildren(containerInfo, _pendingChildren);
                                    return;
                                }
                            default:
                                {
                                    invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
                                }
                        }
                    };
                }
                else {
                    commitContainer = function (finishedWork) {
                        // Noop
                    };
                }
                if (enablePersistentReconciler || enableNoopReconciler) {
                    return {
                        commitResetTextContent: function (finishedWork) { },
                        commitPlacement: function (finishedWork) { },
                        commitDeletion: function (current) {
                            // Detach refs and call componentWillUnmount() on the whole subtree.
                            commitNestedUnmounts(current);
                            detachFiber(current);
                        },
                        commitWork: function (current, finishedWork) {
                            commitContainer(finishedWork);
                        },
                        commitLifeCycles: commitLifeCycles,
                        commitAttachRef: commitAttachRef,
                        commitDetachRef: commitDetachRef
                    };
                }
                else if (persistence) {
                    invariant(false, 'Persistent reconciler is disabled.');
                }
                else {
                    invariant(false, 'Noop reconciler is disabled.');
                }
            }
            var commitMount = mutation.commitMount, commitUpdate = mutation.commitUpdate, resetTextContent = mutation.resetTextContent, commitTextUpdate = mutation.commitTextUpdate, appendChild = mutation.appendChild, appendChildToContainer = mutation.appendChildToContainer, insertBefore = mutation.insertBefore, insertInContainerBefore = mutation.insertInContainerBefore, removeChild = mutation.removeChild, removeChildFromContainer = mutation.removeChildFromContainer;
            function getHostParentFiber(fiber) {
                var parent = fiber['return'];
                while (parent !== null) {
                    if (isHostParent(parent)) {
                        return parent;
                    }
                    parent = parent['return'];
                }
                invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
            }
            function isHostParent(fiber) {
                return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
            }
            function getHostSibling(fiber) {
                // We're going to search forward into the tree until we find a sibling host
                // node. Unfortunately, if multiple insertions are done in a row we have to
                // search past them. This leads to exponential search for the next sibling.
                var node = fiber;
                siblings: while (true) {
                    // If we didn't find anything, let's try the next sibling.
                    while (node.sibling === null) {
                        if (node['return'] === null || isHostParent(node['return'])) {
                            // If we pop out of the root or hit the parent the fiber we are the
                            // last sibling.
                            return null;
                        }
                        node = node['return'];
                    }
                    node.sibling['return'] = node['return'];
                    node = node.sibling;
                    while (node.tag !== HostComponent && node.tag !== HostText) {
                        // If it is not host node and, we might have a host node inside it.
                        // Try to search down until we find one.
                        if (node.effectTag & Placement) {
                            // If we don't have a child, try the siblings instead.
                            continue siblings;
                        }
                        // If we don't have a child, try the siblings instead.
                        // We also skip portals because they are not part of this host tree.
                        if (node.child === null || node.tag === HostPortal) {
                            continue siblings;
                        }
                        else {
                            node.child['return'] = node;
                            node = node.child;
                        }
                    }
                    // Check if this host node is stable or about to be placed.
                    if (!(node.effectTag & Placement)) {
                        // Found it!
                        return node.stateNode;
                    }
                }
            }
            function commitPlacement(finishedWork) {
                // Recursively insert all host nodes into the parent.
                var parentFiber = getHostParentFiber(finishedWork);
                var parent = void 0;
                var isContainer = void 0;
                switch (parentFiber.tag) {
                    case HostComponent:
                        parent = parentFiber.stateNode;
                        isContainer = false;
                        break;
                    case HostRoot:
                        parent = parentFiber.stateNode.containerInfo;
                        isContainer = true;
                        break;
                    case HostPortal:
                        parent = parentFiber.stateNode.containerInfo;
                        isContainer = true;
                        break;
                    default:
                        invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
                }
                if (parentFiber.effectTag & ContentReset) {
                    // Reset the text content of the parent before doing any insertions
                    resetTextContent(parent);
                    // Clear ContentReset from the effect tag
                    parentFiber.effectTag &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                // We only have the top Fiber that was inserted but we need recurse down its
                // children to find all the terminal nodes.
                var node = finishedWork;
                while (true) {
                    if (node.tag === HostComponent || node.tag === HostText) {
                        if (before) {
                            if (isContainer) {
                                insertInContainerBefore(parent, node.stateNode, before);
                            }
                            else {
                                insertBefore(parent, node.stateNode, before);
                            }
                        }
                        else {
                            if (isContainer) {
                                appendChildToContainer(parent, node.stateNode);
                            }
                            else {
                                appendChild(parent, node.stateNode);
                            }
                        }
                    }
                    else if (node.tag === HostPortal) {
                        // If the insertion itself is a portal, then we don't want to traverse
                        // down its children. Instead, we'll get insertions from each child in
                        // the portal directly.
                    }
                    else if (node.child !== null) {
                        node.child['return'] = node;
                        node = node.child;
                        continue;
                    }
                    if (node === finishedWork) {
                        return;
                    }
                    while (node.sibling === null) {
                        if (node['return'] === null || node['return'] === finishedWork) {
                            return;
                        }
                        node = node['return'];
                    }
                    node.sibling['return'] = node['return'];
                    node = node.sibling;
                }
            }
            function unmountHostComponents(current) {
                // We only have the top Fiber that was inserted but we need recurse down its
                var node = current;
                // Each iteration, currentParent is populated with node's host parent if not
                // currentParentIsValid.
                var currentParentIsValid = false;
                var currentParent = void 0;
                var currentParentIsContainer = void 0;
                while (true) {
                    if (!currentParentIsValid) {
                        var parent = node['return'];
                        findParent: while (true) {
                            !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                            switch (parent.tag) {
                                case HostComponent:
                                    currentParent = parent.stateNode;
                                    currentParentIsContainer = false;
                                    break findParent;
                                case HostRoot:
                                    currentParent = parent.stateNode.containerInfo;
                                    currentParentIsContainer = true;
                                    break findParent;
                                case HostPortal:
                                    currentParent = parent.stateNode.containerInfo;
                                    currentParentIsContainer = true;
                                    break findParent;
                            }
                            parent = parent['return'];
                        }
                        currentParentIsValid = true;
                    }
                    if (node.tag === HostComponent || node.tag === HostText) {
                        commitNestedUnmounts(node);
                        // After all the children have unmounted, it is now safe to remove the
                        // node from the tree.
                        if (currentParentIsContainer) {
                            removeChildFromContainer(currentParent, node.stateNode);
                        }
                        else {
                            removeChild(currentParent, node.stateNode);
                        }
                        // Don't visit children because we already visited them.
                    }
                    else if (node.tag === HostPortal) {
                        // When we go into a portal, it becomes the parent to remove from.
                        // We will reassign it back when we pop the portal on the way up.
                        currentParent = node.stateNode.containerInfo;
                        // Visit children because portals might contain host components.
                        if (node.child !== null) {
                            node.child['return'] = node;
                            node = node.child;
                            continue;
                        }
                    }
                    else {
                        commitUnmount(node);
                        // Visit children because we may find more host components below.
                        if (node.child !== null) {
                            node.child['return'] = node;
                            node = node.child;
                            continue;
                        }
                    }
                    if (node === current) {
                        return;
                    }
                    while (node.sibling === null) {
                        if (node['return'] === null || node['return'] === current) {
                            return;
                        }
                        node = node['return'];
                        if (node.tag === HostPortal) {
                            // When we go out of the portal, we need to restore the parent.
                            // Since we don't keep a stack of them, we will search for it.
                            currentParentIsValid = false;
                        }
                    }
                    node.sibling['return'] = node['return'];
                    node = node.sibling;
                }
            }
            function commitDeletion(current) {
                // Recursively delete all host nodes from the parent.
                // Detach refs and call componentWillUnmount() on the whole subtree.
                unmountHostComponents(current);
                detachFiber(current);
            }
            function commitWork(current, finishedWork) {
                switch (finishedWork.tag) {
                    case ClassComponent:
                        {
                            return;
                        }
                    case HostComponent:
                        {
                            var instance = finishedWork.stateNode;
                            if (instance != null) {
                                // Commit the work prepared earlier.
                                var newProps = finishedWork.memoizedProps;
                                // For hydration we reuse the update path but we treat the oldProps
                                // as the newProps. The updatePayload will contain the real change in
                                // this case.
                                var oldProps = current !== null ? current.memoizedProps : newProps;
                                var type = finishedWork.type;
                                // TODO: Type the updateQueue to be specific to host components.
                                var updatePayload = finishedWork.updateQueue;
                                finishedWork.updateQueue = null;
                                if (updatePayload !== null) {
                                    commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                                }
                            }
                            return;
                        }
                    case HostText:
                        {
                            !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                            var textInstance = finishedWork.stateNode;
                            var newText = finishedWork.memoizedProps;
                            // For hydration we reuse the update path but we treat the oldProps
                            // as the newProps. The updatePayload will contain the real change in
                            // this case.
                            var oldText = current !== null ? current.memoizedProps : newText;
                            commitTextUpdate(textInstance, oldText, newText);
                            return;
                        }
                    case HostRoot:
                        {
                            return;
                        }
                    default:
                        {
                            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
                        }
                }
            }
            function commitResetTextContent(current) {
                resetTextContent(current.stateNode);
            }
            if (enableMutatingReconciler) {
                return {
                    commitResetTextContent: commitResetTextContent,
                    commitPlacement: commitPlacement,
                    commitDeletion: commitDeletion,
                    commitWork: commitWork,
                    commitLifeCycles: commitLifeCycles,
                    commitAttachRef: commitAttachRef,
                    commitDetachRef: commitDetachRef
                };
            }
            else {
                invariant(false, 'Mutating reconciler is disabled.');
            }
        };
        var NO_CONTEXT = {};
        var ReactFiberHostContext = function (config) {
            var getChildHostContext = config.getChildHostContext, getRootHostContext = config.getRootHostContext;
            var contextStackCursor = createCursor(NO_CONTEXT);
            var contextFiberStackCursor = createCursor(NO_CONTEXT);
            var rootInstanceStackCursor = createCursor(NO_CONTEXT);
            function requiredContext(c) {
                !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                return c;
            }
            function getRootHostContainer() {
                var rootInstance = requiredContext(rootInstanceStackCursor.current);
                return rootInstance;
            }
            function pushHostContainer(fiber, nextRootInstance) {
                // Push current root instance onto the stack;
                // This allows us to reset root when portals are popped.
                push(rootInstanceStackCursor, nextRootInstance, fiber);
                var nextRootContext = getRootHostContext(nextRootInstance);
                // Track the context and the Fiber that provided it.
                // This enables us to pop only Fibers that provide unique contexts.
                push(contextFiberStackCursor, fiber, fiber);
                push(contextStackCursor, nextRootContext, fiber);
            }
            function popHostContainer(fiber) {
                pop(contextStackCursor, fiber);
                pop(contextFiberStackCursor, fiber);
                pop(rootInstanceStackCursor, fiber);
            }
            function getHostContext() {
                var context = requiredContext(contextStackCursor.current);
                return context;
            }
            function pushHostContext(fiber) {
                var rootInstance = requiredContext(rootInstanceStackCursor.current);
                var context = requiredContext(contextStackCursor.current);
                var nextContext = getChildHostContext(context, fiber.type, rootInstance);
                // Don't push this Fiber's context unless it's unique.
                if (context === nextContext) {
                    return;
                }
                // Track the context and the Fiber that provided it.
                // This enables us to pop only Fibers that provide unique contexts.
                push(contextFiberStackCursor, fiber, fiber);
                push(contextStackCursor, nextContext, fiber);
            }
            function popHostContext(fiber) {
                // Do not pop unless this Fiber provided the current context.
                // pushHostContext() only pushes Fibers that provide unique contexts.
                if (contextFiberStackCursor.current !== fiber) {
                    return;
                }
                pop(contextStackCursor, fiber);
                pop(contextFiberStackCursor, fiber);
            }
            function resetHostContainer() {
                contextStackCursor.current = NO_CONTEXT;
                rootInstanceStackCursor.current = NO_CONTEXT;
            }
            return {
                getHostContext: getHostContext,
                getRootHostContainer: getRootHostContainer,
                popHostContainer: popHostContainer,
                popHostContext: popHostContext,
                pushHostContainer: pushHostContainer,
                pushHostContext: pushHostContext,
                resetHostContainer: resetHostContainer
            };
        };
        var ReactFiberHydrationContext = function (config) {
            var shouldSetTextContent = config.shouldSetTextContent, hydration = config.hydration;
            // If this doesn't have hydration mode.
            if (!hydration) {
                return {
                    enterHydrationState: function () {
                        return false;
                    },
                    resetHydrationState: function () { },
                    tryToClaimNextHydratableInstance: function () { },
                    prepareToHydrateHostInstance: function () {
                        invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
                    },
                    prepareToHydrateHostTextInstance: function () {
                        invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
                    },
                    popHydrationState: function (fiber) {
                        return false;
                    }
                };
            }
            var canHydrateInstance = hydration.canHydrateInstance, canHydrateTextInstance = hydration.canHydrateTextInstance, getNextHydratableSibling = hydration.getNextHydratableSibling, getFirstHydratableChild = hydration.getFirstHydratableChild, hydrateInstance = hydration.hydrateInstance, hydrateTextInstance = hydration.hydrateTextInstance, didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance, didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance, didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance, didNotHydrateInstance = hydration.didNotHydrateInstance, didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance, didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance, didNotFindHydratableInstance = hydration.didNotFindHydratableInstance, didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;
            // The deepest Fiber on the stack involved in a hydration context.
            // This may have been an insertion or a hydration.
            var hydrationParentFiber = null;
            var nextHydratableInstance = null;
            var isHydrating = false;
            function enterHydrationState(fiber) {
                var parentInstance = fiber.stateNode.containerInfo;
                nextHydratableInstance = getFirstHydratableChild(parentInstance);
                hydrationParentFiber = fiber;
                isHydrating = true;
                return true;
            }
            function deleteHydratableInstance(returnFiber, instance) {
                {
                    switch (returnFiber.tag) {
                        case HostRoot:
                            didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                            break;
                        case HostComponent:
                            didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                            break;
                    }
                }
                var childToDelete = createFiberFromHostInstanceForDeletion();
                childToDelete.stateNode = instance;
                childToDelete['return'] = returnFiber;
                childToDelete.effectTag = Deletion;
                // This might seem like it belongs on progressedFirstDeletion. However,
                // these children are not part of the reconciliation list of children.
                // Even if we abort and rereconcile the children, that will try to hydrate
                // again and the nodes are still in the host tree so these will be
                // recreated.
                if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = childToDelete;
                    returnFiber.lastEffect = childToDelete;
                }
                else {
                    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                }
            }
            function insertNonHydratedInstance(returnFiber, fiber) {
                fiber.effectTag |= Placement;
                {
                    switch (returnFiber.tag) {
                        case HostRoot:
                            {
                                var parentContainer = returnFiber.stateNode.containerInfo;
                                switch (fiber.tag) {
                                    case HostComponent:
                                        var type = fiber.type;
                                        var props = fiber.pendingProps;
                                        didNotFindHydratableContainerInstance(parentContainer, type, props);
                                        break;
                                    case HostText:
                                        var text = fiber.pendingProps;
                                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                                        break;
                                }
                                break;
                            }
                        case HostComponent:
                            {
                                var parentType = returnFiber.type;
                                var parentProps = returnFiber.memoizedProps;
                                var parentInstance = returnFiber.stateNode;
                                switch (fiber.tag) {
                                    case HostComponent:
                                        var _type = fiber.type;
                                        var _props = fiber.pendingProps;
                                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                                        break;
                                    case HostText:
                                        var _text = fiber.pendingProps;
                                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                                        break;
                                }
                                break;
                            }
                        default:
                            return;
                    }
                }
            }
            function tryHydrate(fiber, nextInstance) {
                switch (fiber.tag) {
                    case HostComponent:
                        {
                            var type = fiber.type;
                            var props = fiber.pendingProps;
                            var instance = canHydrateInstance(nextInstance, type, props);
                            if (instance !== null) {
                                fiber.stateNode = instance;
                                return true;
                            }
                            return false;
                        }
                    case HostText:
                        {
                            var text = fiber.pendingProps;
                            var textInstance = canHydrateTextInstance(nextInstance, text);
                            if (textInstance !== null) {
                                fiber.stateNode = textInstance;
                                return true;
                            }
                            return false;
                        }
                    default:
                        return false;
                }
            }
            function tryToClaimNextHydratableInstance(fiber) {
                if (!isHydrating) {
                    return;
                }
                var nextInstance = nextHydratableInstance;
                if (!nextInstance) {
                    // Nothing to hydrate. Make it an insertion.
                    insertNonHydratedInstance(hydrationParentFiber, fiber);
                    isHydrating = false;
                    hydrationParentFiber = fiber;
                    return;
                }
                if (!tryHydrate(fiber, nextInstance)) {
                    // If we can't hydrate this instance let's try the next one.
                    // We use this as a heuristic. It's based on intuition and not data so it
                    // might be flawed or unnecessary.
                    nextInstance = getNextHydratableSibling(nextInstance);
                    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                        // Nothing to hydrate. Make it an insertion.
                        insertNonHydratedInstance(hydrationParentFiber, fiber);
                        isHydrating = false;
                        hydrationParentFiber = fiber;
                        return;
                    }
                    // We matched the next one, we'll now assume that the first one was
                    // superfluous and we'll delete it. Since we can't eagerly delete it
                    // we'll have to schedule a deletion. To do that, this node needs a dummy
                    // fiber associated with it.
                    deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
                }
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(nextInstance);
            }
            function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
                var instance = fiber.stateNode;
                var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
                // TODO: Type this specific to this type of component.
                fiber.updateQueue = updatePayload;
                // If the update payload indicates that there is a change or if there
                // is a new ref we mark this as an update.
                if (updatePayload !== null) {
                    return true;
                }
                return false;
            }
            function prepareToHydrateHostTextInstance(fiber) {
                var textInstance = fiber.stateNode;
                var textContent = fiber.memoizedProps;
                var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
                {
                    if (shouldUpdate) {
                        // We assume that prepareToHydrateHostTextInstance is called in a context where the
                        // hydration parent is the parent host component of this host text.
                        var returnFiber = hydrationParentFiber;
                        if (returnFiber !== null) {
                            switch (returnFiber.tag) {
                                case HostRoot:
                                    {
                                        var parentContainer = returnFiber.stateNode.containerInfo;
                                        didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                                        break;
                                    }
                                case HostComponent:
                                    {
                                        var parentType = returnFiber.type;
                                        var parentProps = returnFiber.memoizedProps;
                                        var parentInstance = returnFiber.stateNode;
                                        didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                                        break;
                                    }
                            }
                        }
                    }
                }
                return shouldUpdate;
            }
            function popToNextHostParent(fiber) {
                var parent = fiber['return'];
                while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
                    parent = parent['return'];
                }
                hydrationParentFiber = parent;
            }
            function popHydrationState(fiber) {
                if (fiber !== hydrationParentFiber) {
                    // We're deeper than the current hydration context, inside an inserted
                    // tree.
                    return false;
                }
                if (!isHydrating) {
                    // If we're not currently hydrating but we're in a hydration context, then
                    // we were an insertion and now need to pop up reenter hydration of our
                    // siblings.
                    popToNextHostParent(fiber);
                    isHydrating = true;
                    return false;
                }
                var type = fiber.type;
                // If we have any remaining hydratable nodes, we need to delete them now.
                // We only do this deeper than head and body since they tend to have random
                // other nodes in them. We also ignore components with pure text content in
                // side of them.
                // TODO: Better heuristic.
                if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
                    var nextInstance = nextHydratableInstance;
                    while (nextInstance) {
                        deleteHydratableInstance(fiber, nextInstance);
                        nextInstance = getNextHydratableSibling(nextInstance);
                    }
                }
                popToNextHostParent(fiber);
                nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
                return true;
            }
            function resetHydrationState() {
                hydrationParentFiber = null;
                nextHydratableInstance = null;
                isHydrating = false;
            }
            return {
                enterHydrationState: enterHydrationState,
                resetHydrationState: resetHydrationState,
                tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
                prepareToHydrateHostInstance: prepareToHydrateHostInstance,
                prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
                popHydrationState: popHydrationState
            };
        };
        // This lets us hook into Fiber to debug what it's doing.
        // See https://github.com/facebook/react/pull/8033.
        // This is not part of the public API, not even for React DevTools.
        // You may only inject a debugTool if you work on React Fiber itself.
        var ReactFiberInstrumentation = {
            debugTool: null
        };
        var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
        var defaultShowDialog = function (capturedError) {
            return true;
        };
        var showDialog = defaultShowDialog;
        function logCapturedError(capturedError) {
            var logError = showDialog(capturedError);
            // Allow injected showDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) {
                return;
            }
            var error = capturedError.error;
            var suppressLogging = error && error.suppressReactErrorLogging;
            if (suppressLogging) {
                return;
            }
            {
                var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
                var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';
                var errorBoundaryMessage = void 0;
                // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
                if (errorBoundaryFound && errorBoundaryName) {
                    if (willRetry) {
                        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
                    }
                    else {
                        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
                    }
                }
                else {
                    errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
                }
                var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);
                // In development, we provide our own message with just the component stack.
                // We don't include the original error message and JS stack because the browser
                // has already printed it. Even if the application swallows the error, it is still
                // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
                console.error(combinedMessage);
            }
        }
        var invokeGuardedCallback$1 = ReactErrorUtils.invokeGuardedCallback;
        var hasCaughtError = ReactErrorUtils.hasCaughtError;
        var clearCaughtError = ReactErrorUtils.clearCaughtError;
        {
            var didWarnAboutStateTransition = false;
            var didWarnSetStateChildContext = false;
            var didWarnStateUpdateForUnmountedComponent = {};
            var warnAboutUpdateOnUnmounted = function (fiber) {
                var componentName = getComponentName(fiber) || 'ReactClass';
                if (didWarnStateUpdateForUnmountedComponent[componentName]) {
                    return;
                }
                warning(false, 'Can only update a mounted or mounting ' + 'component. This usually means you called setState, replaceState, ' + 'or forceUpdate on an unmounted component. This is a no-op.\n\nPlease ' + 'check the code for the %s component.', componentName);
                didWarnStateUpdateForUnmountedComponent[componentName] = true;
            };
            var warnAboutInvalidUpdates = function (instance) {
                switch (ReactDebugCurrentFiber.phase) {
                    case 'getChildContext':
                        if (didWarnSetStateChildContext) {
                            return;
                        }
                        warning(false, 'setState(...): Cannot call setState() inside getChildContext()');
                        didWarnSetStateChildContext = true;
                        break;
                    case 'render':
                        if (didWarnAboutStateTransition) {
                            return;
                        }
                        warning(false, 'Cannot update during an existing state transition (such as within ' + "`render` or another component's constructor). Render methods should " + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');
                        didWarnAboutStateTransition = true;
                        break;
                }
            };
        }
        var ReactFiberScheduler = function (config) {
            var hostContext = ReactFiberHostContext(config);
            var hydrationContext = ReactFiberHydrationContext(config);
            var popHostContainer = hostContext.popHostContainer, popHostContext = hostContext.popHostContext, resetHostContainer = hostContext.resetHostContainer;
            var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber), beginWork = _ReactFiberBeginWork.beginWork, beginFailedWork = _ReactFiberBeginWork.beginFailedWork;
            var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext), completeWork = _ReactFiberCompleteWo.completeWork;
            var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError), commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent, commitPlacement = _ReactFiberCommitWork.commitPlacement, commitDeletion = _ReactFiberCommitWork.commitDeletion, commitWork = _ReactFiberCommitWork.commitWork, commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles, commitAttachRef = _ReactFiberCommitWork.commitAttachRef, commitDetachRef = _ReactFiberCommitWork.commitDetachRef;
            var now = config.now, scheduleDeferredCallback = config.scheduleDeferredCallback, cancelDeferredCallback = config.cancelDeferredCallback, useSyncScheduling = config.useSyncScheduling, prepareForCommit = config.prepareForCommit, resetAfterCommit = config.resetAfterCommit;
            // Represents the current time in ms.
            var startTime = now();
            var mostRecentCurrentTime = msToExpirationTime(0);
            // Represents the expiration time that incoming updates should use. (If this
            // is NoWork, use the default strategy: async updates in async mode, sync
            // updates in sync mode.)
            var expirationContext = NoWork;
            var isWorking = false;
            // The next work in progress fiber that we're currently working on.
            var nextUnitOfWork = null;
            var nextRoot = null;
            // The time at which we're currently rendering work.
            var nextRenderExpirationTime = NoWork;
            // The next fiber with an effect that we're currently committing.
            var nextEffect = null;
            // Keep track of which fibers have captured an error that need to be handled.
            // Work is removed from this collection after componentDidCatch is called.
            var capturedErrors = null;
            // Keep track of which fibers have failed during the current batch of work.
            // This is a different set than capturedErrors, because it is not reset until
            // the end of the batch. This is needed to propagate errors correctly if a
            // subtree fails more than once.
            var failedBoundaries = null;
            // Error boundaries that captured an error during the current commit.
            var commitPhaseBoundaries = null;
            var firstUncaughtError = null;
            var didFatal = false;
            var isCommitting = false;
            var isUnmounting = false;
            // Used for performance tracking.
            var interruptedBy = null;
            function resetContextStack() {
                // Reset the stack
                reset$1();
                // Reset the cursors
                resetContext();
                resetHostContainer();
            }
            function commitAllHostEffects() {
                while (nextEffect !== null) {
                    {
                        ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
                    }
                    recordEffect();
                    var effectTag = nextEffect.effectTag;
                    if (effectTag & ContentReset) {
                        commitResetTextContent(nextEffect);
                    }
                    if (effectTag & Ref) {
                        var current = nextEffect.alternate;
                        if (current !== null) {
                            commitDetachRef(current);
                        }
                    }
                    // The following switch statement is only concerned about placement,
                    // updates, and deletions. To avoid needing to add a case for every
                    // possible bitmap value, we remove the secondary effects from the
                    // effect tag and switch on that value.
                    var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);
                    switch (primaryEffectTag) {
                        case Placement:
                            {
                                commitPlacement(nextEffect);
                                // Clear the "placement" from effect tag so that we know that this is inserted, before
                                // any life-cycles like componentDidMount gets called.
                                // TODO: findDOMNode doesn't rely on this any more but isMounted
                                // does and isMounted is deprecated anyway so we should be able
                                // to kill this.
                                nextEffect.effectTag &= ~Placement;
                                break;
                            }
                        case PlacementAndUpdate:
                            {
                                // Placement
                                commitPlacement(nextEffect);
                                // Clear the "placement" from effect tag so that we know that this is inserted, before
                                // any life-cycles like componentDidMount gets called.
                                nextEffect.effectTag &= ~Placement;
                                // Update
                                var _current = nextEffect.alternate;
                                commitWork(_current, nextEffect);
                                break;
                            }
                        case Update:
                            {
                                var _current2 = nextEffect.alternate;
                                commitWork(_current2, nextEffect);
                                break;
                            }
                        case Deletion:
                            {
                                isUnmounting = true;
                                commitDeletion(nextEffect);
                                isUnmounting = false;
                                break;
                            }
                    }
                    nextEffect = nextEffect.nextEffect;
                }
                {
                    ReactDebugCurrentFiber.resetCurrentFiber();
                }
            }
            function commitAllLifeCycles() {
                while (nextEffect !== null) {
                    var effectTag = nextEffect.effectTag;
                    if (effectTag & (Update | Callback)) {
                        recordEffect();
                        var current = nextEffect.alternate;
                        commitLifeCycles(current, nextEffect);
                    }
                    if (effectTag & Ref) {
                        recordEffect();
                        commitAttachRef(nextEffect);
                    }
                    if (effectTag & Err) {
                        recordEffect();
                        commitErrorHandling(nextEffect);
                    }
                    var next = nextEffect.nextEffect;
                    // Ensure that we clean these up so that we don't accidentally keep them.
                    // I'm not actually sure this matters because we can't reset firstEffect
                    // and lastEffect since they're on every node, not just the effectful
                    // ones. So we have to clean everything as we reuse nodes anyway.
                    nextEffect.nextEffect = null;
                    // Ensure that we reset the effectTag here so that we can rely on effect
                    // tags to reason about the current life-cycle.
                    nextEffect = next;
                }
            }
            function commitRoot(finishedWork) {
                // We keep track of this so that captureError can collect any boundaries
                // that capture an error during the commit phase. The reason these aren't
                // local to this function is because errors that occur during cWU are
                // captured elsewhere, to prevent the unmount from being interrupted.
                isWorking = true;
                isCommitting = true;
                startCommitTimer();
                var root = finishedWork.stateNode;
                !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                root.isReadyForCommit = false;
                // Reset this to null before calling lifecycles
                ReactCurrentOwner.current = null;
                var firstEffect = void 0;
                if (finishedWork.effectTag > PerformedWork) {
                    // A fiber's effect list consists only of its children, not itself. So if
                    // the root has an effect, we need to add it to the end of the list. The
                    // resulting list is the set that would belong to the root's parent, if
                    // it had one; that is, all the effects in the tree including the root.
                    if (finishedWork.lastEffect !== null) {
                        finishedWork.lastEffect.nextEffect = finishedWork;
                        firstEffect = finishedWork.firstEffect;
                    }
                    else {
                        firstEffect = finishedWork;
                    }
                }
                else {
                    // There is no effect on the root.
                    firstEffect = finishedWork.firstEffect;
                }
                prepareForCommit();
                // Commit all the side-effects within a tree. We'll do this in two passes.
                // The first pass performs all the host insertions, updates, deletions and
                // ref unmounts.
                nextEffect = firstEffect;
                startCommitHostEffectsTimer();
                while (nextEffect !== null) {
                    var didError = false;
                    var _error = void 0;
                    {
                        invokeGuardedCallback$1(null, commitAllHostEffects, null);
                        if (hasCaughtError()) {
                            didError = true;
                            _error = clearCaughtError();
                        }
                    }
                    if (didError) {
                        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        captureError(nextEffect, _error);
                        // Clean-up
                        if (nextEffect !== null) {
                            nextEffect = nextEffect.nextEffect;
                        }
                    }
                }
                stopCommitHostEffectsTimer();
                resetAfterCommit();
                // The work-in-progress tree is now the current tree. This must come after
                // the first pass of the commit phase, so that the previous tree is still
                // current during componentWillUnmount, but before the second pass, so that
                // the finished work is current during componentDidMount/Update.
                root.current = finishedWork;
                // In the second pass we'll perform all life-cycles and ref callbacks.
                // Life-cycles happen as a separate pass so that all placements, updates,
                // and deletions in the entire tree have already been invoked.
                // This pass also triggers any renderer-specific initial effects.
                nextEffect = firstEffect;
                startCommitLifeCyclesTimer();
                while (nextEffect !== null) {
                    var _didError = false;
                    var _error2 = void 0;
                    {
                        invokeGuardedCallback$1(null, commitAllLifeCycles, null);
                        if (hasCaughtError()) {
                            _didError = true;
                            _error2 = clearCaughtError();
                        }
                    }
                    if (_didError) {
                        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        captureError(nextEffect, _error2);
                        if (nextEffect !== null) {
                            nextEffect = nextEffect.nextEffect;
                        }
                    }
                }
                isCommitting = false;
                isWorking = false;
                stopCommitLifeCyclesTimer();
                stopCommitTimer();
                if (typeof onCommitRoot === 'function') {
                    onCommitRoot(finishedWork.stateNode);
                }
                if (true && ReactFiberInstrumentation_1.debugTool) {
                    ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
                }
                // If we caught any errors during this commit, schedule their boundaries
                // to update.
                if (commitPhaseBoundaries) {
                    commitPhaseBoundaries.forEach(scheduleErrorRecovery);
                    commitPhaseBoundaries = null;
                }
                if (firstUncaughtError !== null) {
                    var _error3 = firstUncaughtError;
                    firstUncaughtError = null;
                    onUncaughtError(_error3);
                }
                var remainingTime = root.current.expirationTime;
                if (remainingTime === NoWork) {
                    capturedErrors = null;
                    failedBoundaries = null;
                }
                return remainingTime;
            }
            function resetExpirationTime(workInProgress, renderTime) {
                if (renderTime !== Never && workInProgress.expirationTime === Never) {
                    // The children of this component are hidden. Don't bubble their
                    // expiration times.
                    return;
                }
                // Check for pending updates.
                var newExpirationTime = getUpdateExpirationTime(workInProgress);
                // TODO: Calls need to visit stateNode
                // Bubble up the earliest expiration time.
                var child = workInProgress.child;
                while (child !== null) {
                    if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
                        newExpirationTime = child.expirationTime;
                    }
                    child = child.sibling;
                }
                workInProgress.expirationTime = newExpirationTime;
            }
            function completeUnitOfWork(workInProgress) {
                while (true) {
                    // The current, flushed, state of this fiber is the alternate.
                    // Ideally nothing should rely on this, but relying on it here
                    // means that we don't need an additional field on the work in
                    // progress.
                    var current = workInProgress.alternate;
                    {
                        ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
                    }
                    var next = completeWork(current, workInProgress, nextRenderExpirationTime);
                    {
                        ReactDebugCurrentFiber.resetCurrentFiber();
                    }
                    var returnFiber = workInProgress['return'];
                    var siblingFiber = workInProgress.sibling;
                    resetExpirationTime(workInProgress, nextRenderExpirationTime);
                    if (next !== null) {
                        stopWorkTimer(workInProgress);
                        if (true && ReactFiberInstrumentation_1.debugTool) {
                            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                        }
                        // If completing this work spawned new work, do that next. We'll come
                        // back here again.
                        return next;
                    }
                    if (returnFiber !== null) {
                        // Append all the effects of the subtree and this fiber onto the effect
                        // list of the parent. The completion order of the children affects the
                        // side-effect order.
                        if (returnFiber.firstEffect === null) {
                            returnFiber.firstEffect = workInProgress.firstEffect;
                        }
                        if (workInProgress.lastEffect !== null) {
                            if (returnFiber.lastEffect !== null) {
                                returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                            }
                            returnFiber.lastEffect = workInProgress.lastEffect;
                        }
                        // If this fiber had side-effects, we append it AFTER the children's
                        // side-effects. We can perform certain side-effects earlier if
                        // needed, by doing multiple passes over the effect list. We don't want
                        // to schedule our own side-effect on our own list because if end up
                        // reusing children we'll schedule this effect onto itself since we're
                        // at the end.
                        var effectTag = workInProgress.effectTag;
                        // Skip both NoWork and PerformedWork tags when creating the effect list.
                        // PerformedWork effect is read by React DevTools but shouldn't be committed.
                        if (effectTag > PerformedWork) {
                            if (returnFiber.lastEffect !== null) {
                                returnFiber.lastEffect.nextEffect = workInProgress;
                            }
                            else {
                                returnFiber.firstEffect = workInProgress;
                            }
                            returnFiber.lastEffect = workInProgress;
                        }
                    }
                    stopWorkTimer(workInProgress);
                    if (true && ReactFiberInstrumentation_1.debugTool) {
                        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                    }
                    if (siblingFiber !== null) {
                        // If there is more work to do in this returnFiber, do that next.
                        return siblingFiber;
                    }
                    else if (returnFiber !== null) {
                        // If there's no more work in this returnFiber. Complete the returnFiber.
                        workInProgress = returnFiber;
                        continue;
                    }
                    else {
                        // We've reached the root.
                        var root = workInProgress.stateNode;
                        root.isReadyForCommit = true;
                        return null;
                    }
                }
                // Without this explicit null return Flow complains of invalid return type
                // TODO Remove the above while(true) loop
                // eslint-disable-next-line no-unreachable
                return null;
            }
            function performUnitOfWork(workInProgress) {
                // The current, flushed, state of this fiber is the alternate.
                // Ideally nothing should rely on this, but relying on it here
                // means that we don't need an additional field on the work in
                // progress.
                var current = workInProgress.alternate;
                // See if beginning this work spawns more work.
                startWorkTimer(workInProgress);
                {
                    ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
                }
                var next = beginWork(current, workInProgress, nextRenderExpirationTime);
                {
                    ReactDebugCurrentFiber.resetCurrentFiber();
                }
                if (true && ReactFiberInstrumentation_1.debugTool) {
                    ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
                }
                if (next === null) {
                    // If this doesn't spawn new work, complete the current work.
                    next = completeUnitOfWork(workInProgress);
                }
                ReactCurrentOwner.current = null;
                return next;
            }
            function performFailedUnitOfWork(workInProgress) {
                // The current, flushed, state of this fiber is the alternate.
                // Ideally nothing should rely on this, but relying on it here
                // means that we don't need an additional field on the work in
                // progress.
                var current = workInProgress.alternate;
                // See if beginning this work spawns more work.
                startWorkTimer(workInProgress);
                {
                    ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
                }
                var next = beginFailedWork(current, workInProgress, nextRenderExpirationTime);
                {
                    ReactDebugCurrentFiber.resetCurrentFiber();
                }
                if (true && ReactFiberInstrumentation_1.debugTool) {
                    ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
                }
                if (next === null) {
                    // If this doesn't spawn new work, complete the current work.
                    next = completeUnitOfWork(workInProgress);
                }
                ReactCurrentOwner.current = null;
                return next;
            }
            function workLoop(expirationTime) {
                if (capturedErrors !== null) {
                    // If there are unhandled errors, switch to the slow work loop.
                    // TODO: How to avoid this check in the fast path? Maybe the renderer
                    // could keep track of which roots have unhandled errors and call a
                    // forked version of renderRoot.
                    slowWorkLoopThatChecksForFailedWork(expirationTime);
                    return;
                }
                if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
                    return;
                }
                if (nextRenderExpirationTime <= mostRecentCurrentTime) {
                    // Flush all expired work.
                    while (nextUnitOfWork !== null) {
                        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                    }
                }
                else {
                    // Flush asynchronous work until the deadline runs out of time.
                    while (nextUnitOfWork !== null && !shouldYield()) {
                        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                    }
                }
            }
            function slowWorkLoopThatChecksForFailedWork(expirationTime) {
                if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
                    return;
                }
                if (nextRenderExpirationTime <= mostRecentCurrentTime) {
                    // Flush all expired work.
                    while (nextUnitOfWork !== null) {
                        if (hasCapturedError(nextUnitOfWork)) {
                            // Use a forked version of performUnitOfWork
                            nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
                        }
                        else {
                            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                        }
                    }
                }
                else {
                    // Flush asynchronous work until the deadline runs out of time.
                    while (nextUnitOfWork !== null && !shouldYield()) {
                        if (hasCapturedError(nextUnitOfWork)) {
                            // Use a forked version of performUnitOfWork
                            nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
                        }
                        else {
                            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                        }
                    }
                }
            }
            function renderRootCatchBlock(root, failedWork, boundary, expirationTime) {
                // We're going to restart the error boundary that captured the error.
                // Conceptually, we're unwinding the stack. We need to unwind the
                // context stack, too.
                unwindContexts(failedWork, boundary);
                // Restart the error boundary using a forked version of
                // performUnitOfWork that deletes the boundary's children. The entire
                // failed subree will be unmounted. During the commit phase, a special
                // lifecycle method is called on the error boundary, which triggers
                // a re-render.
                nextUnitOfWork = performFailedUnitOfWork(boundary);
                // Continue working.
                workLoop(expirationTime);
            }
            function renderRoot(root, expirationTime) {
                !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                isWorking = true;
                // We're about to mutate the work-in-progress tree. If the root was pending
                // commit, it no longer is: we'll need to complete it again.
                root.isReadyForCommit = false;
                // Check if we're starting from a fresh stack, or if we're resuming from
                // previously yielded work.
                if (root !== nextRoot || expirationTime !== nextRenderExpirationTime || nextUnitOfWork === null) {
                    // Reset the stack and start working from the root.
                    resetContextStack();
                    nextRoot = root;
                    nextRenderExpirationTime = expirationTime;
                    nextUnitOfWork = createWorkInProgress(nextRoot.current, null, expirationTime);
                }
                startWorkLoopTimer(nextUnitOfWork);
                var didError = false;
                var error = null;
                {
                    invokeGuardedCallback$1(null, workLoop, null, expirationTime);
                    if (hasCaughtError()) {
                        didError = true;
                        error = clearCaughtError();
                    }
                }
                // An error was thrown during the render phase.
                while (didError) {
                    if (didFatal) {
                        // This was a fatal error. Don't attempt to recover from it.
                        firstUncaughtError = error;
                        break;
                    }
                    var failedWork = nextUnitOfWork;
                    if (failedWork === null) {
                        // An error was thrown but there's no current unit of work. This can
                        // happen during the commit phase if there's a bug in the renderer.
                        didFatal = true;
                        continue;
                    }
                    // "Capture" the error by finding the nearest boundary. If there is no
                    // error boundary, we use the root.
                    var boundary = captureError(failedWork, error);
                    !(boundary !== null) ? invariant(false, 'Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                    if (didFatal) {
                        // The error we just captured was a fatal error. This happens
                        // when the error propagates to the root more than once.
                        continue;
                    }
                    didError = false;
                    error = null;
                    {
                        invokeGuardedCallback$1(null, renderRootCatchBlock, null, root, failedWork, boundary, expirationTime);
                        if (hasCaughtError()) {
                            didError = true;
                            error = clearCaughtError();
                            continue;
                        }
                    }
                    // We're finished working. Exit the error loop.
                    break;
                }
                var uncaughtError = firstUncaughtError;
                // We're done performing work. Time to clean up.
                stopWorkLoopTimer(interruptedBy);
                interruptedBy = null;
                isWorking = false;
                didFatal = false;
                firstUncaughtError = null;
                if (uncaughtError !== null) {
                    onUncaughtError(uncaughtError);
                }
                return root.isReadyForCommit ? root.current.alternate : null;
            }
            // Returns the boundary that captured the error, or null if the error is ignored
            function captureError(failedWork, error) {
                // It is no longer valid because we exited the user code.
                ReactCurrentOwner.current = null;
                {
                    ReactDebugCurrentFiber.resetCurrentFiber();
                }
                // Search for the nearest error boundary.
                var boundary = null;
                // Passed to logCapturedError()
                var errorBoundaryFound = false;
                var willRetry = false;
                var errorBoundaryName = null;
                // Host containers are a special case. If the failed work itself is a host
                // container, then it acts as its own boundary. In all other cases, we
                // ignore the work itself and only search through the parents.
                if (failedWork.tag === HostRoot) {
                    boundary = failedWork;
                    if (isFailedBoundary(failedWork)) {
                        // If this root already failed, there must have been an error when
                        // attempting to unmount it. This is a worst-case scenario and
                        // should only be possible if there's a bug in the renderer.
                        didFatal = true;
                    }
                }
                else {
                    var node = failedWork['return'];
                    while (node !== null && boundary === null) {
                        if (node.tag === ClassComponent) {
                            var instance = node.stateNode;
                            if (typeof instance.componentDidCatch === 'function') {
                                errorBoundaryFound = true;
                                errorBoundaryName = getComponentName(node);
                                // Found an error boundary!
                                boundary = node;
                                willRetry = true;
                            }
                        }
                        else if (node.tag === HostRoot) {
                            // Treat the root like a no-op error boundary
                            boundary = node;
                        }
                        if (isFailedBoundary(node)) {
                            // This boundary is already in a failed state.
                            // If we're currently unmounting, that means this error was
                            // thrown while unmounting a failed subtree. We should ignore
                            // the error.
                            if (isUnmounting) {
                                return null;
                            }
                            // If we're in the commit phase, we should check to see if
                            // this boundary already captured an error during this commit.
                            // This case exists because multiple errors can be thrown during
                            // a single commit without interruption.
                            if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {
                                // If so, we should ignore this error.
                                return null;
                            }
                            // The error should propagate to the next boundary -— we keep looking.
                            boundary = null;
                            willRetry = false;
                        }
                        node = node['return'];
                    }
                }
                if (boundary !== null) {
                    // Add to the collection of failed boundaries. This lets us know that
                    // subsequent errors in this subtree should propagate to the next boundary.
                    if (failedBoundaries === null) {
                        failedBoundaries = new Set();
                    }
                    failedBoundaries.add(boundary);
                    // This method is unsafe outside of the begin and complete phases.
                    // We might be in the commit phase when an error is captured.
                    // The risk is that the return path from this Fiber may not be accurate.
                    // That risk is acceptable given the benefit of providing users more context.
                    var _componentStack = getStackAddendumByWorkInProgressFiber(failedWork);
                    var _componentName = getComponentName(failedWork);
                    // Add to the collection of captured errors. This is stored as a global
                    // map of errors and their component stack location keyed by the boundaries
                    // that capture them. We mostly use this Map as a Set; it's a Map only to
                    // avoid adding a field to Fiber to store the error.
                    if (capturedErrors === null) {
                        capturedErrors = new Map();
                    }
                    var capturedError = {
                        componentName: _componentName,
                        componentStack: _componentStack,
                        error: error,
                        errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
                        errorBoundaryFound: errorBoundaryFound,
                        errorBoundaryName: errorBoundaryName,
                        willRetry: willRetry
                    };
                    capturedErrors.set(boundary, capturedError);
                    try {
                        logCapturedError(capturedError);
                    }
                    catch (e) {
                        // Prevent cycle if logCapturedError() throws.
                        // A cycle may still occur if logCapturedError renders a component that throws.
                        var suppressLogging = e && e.suppressReactErrorLogging;
                        if (!suppressLogging) {
                            console.error(e);
                        }
                    }
                    // If we're in the commit phase, defer scheduling an update on the
                    // boundary until after the commit is complete
                    if (isCommitting) {
                        if (commitPhaseBoundaries === null) {
                            commitPhaseBoundaries = new Set();
                        }
                        commitPhaseBoundaries.add(boundary);
                    }
                    else {
                        // Otherwise, schedule an update now.
                        // TODO: Is this actually necessary during the render phase? Is it
                        // possible to unwind and continue rendering at the same priority,
                        // without corrupting internal state?
                        scheduleErrorRecovery(boundary);
                    }
                    return boundary;
                }
                else if (firstUncaughtError === null) {
                    // If no boundary is found, we'll need to throw the error
                    firstUncaughtError = error;
                }
                return null;
            }
            function hasCapturedError(fiber) {
                // TODO: capturedErrors should store the boundary instance, to avoid needing
                // to check the alternate.
                return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));
            }
            function isFailedBoundary(fiber) {
                // TODO: failedBoundaries should store the boundary instance, to avoid
                // needing to check the alternate.
                return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));
            }
            function commitErrorHandling(effectfulFiber) {
                var capturedError = void 0;
                if (capturedErrors !== null) {
                    capturedError = capturedErrors.get(effectfulFiber);
                    capturedErrors['delete'](effectfulFiber);
                    if (capturedError == null) {
                        if (effectfulFiber.alternate !== null) {
                            effectfulFiber = effectfulFiber.alternate;
                            capturedError = capturedErrors.get(effectfulFiber);
                            capturedErrors['delete'](effectfulFiber);
                        }
                    }
                }
                !(capturedError != null) ? invariant(false, 'No error for given unit of work. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                switch (effectfulFiber.tag) {
                    case ClassComponent:
                        var instance = effectfulFiber.stateNode;
                        var info = {
                            componentStack: capturedError.componentStack
                        };
                        // Allow the boundary to handle the error, usually by scheduling
                        // an update to itself
                        instance.componentDidCatch(capturedError.error, info);
                        return;
                    case HostRoot:
                        if (firstUncaughtError === null) {
                            firstUncaughtError = capturedError.error;
                        }
                        return;
                    default:
                        invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
                }
            }
            function unwindContexts(from, to) {
                var node = from;
                while (node !== null) {
                    switch (node.tag) {
                        case ClassComponent:
                            popContextProvider(node);
                            break;
                        case HostComponent:
                            popHostContext(node);
                            break;
                        case HostRoot:
                            popHostContainer(node);
                            break;
                        case HostPortal:
                            popHostContainer(node);
                            break;
                    }
                    if (node === to || node.alternate === to) {
                        stopFailedWorkTimer(node);
                        break;
                    }
                    else {
                        stopWorkTimer(node);
                    }
                    node = node['return'];
                }
            }
            function computeAsyncExpiration() {
                // Given the current clock time, returns an expiration time. We use rounding
                // to batch like updates together.
                // Should complete within ~1000ms. 1200ms max.
                var currentTime = recalculateCurrentTime();
                var expirationMs = 1000;
                var bucketSizeMs = 200;
                return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
            }
            function computeExpirationForFiber(fiber) {
                var expirationTime = void 0;
                if (expirationContext !== NoWork) {
                    // An explicit expiration context was set;
                    expirationTime = expirationContext;
                }
                else if (isWorking) {
                    if (isCommitting) {
                        // Updates that occur during the commit phase should have sync priority
                        // by default.
                        expirationTime = Sync;
                    }
                    else {
                        // Updates during the render phase should expire at the same time as
                        // the work that is being rendered.
                        expirationTime = nextRenderExpirationTime;
                    }
                }
                else {
                    // No explicit expiration context was set, and we're not currently
                    // performing work. Calculate a new expiration time.
                    if (useSyncScheduling && !(fiber.internalContextTag & AsyncUpdates)) {
                        // This is a sync update
                        expirationTime = Sync;
                    }
                    else {
                        // This is an async update
                        expirationTime = computeAsyncExpiration();
                    }
                }
                return expirationTime;
            }
            function scheduleWork(fiber, expirationTime) {
                return scheduleWorkImpl(fiber, expirationTime, false);
            }
            function checkRootNeedsClearing(root, fiber, expirationTime) {
                if (!isWorking && root === nextRoot && expirationTime < nextRenderExpirationTime) {
                    // Restart the root from the top.
                    if (nextUnitOfWork !== null) {
                        // This is an interruption. (Used for performance tracking.)
                        interruptedBy = fiber;
                    }
                    nextRoot = null;
                    nextUnitOfWork = null;
                    nextRenderExpirationTime = NoWork;
                }
            }
            function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
                recordScheduleUpdate();
                {
                    if (!isErrorRecovery && fiber.tag === ClassComponent) {
                        var instance = fiber.stateNode;
                        warnAboutInvalidUpdates(instance);
                    }
                }
                var node = fiber;
                while (node !== null) {
                    // Walk the parent path to the root and update each node's
                    // expiration time.
                    if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
                        node.expirationTime = expirationTime;
                    }
                    if (node.alternate !== null) {
                        if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
                            node.alternate.expirationTime = expirationTime;
                        }
                    }
                    if (node['return'] === null) {
                        if (node.tag === HostRoot) {
                            var root = node.stateNode;
                            checkRootNeedsClearing(root, fiber, expirationTime);
                            requestWork(root, expirationTime);
                            checkRootNeedsClearing(root, fiber, expirationTime);
                        }
                        else {
                            {
                                if (!isErrorRecovery && fiber.tag === ClassComponent) {
                                    warnAboutUpdateOnUnmounted(fiber);
                                }
                            }
                            return;
                        }
                    }
                    node = node['return'];
                }
            }
            function scheduleErrorRecovery(fiber) {
                scheduleWorkImpl(fiber, Sync, true);
            }
            function recalculateCurrentTime() {
                // Subtract initial time so it fits inside 32bits
                var ms = now() - startTime;
                mostRecentCurrentTime = msToExpirationTime(ms);
                return mostRecentCurrentTime;
            }
            function deferredUpdates(fn) {
                var previousExpirationContext = expirationContext;
                expirationContext = computeAsyncExpiration();
                try {
                    return fn();
                }
                finally {
                    expirationContext = previousExpirationContext;
                }
            }
            function syncUpdates(fn) {
                var previousExpirationContext = expirationContext;
                expirationContext = Sync;
                try {
                    return fn();
                }
                finally {
                    expirationContext = previousExpirationContext;
                }
            }
            // TODO: Everything below this is written as if it has been lifted to the
            // renderers. I'll do this in a follow-up.
            // Linked-list of roots
            var firstScheduledRoot = null;
            var lastScheduledRoot = null;
            var callbackExpirationTime = NoWork;
            var callbackID = -1;
            var isRendering = false;
            var nextFlushedRoot = null;
            var nextFlushedExpirationTime = NoWork;
            var deadlineDidExpire = false;
            var hasUnhandledError = false;
            var unhandledError = null;
            var deadline = null;
            var isBatchingUpdates = false;
            var isUnbatchingUpdates = false;
            // Use these to prevent an infinite loop of nested updates
            var NESTED_UPDATE_LIMIT = 1000;
            var nestedUpdateCount = 0;
            var timeHeuristicForUnitOfWork = 1;
            function scheduleCallbackWithExpiration(expirationTime) {
                if (callbackExpirationTime !== NoWork) {
                    // A callback is already scheduled. Check its expiration time (timeout).
                    if (expirationTime > callbackExpirationTime) {
                        // Existing callback has sufficient timeout. Exit.
                        return;
                    }
                    else {
                        // Existing callback has insufficient timeout. Cancel and schedule a
                        // new one.
                        cancelDeferredCallback(callbackID);
                    }
                    // The request callback timer is already running. Don't start a new one.
                }
                else {
                    startRequestCallbackTimer();
                }
                // Compute a timeout for the given expiration time.
                var currentMs = now() - startTime;
                var expirationMs = expirationTimeToMs(expirationTime);
                var timeout = expirationMs - currentMs;
                callbackExpirationTime = expirationTime;
                callbackID = scheduleDeferredCallback(performAsyncWork, { timeout: timeout });
            }
            // requestWork is called by the scheduler whenever a root receives an update.
            // It's up to the renderer to call renderRoot at some point in the future.
            function requestWork(root, expirationTime) {
                if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                    invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
                }
                // Add the root to the schedule.
                // Check if this root is already part of the schedule.
                if (root.nextScheduledRoot === null) {
                    // This root is not already scheduled. Add it.
                    root.remainingExpirationTime = expirationTime;
                    if (lastScheduledRoot === null) {
                        firstScheduledRoot = lastScheduledRoot = root;
                        root.nextScheduledRoot = root;
                    }
                    else {
                        lastScheduledRoot.nextScheduledRoot = root;
                        lastScheduledRoot = root;
                        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                    }
                }
                else {
                    // This root is already scheduled, but its priority may have increased.
                    var remainingExpirationTime = root.remainingExpirationTime;
                    if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
                        // Update the priority.
                        root.remainingExpirationTime = expirationTime;
                    }
                }
                if (isRendering) {
                    // Prevent reentrancy. Remaining work will be scheduled at the end of
                    // the currently rendering batch.
                    return;
                }
                if (isBatchingUpdates) {
                    // Flush work at the end of the batch.
                    if (isUnbatchingUpdates) {
                        // ...unless we're inside unbatchedUpdates, in which case we should
                        // flush it now.
                        nextFlushedRoot = root;
                        nextFlushedExpirationTime = Sync;
                        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);
                    }
                    return;
                }
                // TODO: Get rid of Sync and use current time?
                if (expirationTime === Sync) {
                    performWork(Sync, null);
                }
                else {
                    scheduleCallbackWithExpiration(expirationTime);
                }
            }
            function findHighestPriorityRoot() {
                var highestPriorityWork = NoWork;
                var highestPriorityRoot = null;
                if (lastScheduledRoot !== null) {
                    var previousScheduledRoot = lastScheduledRoot;
                    var root = firstScheduledRoot;
                    while (root !== null) {
                        var remainingExpirationTime = root.remainingExpirationTime;
                        if (remainingExpirationTime === NoWork) {
                            // This root no longer has work. Remove it from the scheduler.
                            // TODO: This check is redudant, but Flow is confused by the branch
                            // below where we set lastScheduledRoot to null, even though we break
                            // from the loop right after.
                            !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                            if (root === root.nextScheduledRoot) {
                                // This is the only root in the list.
                                root.nextScheduledRoot = null;
                                firstScheduledRoot = lastScheduledRoot = null;
                                break;
                            }
                            else if (root === firstScheduledRoot) {
                                // This is the first root in the list.
                                var next = root.nextScheduledRoot;
                                firstScheduledRoot = next;
                                lastScheduledRoot.nextScheduledRoot = next;
                                root.nextScheduledRoot = null;
                            }
                            else if (root === lastScheduledRoot) {
                                // This is the last root in the list.
                                lastScheduledRoot = previousScheduledRoot;
                                lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                                root.nextScheduledRoot = null;
                                break;
                            }
                            else {
                                previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
                                root.nextScheduledRoot = null;
                            }
                            root = previousScheduledRoot.nextScheduledRoot;
                        }
                        else {
                            if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
                                // Update the priority, if it's higher
                                highestPriorityWork = remainingExpirationTime;
                                highestPriorityRoot = root;
                            }
                            if (root === lastScheduledRoot) {
                                break;
                            }
                            previousScheduledRoot = root;
                            root = root.nextScheduledRoot;
                        }
                    }
                }
                // If the next root is the same as the previous root, this is a nested
                // update. To prevent an infinite loop, increment the nested update count.
                var previousFlushedRoot = nextFlushedRoot;
                if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot) {
                    nestedUpdateCount++;
                }
                else {
                    // Reset whenever we switch roots.
                    nestedUpdateCount = 0;
                }
                nextFlushedRoot = highestPriorityRoot;
                nextFlushedExpirationTime = highestPriorityWork;
            }
            function performAsyncWork(dl) {
                performWork(NoWork, dl);
            }
            function performWork(minExpirationTime, dl) {
                deadline = dl;
                // Keep working on roots until there's no more work, or until the we reach
                // the deadline.
                findHighestPriorityRoot();
                if (enableUserTimingAPI && deadline !== null) {
                    var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
                    stopRequestCallbackTimer(didExpire);
                }
                while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire) {
                    performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);
                    // Find the next highest priority work.
                    findHighestPriorityRoot();
                }
                // We're done flushing work. Either we ran out of time in this callback,
                // or there's no more work left with sufficient priority.
                // If we're inside a callback, set this to false since we just completed it.
                if (deadline !== null) {
                    callbackExpirationTime = NoWork;
                    callbackID = -1;
                }
                // If there's work left over, schedule a new callback.
                if (nextFlushedExpirationTime !== NoWork) {
                    scheduleCallbackWithExpiration(nextFlushedExpirationTime);
                }
                // Clean-up.
                deadline = null;
                deadlineDidExpire = false;
                nestedUpdateCount = 0;
                if (hasUnhandledError) {
                    var _error4 = unhandledError;
                    unhandledError = null;
                    hasUnhandledError = false;
                    throw _error4;
                }
            }
            function performWorkOnRoot(root, expirationTime) {
                !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                isRendering = true;
                // Check if this is async work or sync/expired work.
                // TODO: Pass current time as argument to renderRoot, commitRoot
                if (expirationTime <= recalculateCurrentTime()) {
                    // Flush sync work.
                    var finishedWork = root.finishedWork;
                    if (finishedWork !== null) {
                        // This root is already complete. We can commit it.
                        root.finishedWork = null;
                        root.remainingExpirationTime = commitRoot(finishedWork);
                    }
                    else {
                        root.finishedWork = null;
                        finishedWork = renderRoot(root, expirationTime);
                        if (finishedWork !== null) {
                            // We've completed the root. Commit it.
                            root.remainingExpirationTime = commitRoot(finishedWork);
                        }
                    }
                }
                else {
                    // Flush async work.
                    var _finishedWork = root.finishedWork;
                    if (_finishedWork !== null) {
                        // This root is already complete. We can commit it.
                        root.finishedWork = null;
                        root.remainingExpirationTime = commitRoot(_finishedWork);
                    }
                    else {
                        root.finishedWork = null;
                        _finishedWork = renderRoot(root, expirationTime);
                        if (_finishedWork !== null) {
                            // We've completed the root. Check the deadline one more time
                            // before committing.
                            if (!shouldYield()) {
                                // Still time left. Commit the root.
                                root.remainingExpirationTime = commitRoot(_finishedWork);
                            }
                            else {
                                // There's no time left. Mark this root as complete. We'll come
                                // back and commit it later.
                                root.finishedWork = _finishedWork;
                            }
                        }
                    }
                }
                isRendering = false;
            }
            // When working on async work, the reconciler asks the renderer if it should
            // yield execution. For DOM, we implement this with requestIdleCallback.
            function shouldYield() {
                if (deadline === null) {
                    return false;
                }
                if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                    // Disregard deadline.didTimeout. Only expired work should be flushed
                    // during a timeout. This path is only hit for non-expired work.
                    return false;
                }
                deadlineDidExpire = true;
                return true;
            }
            // TODO: Not happy about this hook. Conceptually, renderRoot should return a
            // tuple of (isReadyForCommit, didError, error)
            function onUncaughtError(error) {
                !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                // Unschedule this root so we don't work on it again until there's
                // another update.
                nextFlushedRoot.remainingExpirationTime = NoWork;
                if (!hasUnhandledError) {
                    hasUnhandledError = true;
                    unhandledError = error;
                }
            }
            // TODO: Batching should be implemented at the renderer level, not inside
            // the reconciler.
            function batchedUpdates(fn, a) {
                var previousIsBatchingUpdates = isBatchingUpdates;
                isBatchingUpdates = true;
                try {
                    return fn(a);
                }
                finally {
                    isBatchingUpdates = previousIsBatchingUpdates;
                    if (!isBatchingUpdates && !isRendering) {
                        performWork(Sync, null);
                    }
                }
            }
            // TODO: Batching should be implemented at the renderer level, not inside
            // the reconciler.
            function unbatchedUpdates(fn) {
                if (isBatchingUpdates && !isUnbatchingUpdates) {
                    isUnbatchingUpdates = true;
                    try {
                        return fn();
                    }
                    finally {
                        isUnbatchingUpdates = false;
                    }
                }
                return fn();
            }
            // TODO: Batching should be implemented at the renderer level, not within
            // the reconciler.
            function flushSync(fn) {
                var previousIsBatchingUpdates = isBatchingUpdates;
                isBatchingUpdates = true;
                try {
                    return syncUpdates(fn);
                }
                finally {
                    isBatchingUpdates = previousIsBatchingUpdates;
                    !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
                    performWork(Sync, null);
                }
            }
            return {
                computeAsyncExpiration: computeAsyncExpiration,
                computeExpirationForFiber: computeExpirationForFiber,
                scheduleWork: scheduleWork,
                batchedUpdates: batchedUpdates,
                unbatchedUpdates: unbatchedUpdates,
                flushSync: flushSync,
                deferredUpdates: deferredUpdates
            };
        };
        {
            var didWarnAboutNestedUpdates = false;
        }
        // 0 is PROD, 1 is DEV.
        // Might add PROFILE later.
        function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
                return emptyObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
        }
        var ReactFiberReconciler$1 = function (config) {
            var getPublicInstance = config.getPublicInstance;
            var _ReactFiberScheduler = ReactFiberScheduler(config), computeAsyncExpiration = _ReactFiberScheduler.computeAsyncExpiration, computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber, scheduleWork = _ReactFiberScheduler.scheduleWork, batchedUpdates = _ReactFiberScheduler.batchedUpdates, unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates, flushSync = _ReactFiberScheduler.flushSync, deferredUpdates = _ReactFiberScheduler.deferredUpdates;
            function scheduleTopLevelUpdate(current, element, callback) {
                {
                    if (ReactDebugCurrentFiber.phase === 'render' && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
                        didWarnAboutNestedUpdates = true;
                        warning(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(ReactDebugCurrentFiber.current) || 'Unknown');
                    }
                }
                callback = callback === undefined ? null : callback;
                {
                    warning(callback === null || typeof callback === 'function', 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
                }
                var expirationTime = void 0;
                // Check if the top-level element is an async wrapper component. If so,
                // treat updates to the root as async. This is a bit weird but lets us
                // avoid a separate `renderAsync` API.
                if (enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true) {
                    expirationTime = computeAsyncExpiration();
                }
                else {
                    expirationTime = computeExpirationForFiber(current);
                }
                var update = {
                    expirationTime: expirationTime,
                    partialState: { element: element },
                    callback: callback,
                    isReplace: false,
                    isForced: false,
                    nextCallback: null,
                    next: null
                };
                insertUpdateIntoFiber(current, update);
                scheduleWork(current, expirationTime);
            }
            function findHostInstance(fiber) {
                var hostFiber = findCurrentHostFiber(fiber);
                if (hostFiber === null) {
                    return null;
                }
                return hostFiber.stateNode;
            }
            return {
                createContainer: function (containerInfo, hydrate) {
                    return createFiberRoot(containerInfo, hydrate);
                },
                updateContainer: function (element, container, parentComponent, callback) {
                    // TODO: If this is a nested container, this won't be the root.
                    var current = container.current;
                    {
                        if (ReactFiberInstrumentation_1.debugTool) {
                            if (current.alternate === null) {
                                ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
                            }
                            else if (element === null) {
                                ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
                            }
                            else {
                                ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
                            }
                        }
                    }
                    var context = getContextForSubtree(parentComponent);
                    if (container.context === null) {
                        container.context = context;
                    }
                    else {
                        container.pendingContext = context;
                    }
                    scheduleTopLevelUpdate(current, element, callback);
                },
                batchedUpdates: batchedUpdates,
                unbatchedUpdates: unbatchedUpdates,
                deferredUpdates: deferredUpdates,
                flushSync: flushSync,
                getPublicRootInstance: function (container) {
                    var containerFiber = container.current;
                    if (!containerFiber.child) {
                        return null;
                    }
                    switch (containerFiber.child.tag) {
                        case HostComponent:
                            return getPublicInstance(containerFiber.child.stateNode);
                        default:
                            return containerFiber.child.stateNode;
                    }
                },
                findHostInstance: findHostInstance,
                findHostInstanceWithNoPortals: function (fiber) {
                    var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
                    if (hostFiber === null) {
                        return null;
                    }
                    return hostFiber.stateNode;
                },
                injectIntoDevTools: function (devToolsConfig) {
                    var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
                    return injectInternals(_assign({}, devToolsConfig, {
                        findHostInstanceByFiber: function (fiber) {
                            return findHostInstance(fiber);
                        },
                        findFiberByHostInstance: function (instance) {
                            if (!findFiberByHostInstance) {
                                // Might not be implemented by the renderer.
                                return null;
                            }
                            return findFiberByHostInstance(instance);
                        }
                    }));
                }
            };
        };
        var ReactFiberReconciler$2 = Object.freeze({
            default: ReactFiberReconciler$1
        });
        var ReactFiberReconciler$3 = (ReactFiberReconciler$2 && ReactFiberReconciler$1) || ReactFiberReconciler$2;
        // TODO: bundle Flow types with the package.
        // TODO: decide on the top-level export form.
        // This is hacky but makes it work with both Rollup and Jest.
        var reactReconciler = ReactFiberReconciler$3['default'] ? ReactFiberReconciler$3['default'] : ReactFiberReconciler$3;
        function createPortal$1(children, containerInfo, 
        // TODO: figure out the API for cross-renderer implementation.
        implementation) {
            var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            return {
                // This tag allow us to uniquely identify this as a React Portal
                $$typeof: REACT_PORTAL_TYPE,
                key: key == null ? null : '' + key,
                children: children,
                containerInfo: containerInfo,
                implementation: implementation
            };
        }
        // TODO: this is special because it gets imported during build.
        var ReactVersion = '16.2.0';
        // a requestAnimationFrame, storing the time for the start of the frame, then
        // scheduling a postMessage which gets scheduled after paint. Within the
        // postMessage handler do as much work as possible until time + frame rate.
        // By separating the idle call into a separate event tick we ensure that
        // layout, paint and other browser work is counted against the available time.
        // The frame rate is dynamically adjusted.
        {
            if (ExecutionEnvironment.canUseDOM && typeof requestAnimationFrame !== 'function') {
                warning(false, 'React depends on requestAnimationFrame. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
            }
        }
        var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
        var now = void 0;
        if (hasNativePerformanceNow) {
            now = function () {
                return performance.now();
            };
        }
        else {
            now = function () {
                return Date.now();
            };
        }
        // TODO: There's no way to cancel, because Fiber doesn't atm.
        var rIC = void 0;
        var cIC = void 0;
        if (!ExecutionEnvironment.canUseDOM) {
            rIC = function (frameCallback) {
                return setTimeout(function () {
                    frameCallback({
                        timeRemaining: function () {
                            return Infinity;
                        }
                    });
                });
            };
            cIC = function (timeoutID) {
                clearTimeout(timeoutID);
            };
        }
        else if (typeof requestIdleCallback !== 'function' || typeof cancelIdleCallback !== 'function') {
            // Polyfill requestIdleCallback and cancelIdleCallback
            var scheduledRICCallback = null;
            var isIdleScheduled = false;
            var timeoutTime = -1;
            var isAnimationFrameScheduled = false;
            var frameDeadline = 0;
            // We start out assuming that we run at 30fps but then the heuristic tracking
            // will adjust this value to a faster fps if we get more frequent animation
            // frames.
            var previousFrameTime = 33;
            var activeFrameTime = 33;
            var frameDeadlineObject;
            if (hasNativePerformanceNow) {
                frameDeadlineObject = {
                    didTimeout: false,
                    timeRemaining: function () {
                        // We assume that if we have a performance timer that the rAF callback
                        // gets a performance timer value. Not sure if this is always true.
                        var remaining = frameDeadline - performance.now();
                        return remaining > 0 ? remaining : 0;
                    }
                };
            }
            else {
                frameDeadlineObject = {
                    didTimeout: false,
                    timeRemaining: function () {
                        // Fallback to Date.now()
                        var remaining = frameDeadline - Date.now();
                        return remaining > 0 ? remaining : 0;
                    }
                };
            }
            // We use the postMessage trick to defer idle work until after the repaint.
            var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
            var idleTick = function (event) {
                if (event.source !== window || event.data !== messageKey) {
                    return;
                }
                isIdleScheduled = false;
                var currentTime = now();
                if (frameDeadline - currentTime <= 0) {
                    // There's no time left in this idle period. Check if the callback has
                    // a timeout and whether it's been exceeded.
                    if (timeoutTime !== -1 && timeoutTime <= currentTime) {
                        // Exceeded the timeout. Invoke the callback even though there's no
                        // time left.
                        frameDeadlineObject.didTimeout = true;
                    }
                    else {
                        // No timeout.
                        if (!isAnimationFrameScheduled) {
                            // Schedule another animation callback so we retry later.
                            isAnimationFrameScheduled = true;
                            requestAnimationFrame(animationTick);
                        }
                        // Exit without invoking the callback.
                        return;
                    }
                }
                else {
                    // There's still time left in this idle period.
                    frameDeadlineObject.didTimeout = false;
                }
                timeoutTime = -1;
                var callback = scheduledRICCallback;
                scheduledRICCallback = null;
                if (callback !== null) {
                    callback(frameDeadlineObject);
                }
            };
            // Assumes that we have addEventListener in this environment. Might need
            // something better for old IE.
            window.addEventListener('message', idleTick, false);
            var animationTick = function (rafTime) {
                isAnimationFrameScheduled = false;
                var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
                if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
                    if (nextFrameTime < 8) {
                        // Defensive coding. We don't support higher frame rates than 120hz.
                        // If we get lower than that, it is probably a bug.
                        nextFrameTime = 8;
                    }
                    // If one frame goes long, then the next one can be short to catch up.
                    // If two frames are short in a row, then that's an indication that we
                    // actually have a higher frame rate than what we're currently optimizing.
                    // We adjust our heuristic dynamically accordingly. For example, if we're
                    // running on 120hz display or 90hz VR display.
                    // Take the max of the two in case one of them was an anomaly due to
                    // missed frame deadlines.
                    activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
                }
                else {
                    previousFrameTime = nextFrameTime;
                }
                frameDeadline = rafTime + activeFrameTime;
                if (!isIdleScheduled) {
                    isIdleScheduled = true;
                    window.postMessage(messageKey, '*');
                }
            };
            rIC = function (callback, options) {
                // This assumes that we only schedule one callback at a time because that's
                // how Fiber uses it.
                scheduledRICCallback = callback;
                if (options != null && typeof options.timeout === 'number') {
                    timeoutTime = now() + options.timeout;
                }
                if (!isAnimationFrameScheduled) {
                    // If rAF didn't already schedule one, we need to schedule a frame.
                    // TODO: If this rAF doesn't materialize because the browser throttles, we
                    // might want to still have setTimeout trigger rIC as a backup to ensure
                    // that we keep performing work.
                    isAnimationFrameScheduled = true;
                    requestAnimationFrame(animationTick);
                }
                return 0;
            };
            cIC = function () {
                scheduledRICCallback = null;
                isIdleScheduled = false;
                timeoutTime = -1;
            };
        }
        else {
            rIC = window.requestIdleCallback;
            cIC = window.cancelIdleCallback;
        }
        /**
         * Forked from fbjs/warning:
         * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
         *
         * Only change is we use console.warn instead of console.error,
         * and do nothing when 'console' is not supported.
         * This really simplifies the code.
         * ---
         * Similar to invariant but only logs a warning if the condition is not met.
         * This can be used to log issues in development environments in critical
         * paths. Removing the logging code for production environments will keep the
         * same logic and follow the same code paths.
         */
        var lowPriorityWarning = function () { };
        {
            var printWarning = function (format) {
                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                }
                var argIndex = 0;
                var message = 'Warning: ' + format.replace(/%s/g, function () {
                    return args[argIndex++];
                });
                if (typeof console !== 'undefined') {
                    console.warn(message);
                }
                try {
                    // --- Welcome to debugging React ---
                    // This error was thrown as a convenience so that you can use this stack
                    // to find the callsite that caused this warning to fire.
                    throw new Error(message);
                }
                catch (x) { }
            };
            lowPriorityWarning = function (condition, format) {
                if (format === undefined) {
                    throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
                }
                if (!condition) {
                    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                        args[_key2 - 2] = arguments[_key2];
                    }
                    printWarning.apply(undefined, [format].concat(args));
                }
            };
        }
        var lowPriorityWarning$1 = lowPriorityWarning;
        // isAttributeNameSafe() is currently duplicated in DOMMarkupOperations.
        // TODO: Find a better place for this.
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
            if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
                return true;
            }
            if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
                return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
                validatedAttributeNameCache[attributeName] = true;
                return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
                warning(false, 'Invalid attribute name: `%s`', attributeName);
            }
            return false;
        }
        // shouldIgnoreValue() is currently duplicated in DOMMarkupOperations.
        // TODO: Find a better place for this.
        function shouldIgnoreValue(propertyInfo, value) {
            return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
        }
        /**
         * Operations for dealing with DOM properties.
         */
        /**
         * Get the value for a property on a node. Only used in DEV for SSR validation.
         * The "expected" argument is used as a hint of what the expected value is.
         * Some properties have multiple equivalent values.
         */
        function getValueForProperty(node, name, expected) {
            {
                var propertyInfo = getPropertyInfo(name);
                if (propertyInfo) {
                    var mutationMethod = propertyInfo.mutationMethod;
                    if (mutationMethod || propertyInfo.mustUseProperty) {
                        return node[propertyInfo.propertyName];
                    }
                    else {
                        var attributeName = propertyInfo.attributeName;
                        var stringValue = null;
                        if (propertyInfo.hasOverloadedBooleanValue) {
                            if (node.hasAttribute(attributeName)) {
                                var value = node.getAttribute(attributeName);
                                if (value === '') {
                                    return true;
                                }
                                if (shouldIgnoreValue(propertyInfo, expected)) {
                                    return value;
                                }
                                if (value === '' + expected) {
                                    return expected;
                                }
                                return value;
                            }
                        }
                        else if (node.hasAttribute(attributeName)) {
                            if (shouldIgnoreValue(propertyInfo, expected)) {
                                // We had an attribute but shouldn't have had one, so read it
                                // for the error message.
                                return node.getAttribute(attributeName);
                            }
                            if (propertyInfo.hasBooleanValue) {
                                // If this was a boolean, it doesn't matter what the value is
                                // the fact that we have it is the same as the expected.
                                return expected;
                            }
                            // Even if this property uses a namespace we use getAttribute
                            // because we assume its namespaced name is the same as our config.
                            // To use getAttributeNS we need the local name which we don't have
                            // in our config atm.
                            stringValue = node.getAttribute(attributeName);
                        }
                        if (shouldIgnoreValue(propertyInfo, expected)) {
                            return stringValue === null ? expected : stringValue;
                        }
                        else if (stringValue === '' + expected) {
                            return expected;
                        }
                        else {
                            return stringValue;
                        }
                    }
                }
            }
        }
        /**
         * Get the value for a attribute on a node. Only used in DEV for SSR validation.
         * The third argument is used as a hint of what the expected value is. Some
         * attributes have multiple equivalent values.
         */
        function getValueForAttribute(node, name, expected) {
            {
                if (!isAttributeNameSafe(name)) {
                    return;
                }
                if (!node.hasAttribute(name)) {
                    return expected === undefined ? undefined : null;
                }
                var value = node.getAttribute(name);
                if (value === '' + expected) {
                    return expected;
                }
                return value;
            }
        }
        /**
         * Sets the value for a property on a node.
         *
         * @param {DOMElement} node
         * @param {string} name
         * @param {*} value
         */
        function setValueForProperty(node, name, value) {
            var propertyInfo = getPropertyInfo(name);
            if (propertyInfo && shouldSetAttribute(name, value)) {
                var mutationMethod = propertyInfo.mutationMethod;
                if (mutationMethod) {
                    mutationMethod(node, value);
                }
                else if (shouldIgnoreValue(propertyInfo, value)) {
                    deleteValueForProperty(node, name);
                    return;
                }
                else if (propertyInfo.mustUseProperty) {
                    // Contrary to `setAttribute`, object properties are properly
                    // `toString`ed by IE8/9.
                    node[propertyInfo.propertyName] = value;
                }
                else {
                    var attributeName = propertyInfo.attributeName;
                    var namespace = propertyInfo.attributeNamespace;
                    // `setAttribute` with objects becomes only `[object]` in IE8/9,
                    // ('' + value) makes it output the correct toString()-value.
                    if (namespace) {
                        node.setAttributeNS(namespace, attributeName, '' + value);
                    }
                    else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
                        node.setAttribute(attributeName, '');
                    }
                    else {
                        node.setAttribute(attributeName, '' + value);
                    }
                }
            }
            else {
                setValueForAttribute(node, name, shouldSetAttribute(name, value) ? value : null);
                return;
            }
            {
            }
        }
        function setValueForAttribute(node, name, value) {
            if (!isAttributeNameSafe(name)) {
                return;
            }
            if (value == null) {
                node.removeAttribute(name);
            }
            else {
                node.setAttribute(name, '' + value);
            }
            {
            }
        }
        /**
         * Deletes an attributes from a node.
         *
         * @param {DOMElement} node
         * @param {string} name
         */
        function deleteValueForAttribute(node, name) {
            node.removeAttribute(name);
        }
        /**
         * Deletes the value for a property on a node.
         *
         * @param {DOMElement} node
         * @param {string} name
         */
        function deleteValueForProperty(node, name) {
            var propertyInfo = getPropertyInfo(name);
            if (propertyInfo) {
                var mutationMethod = propertyInfo.mutationMethod;
                if (mutationMethod) {
                    mutationMethod(node, undefined);
                }
                else if (propertyInfo.mustUseProperty) {
                    var propName = propertyInfo.propertyName;
                    if (propertyInfo.hasBooleanValue) {
                        node[propName] = false;
                    }
                    else {
                        node[propName] = '';
                    }
                }
                else {
                    node.removeAttribute(propertyInfo.attributeName);
                }
            }
            else {
                node.removeAttribute(name);
            }
        }
        var ReactControlledValuePropTypes = {
            checkPropTypes: null
        };
        {
            var hasReadOnlyValue = {
                button: true,
                checkbox: true,
                image: true,
                hidden: true,
                radio: true,
                reset: true,
                submit: true
            };
            var propTypes = {
                value: function (props, propName, componentName) {
                    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
                        return null;
                    }
                    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
                },
                checked: function (props, propName, componentName) {
                    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
                        return null;
                    }
                    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
                }
            };
            /**
             * Provide a linked `value` attribute for controlled forms. You should not use
             * this outside of the ReactDOM controlled form components.
             */
            ReactControlledValuePropTypes.checkPropTypes = function (tagName, props, getStack) {
                checkPropTypes(propTypes, props, 'prop', tagName, getStack);
            };
        }
        // TODO: direct imports like some-package/src/* are bad. Fix me.
        var getCurrentFiberOwnerName$2 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
        var getCurrentFiberStackAddendum$3 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
            var usesChecked = props.type === 'checkbox' || props.type === 'radio';
            return usesChecked ? props.checked != null : props.value != null;
        }
        /**
         * Implements an <input> host component that allows setting these optional
         * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
         *
         * If `checked` or `value` are not supplied (or null/undefined), user actions
         * that affect the checked state or value will trigger updates to the element.
         *
         * If they are supplied (and not null/undefined), the rendered element will not
         * trigger updates to the element. Instead, the props must change in order for
         * the rendered element to be updated.
         *
         * The rendered element will be initialized as unchecked (or `defaultChecked`)
         * with an empty value (or `defaultValue`).
         *
         * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
         */
        function getHostProps(element, props) {
            var node = element;
            var value = props.value;
            var checked = props.checked;
            var hostProps = _assign({
                // Make sure we set .type before any other properties (setting .value
                // before .type means .value is lost in IE11 and below)
                type: undefined,
                // Make sure we set .step before .value (setting .value before .step
                // means .value is rounded on mount, based upon step precision)
                step: undefined,
                // Make sure we set .min & .max before .value (to ensure proper order
                // in corner cases such as min or max deriving from value, e.g. Issue #7170)
                min: undefined,
                max: undefined
            }, props, {
                defaultChecked: undefined,
                defaultValue: undefined,
                value: value != null ? value : node._wrapperState.initialValue,
                checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
        }
        function initWrapperState(element, props) {
            {
                ReactControlledValuePropTypes.checkPropTypes('input', props, getCurrentFiberStackAddendum$3);
                if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
                    warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);
                    didWarnCheckedDefaultChecked = true;
                }
                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
                    warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);
                    didWarnValueDefaultValue = true;
                }
            }
            var defaultValue = props.defaultValue;
            var node = element;
            node._wrapperState = {
                initialChecked: props.checked != null ? props.checked : props.defaultChecked,
                initialValue: props.value != null ? props.value : defaultValue,
                controlled: isControlled(props)
            };
        }
        function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
                setValueForProperty(node, 'checked', checked);
            }
        }
        function updateWrapper(element, props) {
            var node = element;
            {
                var controlled = isControlled(props);
                if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                    warning(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());
                    didWarnUncontrolledToControlled = true;
                }
                if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                    warning(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());
                    didWarnControlledToUncontrolled = true;
                }
            }
            updateChecked(element, props);
            var value = props.value;
            if (value != null) {
                if (value === 0 && node.value === '') {
                    node.value = '0';
                    // Note: IE9 reports a number inputs as 'text', so check props instead.
                }
                else if (props.type === 'number') {
                    // Simulate `input.valueAsNumber`. IE9 does not support it
                    var valueAsNumber = parseFloat(node.value) || 0;
                    if (
                    // eslint-disable-next-line
                    value != valueAsNumber ||
                        // eslint-disable-next-line
                        value == valueAsNumber && node.value != value) {
                        // Cast `value` to a string to ensure the value is set correctly. While
                        // browsers typically do this as necessary, jsdom doesn't.
                        node.value = '' + value;
                    }
                }
                else if (node.value !== '' + value) {
                    // Cast `value` to a string to ensure the value is set correctly. While
                    // browsers typically do this as necessary, jsdom doesn't.
                    node.value = '' + value;
                }
            }
            else {
                if (props.value == null && props.defaultValue != null) {
                    // In Chrome, assigning defaultValue to certain input types triggers input validation.
                    // For number inputs, the display value loses trailing decimal points. For email inputs,
                    // Chrome raises "The specified value <x> is not a valid email address".
                    //
                    // Here we check to see if the defaultValue has actually changed, avoiding these problems
                    // when the user is inputting text
                    //
                    // https://github.com/facebook/react/issues/7253
                    if (node.defaultValue !== '' + props.defaultValue) {
                        node.defaultValue = '' + props.defaultValue;
                    }
                }
                if (props.checked == null && props.defaultChecked != null) {
                    node.defaultChecked = !!props.defaultChecked;
                }
            }
        }
        function postMountWrapper(element, props) {
            var node = element;
            // Detach value from defaultValue. We won't do anything if we're working on
            // submit or reset inputs as those values & defaultValues are linked. They
            // are not resetable nodes so this operation doesn't matter and actually
            // removes browser-default values (eg "Submit Query") when no value is
            // provided.
            switch (props.type) {
                case 'submit':
                case 'reset':
                    break;
                case 'color':
                case 'date':
                case 'datetime':
                case 'datetime-local':
                case 'month':
                case 'time':
                case 'week':
                    // This fixes the no-show issue on iOS Safari and Android Chrome:
                    // https://github.com/facebook/react/issues/7233
                    node.value = '';
                    node.value = node.defaultValue;
                    break;
                default:
                    node.value = node.value;
                    break;
            }
            // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
            // this is needed to work around a chrome bug where setting defaultChecked
            // will sometimes influence the value of checked (even after detachment).
            // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
            // We need to temporarily unset name to avoid disrupting radio button groups.
            var name = node.name;
            if (name !== '') {
                node.name = '';
            }
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !node.defaultChecked;
            if (name !== '') {
                node.name = name;
            }
        }
        function restoreControlledState$1(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === 'radio' && name != null) {
                var queryRoot = rootNode;
                while (queryRoot.parentNode) {
                    queryRoot = queryRoot.parentNode;
                }
                // If `rootNode.form` was non-null, then we could try `form.elements`,
                // but that sometimes behaves strangely in IE8. We could also try using
                // `form.getElementsByName`, but that will only return direct children
                // and won't include inputs that use the HTML5 `form=` attribute. Since
                // the input might not even be in a form. It might not even be in the
                // document. Let's just use the local `querySelectorAll` to ensure we don't
                // miss anything.
                var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
                for (var i = 0; i < group.length; i++) {
                    var otherNode = group[i];
                    if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                        continue;
                    }
                    // This will throw if radio buttons rendered by different copies of React
                    // and the same name are rendered into the same form (same as #1939).
                    // That's probably okay; we don't support it just as we don't support
                    // mixing React radio buttons with non-React ones.
                    var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
                    !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;
                    // We need update the tracked value on the named cousin since the value
                    // was changed but the input saw no event or value set
                    updateValueIfChanged(otherNode);
                    // If this is a controlled radio button group, forcing the input that
                    // was previously checked to update will cause it to be come re-checked
                    // as appropriate.
                    updateWrapper(otherNode, otherProps);
                }
            }
        }
        function flattenChildren(children) {
            var content = '';
            // Flatten children and warn if they aren't strings or numbers;
            // invalid types are ignored.
            // We can silently skip them because invalid DOM nesting warning
            // catches these cases in Fiber.
            React.Children.forEach(children, function (child) {
                if (child == null) {
                    return;
                }
                if (typeof child === 'string' || typeof child === 'number') {
                    content += child;
                }
            });
            return content;
        }
        /**
         * Implements an <option> host component that warns when `selected` is set.
         */
        function validateProps(element, props) {
            // TODO (yungsters): Remove support for `selected` in <option>.
            {
                warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
            }
        }
        function postMountWrapper$1(element, props) {
            // value="" should make a value attribute (#6219)
            if (props.value != null) {
                element.setAttribute('value', props.value);
            }
        }
        function getHostProps$1(element, props) {
            var hostProps = _assign({ children: undefined }, props);
            var content = flattenChildren(props.children);
            if (content) {
                hostProps.children = content;
            }
            return hostProps;
        }
        // TODO: direct imports like some-package/src/* are bad. Fix me.
        var getCurrentFiberOwnerName$3 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
        var getCurrentFiberStackAddendum$4 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
        {
            var didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerName$3();
            if (ownerName) {
                return '\n\nCheck the render method of `' + ownerName + '`.';
            }
            return '';
        }
        var valuePropNames = ['value', 'defaultValue'];
        /**
         * Validation function for `value` and `defaultValue`.
         */
        function checkSelectPropTypes(props) {
            ReactControlledValuePropTypes.checkPropTypes('select', props, getCurrentFiberStackAddendum$4);
            for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                    continue;
                }
                var isArray = Array.isArray(props[propName]);
                if (props.multiple && !isArray) {
                    warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
                }
                else if (!props.multiple && isArray) {
                    warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
                }
            }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options = node.options;
            if (multiple) {
                var selectedValues = propValue;
                var selectedValue = {};
                for (var i = 0; i < selectedValues.length; i++) {
                    // Prefix to avoid chaos with special keys.
                    selectedValue['$' + selectedValues[i]] = true;
                }
                for (var _i = 0; _i < options.length; _i++) {
                    var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                    if (options[_i].selected !== selected) {
                        options[_i].selected = selected;
                    }
                    if (selected && setDefaultSelected) {
                        options[_i].defaultSelected = true;
                    }
                }
            }
            else {
                // Do not set `select.value` as exact behavior isn't consistent across all
                // browsers for all cases.
                var _selectedValue = '' + propValue;
                var defaultSelected = null;
                for (var _i2 = 0; _i2 < options.length; _i2++) {
                    if (options[_i2].value === _selectedValue) {
                        options[_i2].selected = true;
                        if (setDefaultSelected) {
                            options[_i2].defaultSelected = true;
                        }
                        return;
                    }
                    if (defaultSelected === null && !options[_i2].disabled) {
                        defaultSelected = options[_i2];
                    }
                }
                if (defaultSelected !== null) {
                    defaultSelected.selected = true;
                }
            }
        }
        /**
         * Implements a <select> host component that allows optionally setting the
         * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
         * stringable. If `multiple` is true, the prop must be an array of stringables.
         *
         * If `value` is not supplied (or null/undefined), user actions that change the
         * selected option will trigger updates to the rendered options.
         *
         * If it is supplied (and not null/undefined), the rendered options will not
         * update in response to user actions. Instead, the `value` prop must change in
         * order for the rendered options to update.
         *
         * If `defaultValue` is provided, any options with the supplied values will be
         * selected.
         */
        function getHostProps$2(element, props) {
            return _assign({}, props, {
                value: undefined
            });
        }
        function initWrapperState$1(element, props) {
            var node = element;
            {
                checkSelectPropTypes(props);
            }
            var value = props.value;
            node._wrapperState = {
                initialValue: value != null ? value : props.defaultValue,
                wasMultiple: !!props.multiple
            };
            {
                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
                    warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
                    didWarnValueDefaultValue$1 = true;
                }
            }
        }
        function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
            }
            else if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
        }
        function postUpdateWrapper(element, props) {
            var node = element;
            // After the initial mount, we control selected-ness manually so don't pass
            // this value down
            node._wrapperState.initialValue = undefined;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
            }
            else if (wasMultiple !== !!props.multiple) {
                // For simplicity, reapply `defaultValue` if `multiple` is toggled.
                if (props.defaultValue != null) {
                    updateOptions(node, !!props.multiple, props.defaultValue, true);
                }
                else {
                    // Revert the select back to its default unselected state.
                    updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
                }
            }
        }
        function restoreControlledState$2(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
            }
        }
        // TODO: direct imports like some-package/src/* are bad. Fix me.
        var getCurrentFiberStackAddendum$5 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
        var didWarnValDefaultVal = false;
        /**
         * Implements a <textarea> host component that allows setting `value`, and
         * `defaultValue`. This differs from the traditional DOM API because value is
         * usually set as PCDATA children.
         *
         * If `value` is not supplied (or null/undefined), user actions that affect the
         * value will trigger updates to the element.
         *
         * If `value` is supplied (and not null/undefined), the rendered element will
         * not trigger updates to the element. Instead, the `value` prop must change in
         * order for the rendered element to be updated.
         *
         * The rendered element will be initialized with an empty value, the prop
         * `defaultValue` if specified, or the children content (deprecated).
         */
        function getHostProps$3(element, props) {
            var node = element;
            !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;
            // Always set children to the same thing. In IE9, the selection range will
            // get reset if `textContent` is mutated.  We could add a check in setTextContent
            // to only set the value if/when the value differs from the node value (which would
            // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
            // solution. The value can be a boolean or object so that's why it's forced
            // to be a string.
            var hostProps = _assign({}, props, {
                value: undefined,
                defaultValue: undefined,
                children: '' + node._wrapperState.initialValue
            });
            return hostProps;
        }
        function initWrapperState$2(element, props) {
            var node = element;
            {
                ReactControlledValuePropTypes.checkPropTypes('textarea', props, getCurrentFiberStackAddendum$5);
                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
                    warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
                    didWarnValDefaultVal = true;
                }
            }
            var initialValue = props.value;
            // Only bother fetching default value if we're going to use it
            if (initialValue == null) {
                var defaultValue = props.defaultValue;
                // TODO (yungsters): Remove support for children content in <textarea>.
                var children = props.children;
                if (children != null) {
                    {
                        warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
                    }
                    !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
                    if (Array.isArray(children)) {
                        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
                        children = children[0];
                    }
                    defaultValue = '' + children;
                }
                if (defaultValue == null) {
                    defaultValue = '';
                }
                initialValue = defaultValue;
            }
            node._wrapperState = {
                initialValue: '' + initialValue
            };
        }
        function updateWrapper$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
                // Cast `value` to a string to ensure the value is set correctly. While
                // browsers typically do this as necessary, jsdom doesn't.
                var newValue = '' + value;
                // To avoid side effects (such as losing text selection), only set value if changed
                if (newValue !== node.value) {
                    node.value = newValue;
                }
                if (props.defaultValue == null) {
                    node.defaultValue = newValue;
                }
            }
            if (props.defaultValue != null) {
                node.defaultValue = props.defaultValue;
            }
        }
        function postMountWrapper$3(element, props) {
            var node = element;
            // This is in postMount because we need access to the DOM node, which is not
            // available until after the component has mounted.
            var textContent = node.textContent;
            // Only set node.value if textContent is equal to the expected
            // initial value. In IE10/IE11 there is a bug where the placeholder attribute
            // will populate textContent as well.
            // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
            if (textContent === node._wrapperState.initialValue) {
                node.value = textContent;
            }
        }
        function restoreControlledState$3(element, props) {
            // DOM component is still mounted; update
            updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
        var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
        var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
        var Namespaces = {
            html: HTML_NAMESPACE$1,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
        };
        // Assumes there is no parent namespace.
        function getIntrinsicNamespace(type) {
            switch (type) {
                case 'svg':
                    return SVG_NAMESPACE;
                case 'math':
                    return MATH_NAMESPACE;
                default:
                    return HTML_NAMESPACE$1;
            }
        }
        function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
                // No (or default) parent namespace: potential entry point.
                return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
                // We're leaving SVG.
                return HTML_NAMESPACE$1;
            }
            // By default, pass namespace below.
            return parentNamespace;
        }
        /* globals MSApp */
        /**
         * Create a function which has 'unsafe' privileges (required by windows8 apps)
         */
        var createMicrosoftUnsafeLocalFunction = function (func) {
            if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
                return function (arg0, arg1, arg2, arg3) {
                    MSApp.execUnsafeLocalFunction(function () {
                        return func(arg0, arg1, arg2, arg3);
                    });
                };
            }
            else {
                return func;
            }
        };
        // SVG temp container for IE lacking innerHTML
        var reusableSVGContainer = void 0;
        /**
         * Set the innerHTML property of a node
         *
         * @param {DOMElement} node
         * @param {string} html
         * @internal
         */
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
            // IE does not have innerHTML for SVG nodes, so instead we inject the
            // new markup in a temp node and then move the child nodes across into
            // the target node
            if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                    node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                    node.appendChild(svgNode.firstChild);
                }
            }
            else {
                node.innerHTML = html;
            }
        });
        /**
         * Set the textContent property of a node, ensuring that whitespace is preserved
         * even in IE8. innerText is a poor substitute for textContent and, among many
         * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
         * as it should.
         *
         * @param {DOMElement} node
         * @param {string} text
         * @internal
         */
        var setTextContent = function (node, text) {
            if (text) {
                var firstChild = node.firstChild;
                if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                    firstChild.nodeValue = text;
                    return;
                }
            }
            node.textContent = text;
        };
        /**
         * CSS properties which accept numbers but are not in units of "px".
         */
        var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
        };
        /**
         * @param {string} prefix vendor-specific prefix, eg: Webkit
         * @param {string} key style name, eg: transitionDuration
         * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
         * WebkitTransitionDuration
         */
        function prefixKey(prefix, key) {
            return prefix + key.charAt(0).toUpperCase() + key.substring(1);
        }
        /**
         * Support style names that may come passed in prefixed by adding permutations
         * of vendor prefixes.
         */
        var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
        // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
        // infinite loop, because it iterates over the newly added props too.
        Object.keys(isUnitlessNumber).forEach(function (prop) {
            prefixes.forEach(function (prefix) {
                isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
            });
        });
        /**
         * Convert a value into the proper css writable value. The style name `name`
         * should be logical (no hyphens), as specified
         * in `CSSProperty.isUnitlessNumber`.
         *
         * @param {string} name CSS property name such as `topMargin`.
         * @param {*} value CSS property value such as `10px`.
         * @return {string} Normalized style value with dimensions applied.
         */
        function dangerousStyleValue(name, value, isCustomProperty) {
            // Note that we've removed escapeTextForBrowser() calls here since the
            // whole string will be escaped when the attribute is injected into
            // the markup. If you provide unsafe user data here they can inject
            // arbitrary CSS which may be problematic (I couldn't repro this):
            // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
            // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
            // This is not an XSS hole but instead a potential CSS injection issue
            // which has lead to a greater discussion about how we're going to
            // trust URLs moving forward. See #2115901
            var isEmpty = value == null || typeof value === 'boolean' || value === '';
            if (isEmpty) {
                return '';
            }
            if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
                return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
            }
            return ('' + value).trim();
        }
        var warnValidStyle = emptyFunction;
        {
            // 'msTransform' is correct, but the other prefixes should be capitalized
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            // style values shouldn't contain a semicolon
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var warnHyphenatedStyleName = function (name, getStack) {
                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                    return;
                }
                warnedStyleNames[name] = true;
                warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), getStack());
            };
            var warnBadVendoredStyleName = function (name, getStack) {
                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                    return;
                }
                warnedStyleNames[name] = true;
                warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), getStack());
            };
            var warnStyleValueWithSemicolon = function (name, value, getStack) {
                if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                    return;
                }
                warnedStyleValues[value] = true;
                warning(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.%s', name, value.replace(badStyleValueWithSemicolonPattern, ''), getStack());
            };
            var warnStyleValueIsNaN = function (name, value, getStack) {
                if (warnedForNaNValue) {
                    return;
                }
                warnedForNaNValue = true;
                warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, getStack());
            };
            var warnStyleValueIsInfinity = function (name, value, getStack) {
                if (warnedForInfinityValue) {
                    return;
                }
                warnedForInfinityValue = true;
                warning(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, getStack());
            };
            warnValidStyle = function (name, value, getStack) {
                if (name.indexOf('-') > -1) {
                    warnHyphenatedStyleName(name, getStack);
                }
                else if (badVendoredStyleNamePattern.test(name)) {
                    warnBadVendoredStyleName(name, getStack);
                }
                else if (badStyleValueWithSemicolonPattern.test(value)) {
                    warnStyleValueWithSemicolon(name, value, getStack);
                }
                if (typeof value === 'number') {
                    if (isNaN(value)) {
                        warnStyleValueIsNaN(name, value, getStack);
                    }
                    else if (!isFinite(value)) {
                        warnStyleValueIsInfinity(name, value, getStack);
                    }
                }
            };
        }
        var warnValidStyle$1 = warnValidStyle;
        /**
         * Operations for dealing with CSS properties.
         */
        /**
         * This creates a string that is expected to be equivalent to the style
         * attribute generated by server-side rendering. It by-passes warnings and
         * security checks so it's not safe to use this value for anything other than
         * comparison. It is only used in DEV for SSR validation.
         */
        function createDangerousStringForStyles(styles) {
            {
                var serialized = '';
                var delimiter = '';
                for (var styleName in styles) {
                    if (!styles.hasOwnProperty(styleName)) {
                        continue;
                    }
                    var styleValue = styles[styleName];
                    if (styleValue != null) {
                        var isCustomProperty = styleName.indexOf('--') === 0;
                        serialized += delimiter + hyphenateStyleName(styleName) + ':';
                        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                        delimiter = ';';
                    }
                }
                return serialized || null;
            }
        }
        /**
         * Sets the value for multiple styles on a node.  If a value is specified as
         * '' (empty string), the corresponding style property will be unset.
         *
         * @param {DOMElement} node
         * @param {object} styles
         */
        function setValueForStyles(node, styles, getStack) {
            var style = node.style;
            for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                    continue;
                }
                var isCustomProperty = styleName.indexOf('--') === 0;
                {
                    if (!isCustomProperty) {
                        warnValidStyle$1(styleName, styles[styleName], getStack);
                    }
                }
                var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
                if (styleName === 'float') {
                    styleName = 'cssFloat';
                }
                if (isCustomProperty) {
                    style.setProperty(styleName, styleValue);
                }
                else {
                    style[styleName] = styleValue;
                }
            }
        }
        // For HTML, certain tags should omit their close tag. We keep a whitelist for
        // those special-case tags.
        var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
        };
        // For HTML, certain tags cannot have children. This has the same purpose as
        // `omittedCloseTags` except that `menuitem` should still have its closing tag.
        var voidElementTags = _assign({
            menuitem: true
        }, omittedCloseTags);
        var HTML$1 = '__html';
        function assertValidProps(tag, props, getStack) {
            if (!props) {
                return;
            }
            // Note the use of `==` which checks for null or undefined.
            if (voidElementTags[tag]) {
                !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, getStack()) : void 0;
            }
            if (props.dangerouslySetInnerHTML != null) {
                !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
                !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
            }
            {
                warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.%s', getStack());
            }
            !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getStack()) : void 0;
        }
        function isCustomComponent(tagName, props) {
            if (tagName.indexOf('-') === -1) {
                return typeof props.is === 'string';
            }
            switch (tagName) {
                // These are reserved SVG and MathML elements.
                // We don't mind this whitelist too much because we expect it to never grow.
                // The alternative is to track the namespace in a few places which is convoluted.
                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
                case 'annotation-xml':
                case 'color-profile':
                case 'font-face':
                case 'font-face-src':
                case 'font-face-uri':
                case 'font-face-format':
                case 'font-face-name':
                case 'missing-glyph':
                    return false;
                default:
                    return true;
            }
        }
        var ariaProperties = {
            'aria-current': 0,
            'aria-details': 0,
            'aria-disabled': 0,
            'aria-hidden': 0,
            'aria-invalid': 0,
            'aria-keyshortcuts': 0,
            'aria-label': 0,
            'aria-roledescription': 0,
            // Widget Attributes
            'aria-autocomplete': 0,
            'aria-checked': 0,
            'aria-expanded': 0,
            'aria-haspopup': 0,
            'aria-level': 0,
            'aria-modal': 0,
            'aria-multiline': 0,
            'aria-multiselectable': 0,
            'aria-orientation': 0,
            'aria-placeholder': 0,
            'aria-pressed': 0,
            'aria-readonly': 0,
            'aria-required': 0,
            'aria-selected': 0,
            'aria-sort': 0,
            'aria-valuemax': 0,
            'aria-valuemin': 0,
            'aria-valuenow': 0,
            'aria-valuetext': 0,
            // Live Region Attributes
            'aria-atomic': 0,
            'aria-busy': 0,
            'aria-live': 0,
            'aria-relevant': 0,
            // Drag-and-Drop Attributes
            'aria-dropeffect': 0,
            'aria-grabbed': 0,
            // Relationship Attributes
            'aria-activedescendant': 0,
            'aria-colcount': 0,
            'aria-colindex': 0,
            'aria-colspan': 0,
            'aria-controls': 0,
            'aria-describedby': 0,
            'aria-errormessage': 0,
            'aria-flowto': 0,
            'aria-labelledby': 0,
            'aria-owns': 0,
            'aria-posinset': 0,
            'aria-rowcount': 0,
            'aria-rowindex': 0,
            'aria-rowspan': 0,
            'aria-setsize': 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
        var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function getStackAddendum() {
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            return stack != null ? stack : '';
        }
        function validateProperty(tagName, name) {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
            }
            if (rARIACamel.test(name)) {
                var ariaName = 'aria-' + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                // If this is an aria-* attribute, but is not listed in the known DOM
                // DOM properties, then it is an invalid aria-* attribute.
                if (correctName == null) {
                    warning(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s', name, getStackAddendum());
                    warnedProperties[name] = true;
                    return true;
                }
                // aria-* attributes should be lowercase; suggest the lowercase version.
                if (name !== correctName) {
                    warning(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?%s', name, correctName, getStackAddendum());
                    warnedProperties[name] = true;
                    return true;
                }
            }
            if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                // If this is an aria-* attribute, but is not listed in the known DOM
                // DOM properties, then it is an invalid aria-* attribute.
                if (standardName == null) {
                    warnedProperties[name] = true;
                    return false;
                }
                // aria-* attributes should be lowercase; suggest the lowercase version.
                if (name !== standardName) {
                    warning(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum());
                    warnedProperties[name] = true;
                    return true;
                }
            }
            return true;
        }
        function warnInvalidARIAProps(type, props) {
            var invalidProps = [];
            for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                    invalidProps.push(key);
                }
            }
            var unknownPropString = invalidProps.map(function (prop) {
                return '`' + prop + '`';
            }).join(', ');
            if (invalidProps.length === 1) {
                warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
            }
            else if (invalidProps.length > 1) {
                warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
            }
        }
        function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
                return;
            }
            warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function getStackAddendum$1() {
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            return stack != null ? stack : '';
        }
        function validateProperties$1(type, props) {
            if (type !== 'input' && type !== 'textarea' && type !== 'select') {
                return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === 'select' && props.multiple) {
                    warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.%s', type, getStackAddendum$1());
                }
                else {
                    warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', type, getStackAddendum$1());
                }
            }
        }
        // When adding attributes to the HTML or SVG whitelist, be sure to
        // also add them to this module to ensure casing and incorrect name
        // warnings.
        var possibleStandardNames = {
            // HTML
            accept: 'accept',
            acceptcharset: 'acceptCharset',
            'accept-charset': 'acceptCharset',
            accesskey: 'accessKey',
            action: 'action',
            allowfullscreen: 'allowFullScreen',
            alt: 'alt',
            as: 'as',
            async: 'async',
            autocapitalize: 'autoCapitalize',
            autocomplete: 'autoComplete',
            autocorrect: 'autoCorrect',
            autofocus: 'autoFocus',
            autoplay: 'autoPlay',
            autosave: 'autoSave',
            capture: 'capture',
            cellpadding: 'cellPadding',
            cellspacing: 'cellSpacing',
            challenge: 'challenge',
            charset: 'charSet',
            checked: 'checked',
            children: 'children',
            cite: 'cite',
            'class': 'className',
            classid: 'classID',
            classname: 'className',
            cols: 'cols',
            colspan: 'colSpan',
            content: 'content',
            contenteditable: 'contentEditable',
            contextmenu: 'contextMenu',
            controls: 'controls',
            controlslist: 'controlsList',
            coords: 'coords',
            crossorigin: 'crossOrigin',
            dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
            data: 'data',
            datetime: 'dateTime',
            'default': 'default',
            defaultchecked: 'defaultChecked',
            defaultvalue: 'defaultValue',
            defer: 'defer',
            dir: 'dir',
            disabled: 'disabled',
            download: 'download',
            draggable: 'draggable',
            enctype: 'encType',
            'for': 'htmlFor',
            form: 'form',
            formmethod: 'formMethod',
            formaction: 'formAction',
            formenctype: 'formEncType',
            formnovalidate: 'formNoValidate',
            formtarget: 'formTarget',
            frameborder: 'frameBorder',
            headers: 'headers',
            height: 'height',
            hidden: 'hidden',
            high: 'high',
            href: 'href',
            hreflang: 'hrefLang',
            htmlfor: 'htmlFor',
            httpequiv: 'httpEquiv',
            'http-equiv': 'httpEquiv',
            icon: 'icon',
            id: 'id',
            innerhtml: 'innerHTML',
            inputmode: 'inputMode',
            integrity: 'integrity',
            is: 'is',
            itemid: 'itemID',
            itemprop: 'itemProp',
            itemref: 'itemRef',
            itemscope: 'itemScope',
            itemtype: 'itemType',
            keyparams: 'keyParams',
            keytype: 'keyType',
            kind: 'kind',
            label: 'label',
            lang: 'lang',
            list: 'list',
            loop: 'loop',
            low: 'low',
            manifest: 'manifest',
            marginwidth: 'marginWidth',
            marginheight: 'marginHeight',
            max: 'max',
            maxlength: 'maxLength',
            media: 'media',
            mediagroup: 'mediaGroup',
            method: 'method',
            min: 'min',
            minlength: 'minLength',
            multiple: 'multiple',
            muted: 'muted',
            name: 'name',
            nonce: 'nonce',
            novalidate: 'noValidate',
            open: 'open',
            optimum: 'optimum',
            pattern: 'pattern',
            placeholder: 'placeholder',
            playsinline: 'playsInline',
            poster: 'poster',
            preload: 'preload',
            profile: 'profile',
            radiogroup: 'radioGroup',
            readonly: 'readOnly',
            referrerpolicy: 'referrerPolicy',
            rel: 'rel',
            required: 'required',
            reversed: 'reversed',
            role: 'role',
            rows: 'rows',
            rowspan: 'rowSpan',
            sandbox: 'sandbox',
            scope: 'scope',
            scoped: 'scoped',
            scrolling: 'scrolling',
            seamless: 'seamless',
            selected: 'selected',
            shape: 'shape',
            size: 'size',
            sizes: 'sizes',
            span: 'span',
            spellcheck: 'spellCheck',
            src: 'src',
            srcdoc: 'srcDoc',
            srclang: 'srcLang',
            srcset: 'srcSet',
            start: 'start',
            step: 'step',
            style: 'style',
            summary: 'summary',
            tabindex: 'tabIndex',
            target: 'target',
            title: 'title',
            type: 'type',
            usemap: 'useMap',
            value: 'value',
            width: 'width',
            wmode: 'wmode',
            wrap: 'wrap',
            // SVG
            about: 'about',
            accentheight: 'accentHeight',
            'accent-height': 'accentHeight',
            accumulate: 'accumulate',
            additive: 'additive',
            alignmentbaseline: 'alignmentBaseline',
            'alignment-baseline': 'alignmentBaseline',
            allowreorder: 'allowReorder',
            alphabetic: 'alphabetic',
            amplitude: 'amplitude',
            arabicform: 'arabicForm',
            'arabic-form': 'arabicForm',
            ascent: 'ascent',
            attributename: 'attributeName',
            attributetype: 'attributeType',
            autoreverse: 'autoReverse',
            azimuth: 'azimuth',
            basefrequency: 'baseFrequency',
            baselineshift: 'baselineShift',
            'baseline-shift': 'baselineShift',
            baseprofile: 'baseProfile',
            bbox: 'bbox',
            begin: 'begin',
            bias: 'bias',
            by: 'by',
            calcmode: 'calcMode',
            capheight: 'capHeight',
            'cap-height': 'capHeight',
            clip: 'clip',
            clippath: 'clipPath',
            'clip-path': 'clipPath',
            clippathunits: 'clipPathUnits',
            cliprule: 'clipRule',
            'clip-rule': 'clipRule',
            color: 'color',
            colorinterpolation: 'colorInterpolation',
            'color-interpolation': 'colorInterpolation',
            colorinterpolationfilters: 'colorInterpolationFilters',
            'color-interpolation-filters': 'colorInterpolationFilters',
            colorprofile: 'colorProfile',
            'color-profile': 'colorProfile',
            colorrendering: 'colorRendering',
            'color-rendering': 'colorRendering',
            contentscripttype: 'contentScriptType',
            contentstyletype: 'contentStyleType',
            cursor: 'cursor',
            cx: 'cx',
            cy: 'cy',
            d: 'd',
            datatype: 'datatype',
            decelerate: 'decelerate',
            descent: 'descent',
            diffuseconstant: 'diffuseConstant',
            direction: 'direction',
            display: 'display',
            divisor: 'divisor',
            dominantbaseline: 'dominantBaseline',
            'dominant-baseline': 'dominantBaseline',
            dur: 'dur',
            dx: 'dx',
            dy: 'dy',
            edgemode: 'edgeMode',
            elevation: 'elevation',
            enablebackground: 'enableBackground',
            'enable-background': 'enableBackground',
            end: 'end',
            exponent: 'exponent',
            externalresourcesrequired: 'externalResourcesRequired',
            fill: 'fill',
            fillopacity: 'fillOpacity',
            'fill-opacity': 'fillOpacity',
            fillrule: 'fillRule',
            'fill-rule': 'fillRule',
            filter: 'filter',
            filterres: 'filterRes',
            filterunits: 'filterUnits',
            floodopacity: 'floodOpacity',
            'flood-opacity': 'floodOpacity',
            floodcolor: 'floodColor',
            'flood-color': 'floodColor',
            focusable: 'focusable',
            fontfamily: 'fontFamily',
            'font-family': 'fontFamily',
            fontsize: 'fontSize',
            'font-size': 'fontSize',
            fontsizeadjust: 'fontSizeAdjust',
            'font-size-adjust': 'fontSizeAdjust',
            fontstretch: 'fontStretch',
            'font-stretch': 'fontStretch',
            fontstyle: 'fontStyle',
            'font-style': 'fontStyle',
            fontvariant: 'fontVariant',
            'font-variant': 'fontVariant',
            fontweight: 'fontWeight',
            'font-weight': 'fontWeight',
            format: 'format',
            from: 'from',
            fx: 'fx',
            fy: 'fy',
            g1: 'g1',
            g2: 'g2',
            glyphname: 'glyphName',
            'glyph-name': 'glyphName',
            glyphorientationhorizontal: 'glyphOrientationHorizontal',
            'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
            glyphorientationvertical: 'glyphOrientationVertical',
            'glyph-orientation-vertical': 'glyphOrientationVertical',
            glyphref: 'glyphRef',
            gradienttransform: 'gradientTransform',
            gradientunits: 'gradientUnits',
            hanging: 'hanging',
            horizadvx: 'horizAdvX',
            'horiz-adv-x': 'horizAdvX',
            horizoriginx: 'horizOriginX',
            'horiz-origin-x': 'horizOriginX',
            ideographic: 'ideographic',
            imagerendering: 'imageRendering',
            'image-rendering': 'imageRendering',
            in2: 'in2',
            'in': 'in',
            inlist: 'inlist',
            intercept: 'intercept',
            k1: 'k1',
            k2: 'k2',
            k3: 'k3',
            k4: 'k4',
            k: 'k',
            kernelmatrix: 'kernelMatrix',
            kernelunitlength: 'kernelUnitLength',
            kerning: 'kerning',
            keypoints: 'keyPoints',
            keysplines: 'keySplines',
            keytimes: 'keyTimes',
            lengthadjust: 'lengthAdjust',
            letterspacing: 'letterSpacing',
            'letter-spacing': 'letterSpacing',
            lightingcolor: 'lightingColor',
            'lighting-color': 'lightingColor',
            limitingconeangle: 'limitingConeAngle',
            local: 'local',
            markerend: 'markerEnd',
            'marker-end': 'markerEnd',
            markerheight: 'markerHeight',
            markermid: 'markerMid',
            'marker-mid': 'markerMid',
            markerstart: 'markerStart',
            'marker-start': 'markerStart',
            markerunits: 'markerUnits',
            markerwidth: 'markerWidth',
            mask: 'mask',
            maskcontentunits: 'maskContentUnits',
            maskunits: 'maskUnits',
            mathematical: 'mathematical',
            mode: 'mode',
            numoctaves: 'numOctaves',
            offset: 'offset',
            opacity: 'opacity',
            operator: 'operator',
            order: 'order',
            orient: 'orient',
            orientation: 'orientation',
            origin: 'origin',
            overflow: 'overflow',
            overlineposition: 'overlinePosition',
            'overline-position': 'overlinePosition',
            overlinethickness: 'overlineThickness',
            'overline-thickness': 'overlineThickness',
            paintorder: 'paintOrder',
            'paint-order': 'paintOrder',
            panose1: 'panose1',
            'panose-1': 'panose1',
            pathlength: 'pathLength',
            patterncontentunits: 'patternContentUnits',
            patterntransform: 'patternTransform',
            patternunits: 'patternUnits',
            pointerevents: 'pointerEvents',
            'pointer-events': 'pointerEvents',
            points: 'points',
            pointsatx: 'pointsAtX',
            pointsaty: 'pointsAtY',
            pointsatz: 'pointsAtZ',
            prefix: 'prefix',
            preservealpha: 'preserveAlpha',
            preserveaspectratio: 'preserveAspectRatio',
            primitiveunits: 'primitiveUnits',
            property: 'property',
            r: 'r',
            radius: 'radius',
            refx: 'refX',
            refy: 'refY',
            renderingintent: 'renderingIntent',
            'rendering-intent': 'renderingIntent',
            repeatcount: 'repeatCount',
            repeatdur: 'repeatDur',
            requiredextensions: 'requiredExtensions',
            requiredfeatures: 'requiredFeatures',
            resource: 'resource',
            restart: 'restart',
            result: 'result',
            results: 'results',
            rotate: 'rotate',
            rx: 'rx',
            ry: 'ry',
            scale: 'scale',
            security: 'security',
            seed: 'seed',
            shaperendering: 'shapeRendering',
            'shape-rendering': 'shapeRendering',
            slope: 'slope',
            spacing: 'spacing',
            specularconstant: 'specularConstant',
            specularexponent: 'specularExponent',
            speed: 'speed',
            spreadmethod: 'spreadMethod',
            startoffset: 'startOffset',
            stddeviation: 'stdDeviation',
            stemh: 'stemh',
            stemv: 'stemv',
            stitchtiles: 'stitchTiles',
            stopcolor: 'stopColor',
            'stop-color': 'stopColor',
            stopopacity: 'stopOpacity',
            'stop-opacity': 'stopOpacity',
            strikethroughposition: 'strikethroughPosition',
            'strikethrough-position': 'strikethroughPosition',
            strikethroughthickness: 'strikethroughThickness',
            'strikethrough-thickness': 'strikethroughThickness',
            string: 'string',
            stroke: 'stroke',
            strokedasharray: 'strokeDasharray',
            'stroke-dasharray': 'strokeDasharray',
            strokedashoffset: 'strokeDashoffset',
            'stroke-dashoffset': 'strokeDashoffset',
            strokelinecap: 'strokeLinecap',
            'stroke-linecap': 'strokeLinecap',
            strokelinejoin: 'strokeLinejoin',
            'stroke-linejoin': 'strokeLinejoin',
            strokemiterlimit: 'strokeMiterlimit',
            'stroke-miterlimit': 'strokeMiterlimit',
            strokewidth: 'strokeWidth',
            'stroke-width': 'strokeWidth',
            strokeopacity: 'strokeOpacity',
            'stroke-opacity': 'strokeOpacity',
            suppresscontenteditablewarning: 'suppressContentEditableWarning',
            suppresshydrationwarning: 'suppressHydrationWarning',
            surfacescale: 'surfaceScale',
            systemlanguage: 'systemLanguage',
            tablevalues: 'tableValues',
            targetx: 'targetX',
            targety: 'targetY',
            textanchor: 'textAnchor',
            'text-anchor': 'textAnchor',
            textdecoration: 'textDecoration',
            'text-decoration': 'textDecoration',
            textlength: 'textLength',
            textrendering: 'textRendering',
            'text-rendering': 'textRendering',
            to: 'to',
            transform: 'transform',
            'typeof': 'typeof',
            u1: 'u1',
            u2: 'u2',
            underlineposition: 'underlinePosition',
            'underline-position': 'underlinePosition',
            underlinethickness: 'underlineThickness',
            'underline-thickness': 'underlineThickness',
            unicode: 'unicode',
            unicodebidi: 'unicodeBidi',
            'unicode-bidi': 'unicodeBidi',
            unicoderange: 'unicodeRange',
            'unicode-range': 'unicodeRange',
            unitsperem: 'unitsPerEm',
            'units-per-em': 'unitsPerEm',
            unselectable: 'unselectable',
            valphabetic: 'vAlphabetic',
            'v-alphabetic': 'vAlphabetic',
            values: 'values',
            vectoreffect: 'vectorEffect',
            'vector-effect': 'vectorEffect',
            version: 'version',
            vertadvy: 'vertAdvY',
            'vert-adv-y': 'vertAdvY',
            vertoriginx: 'vertOriginX',
            'vert-origin-x': 'vertOriginX',
            vertoriginy: 'vertOriginY',
            'vert-origin-y': 'vertOriginY',
            vhanging: 'vHanging',
            'v-hanging': 'vHanging',
            videographic: 'vIdeographic',
            'v-ideographic': 'vIdeographic',
            viewbox: 'viewBox',
            viewtarget: 'viewTarget',
            visibility: 'visibility',
            vmathematical: 'vMathematical',
            'v-mathematical': 'vMathematical',
            vocab: 'vocab',
            widths: 'widths',
            wordspacing: 'wordSpacing',
            'word-spacing': 'wordSpacing',
            writingmode: 'writingMode',
            'writing-mode': 'writingMode',
            x1: 'x1',
            x2: 'x2',
            x: 'x',
            xchannelselector: 'xChannelSelector',
            xheight: 'xHeight',
            'x-height': 'xHeight',
            xlinkactuate: 'xlinkActuate',
            'xlink:actuate': 'xlinkActuate',
            xlinkarcrole: 'xlinkArcrole',
            'xlink:arcrole': 'xlinkArcrole',
            xlinkhref: 'xlinkHref',
            'xlink:href': 'xlinkHref',
            xlinkrole: 'xlinkRole',
            'xlink:role': 'xlinkRole',
            xlinkshow: 'xlinkShow',
            'xlink:show': 'xlinkShow',
            xlinktitle: 'xlinkTitle',
            'xlink:title': 'xlinkTitle',
            xlinktype: 'xlinkType',
            'xlink:type': 'xlinkType',
            xmlbase: 'xmlBase',
            'xml:base': 'xmlBase',
            xmllang: 'xmlLang',
            'xml:lang': 'xmlLang',
            xmlns: 'xmlns',
            'xml:space': 'xmlSpace',
            xmlnsxlink: 'xmlnsXlink',
            'xmlns:xlink': 'xmlnsXlink',
            xmlspace: 'xmlSpace',
            y1: 'y1',
            y2: 'y2',
            y: 'y',
            ychannelselector: 'yChannelSelector',
            z: 'z',
            zoomandpan: 'zoomAndPan'
        };
        function getStackAddendum$2() {
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            return stack != null ? stack : '';
        }
        {
            var warnedProperties$1 = {};
            var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
            var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
            var validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
                if (hasOwnProperty$1.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                    return true;
                }
                var lowerCasedName = name.toLowerCase();
                if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
                    warning(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
                    warnedProperties$1[name] = true;
                    return true;
                }
                // We can't rely on the event system being injected on the server.
                if (canUseEventSystem) {
                    if (registrationNameModules.hasOwnProperty(name)) {
                        return true;
                    }
                    var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
                    if (registrationName != null) {
                        warning(false, 'Invalid event handler property `%s`. Did you mean `%s`?%s', name, registrationName, getStackAddendum$2());
                        warnedProperties$1[name] = true;
                        return true;
                    }
                    if (EVENT_NAME_REGEX.test(name)) {
                        warning(false, 'Unknown event handler property `%s`. It will be ignored.%s', name, getStackAddendum$2());
                        warnedProperties$1[name] = true;
                        return true;
                    }
                }
                else if (EVENT_NAME_REGEX.test(name)) {
                    // If no event plugins have been injected, we are in a server environment.
                    // So we can't tell if the event name is correct for sure, but we can filter
                    // out known bad ones like `onclick`. We can't suggest a specific replacement though.
                    if (INVALID_EVENT_NAME_REGEX.test(name)) {
                        warning(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.%s', name, getStackAddendum$2());
                    }
                    warnedProperties$1[name] = true;
                    return true;
                }
                // Let the ARIA attribute hook validate ARIA attributes
                if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                    return true;
                }
                if (lowerCasedName === 'innerhtml') {
                    warning(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
                    warnedProperties$1[name] = true;
                    return true;
                }
                if (lowerCasedName === 'aria') {
                    warning(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
                    warnedProperties$1[name] = true;
                    return true;
                }
                if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
                    warning(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.%s', typeof value, getStackAddendum$2());
                    warnedProperties$1[name] = true;
                    return true;
                }
                if (typeof value === 'number' && isNaN(value)) {
                    warning(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.%s', name, getStackAddendum$2());
                    warnedProperties$1[name] = true;
                    return true;
                }
                var isReserved = isReservedProp(name);
                // Known attributes should match the casing specified in the property config.
                if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                    var standardName = possibleStandardNames[lowerCasedName];
                    if (standardName !== name) {
                        warning(false, 'Invalid DOM property `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum$2());
                        warnedProperties$1[name] = true;
                        return true;
                    }
                }
                else if (!isReserved && name !== lowerCasedName) {
                    // Unknown attributes should have lowercase casing since that's how they
                    // will be cased anyway with server rendering.
                    warning(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.%s', name, lowerCasedName, getStackAddendum$2());
                    warnedProperties$1[name] = true;
                    return true;
                }
                if (typeof value === 'boolean' && !shouldAttributeAcceptBooleanValue(name)) {
                    if (value) {
                        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.%s', value, name, name, value, name, getStackAddendum$2());
                    }
                    else {
                        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', value, name, name, value, name, name, name, getStackAddendum$2());
                    }
                    warnedProperties$1[name] = true;
                    return true;
                }
                // Now that we've validated casing, do not validate
                // data types for reserved props
                if (isReserved) {
                    return true;
                }
                // Warn when a known attribute is a bad type
                if (!shouldSetAttribute(name, value)) {
                    warnedProperties$1[name] = true;
                    return false;
                }
                return true;
            };
        }
        var warnUnknownProperties = function (type, props, canUseEventSystem) {
            var unknownProps = [];
            for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
                if (!isValid) {
                    unknownProps.push(key);
                }
            }
            var unknownPropString = unknownProps.map(function (prop) {
                return '`' + prop + '`';
            }).join(', ');
            if (unknownProps.length === 1) {
                warning(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
            }
            else if (unknownProps.length > 1) {
                warning(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
            }
        };
        function validateProperties$2(type, props, canUseEventSystem) {
            if (isCustomComponent(type, props)) {
                return;
            }
            warnUnknownProperties(type, props, canUseEventSystem);
        }
        // TODO: direct imports like some-package/src/* are bad. Fix me.
        var getCurrentFiberOwnerName$1 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
        var getCurrentFiberStackAddendum$2 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
        var didWarnInvalidHydration = false;
        var didWarnShadyDOM = false;
        var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
        var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
        var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
        var AUTOFOCUS = 'autoFocus';
        var CHILDREN = 'children';
        var STYLE = 'style';
        var HTML = '__html';
        var HTML_NAMESPACE = Namespaces.html;
        var getStack = emptyFunction.thatReturns('');
        {
            getStack = getCurrentFiberStackAddendum$2;
            var warnedUnknownTags = {
                // Chrome is the only major browser not shipping <time>. But as of July
                // 2017 it intends to ship it due to widespread usage. We intentionally
                // *don't* warn for <time> even if it's unrecognized by Chrome because
                // it soon will be, and many apps have been using it anyway.
                time: true,
                // There are working polyfills for <dialog>. Let people use it.
                dialog: true
            };
            var validatePropertiesInDevelopment = function (type, props) {
                validateProperties(type, props);
                validateProperties$1(type, props);
                validateProperties$2(type, props, /* canUseEventSystem */ true);
            };
            // HTML parsing normalizes CR and CRLF to LF.
            // It also can turn \u0000 into \uFFFD inside attributes.
            // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
            // If we have a mismatch, it might be caused by that.
            // We will still patch up in this case but not fire the warning.
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            var normalizeMarkupForTextOrAttribute = function (markup) {
                var markupString = typeof markup === 'string' ? markup : '' + markup;
                return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
            };
            var warnForTextDifference = function (serverText, clientText) {
                if (didWarnInvalidHydration) {
                    return;
                }
                var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
                var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
                if (normalizedServerText === normalizedClientText) {
                    return;
                }
                didWarnInvalidHydration = true;
                warning(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            var warnForPropDifference = function (propName, serverValue, clientValue) {
                if (didWarnInvalidHydration) {
                    return;
                }
                var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
                var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
                if (normalizedServerValue === normalizedClientValue) {
                    return;
                }
                didWarnInvalidHydration = true;
                warning(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            var warnForExtraAttributes = function (attributeNames) {
                if (didWarnInvalidHydration) {
                    return;
                }
                didWarnInvalidHydration = true;
                var names = [];
                attributeNames.forEach(function (name) {
                    names.push(name);
                });
                warning(false, 'Extra attributes from the server: %s', names);
            };
            var warnForInvalidEventListener = function (registrationName, listener) {
                if (listener === false) {
                    warning(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', registrationName, registrationName, registrationName, getCurrentFiberStackAddendum$2());
                }
                else {
                    warning(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.%s', registrationName, typeof listener, getCurrentFiberStackAddendum$2());
                }
            };
            // Parse the HTML and read it back to normalize the HTML string so that it
            // can be used for comparison.
            var normalizeHTML = function (parent, html) {
                // We could have created a separate document here to avoid
                // re-initializing custom elements if they exist. But this breaks
                // how <noscript> is being handled. So we use the same document.
                // See the discussion in https://github.com/facebook/react/pull/11157.
                var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
                testElement.innerHTML = html;
                return testElement.innerHTML;
            };
        }
        function ensureListeningTo(rootContainerElement, registrationName) {
            var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
            var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
            listenTo(registrationName, doc);
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        // There are so many media events, it makes sense to just
        // maintain a list rather than create a `trapBubbledEvent` for each
        var mediaEvents = {
            topAbort: 'abort',
            topCanPlay: 'canplay',
            topCanPlayThrough: 'canplaythrough',
            topDurationChange: 'durationchange',
            topEmptied: 'emptied',
            topEncrypted: 'encrypted',
            topEnded: 'ended',
            topError: 'error',
            topLoadedData: 'loadeddata',
            topLoadedMetadata: 'loadedmetadata',
            topLoadStart: 'loadstart',
            topPause: 'pause',
            topPlay: 'play',
            topPlaying: 'playing',
            topProgress: 'progress',
            topRateChange: 'ratechange',
            topSeeked: 'seeked',
            topSeeking: 'seeking',
            topStalled: 'stalled',
            topSuspend: 'suspend',
            topTimeUpdate: 'timeupdate',
            topVolumeChange: 'volumechange',
            topWaiting: 'waiting'
        };
        function trapClickOnNonInteractiveElement(node) {
            // Mobile Safari does not fire properly bubble click events on
            // non-interactive elements, which means delegated click listeners do not
            // fire. The workaround for this bug involves attaching an empty click
            // listener on the target node.
            // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
            // Just set it using the onclick property so that we don't have to manage any
            // bookkeeping for it. Not sure if we need to clear it when the listener is
            // removed.
            // TODO: Only do this for the relevant Safaris maybe?
            node.onclick = emptyFunction;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
                if (!nextProps.hasOwnProperty(propKey)) {
                    continue;
                }
                var nextProp = nextProps[propKey];
                if (propKey === STYLE) {
                    {
                        if (nextProp) {
                            // Freeze the next style object so that we can assume it won't be
                            // mutated. We have already warned for this in the past.
                            Object.freeze(nextProp);
                        }
                    }
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    setValueForStyles(domElement, nextProp, getStack);
                }
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var nextHtml = nextProp ? nextProp[HTML] : undefined;
                    if (nextHtml != null) {
                        setInnerHTML(domElement, nextHtml);
                    }
                }
                else if (propKey === CHILDREN) {
                    if (typeof nextProp === 'string') {
                        // Avoid setting initial textContent when the text is empty. In IE11 setting
                        // textContent on a <textarea> will cause the placeholder to not
                        // show within the <textarea> until it has been focused and blurred again.
                        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                        if (canSetTextContent) {
                            setTextContent(domElement, nextProp);
                        }
                    }
                    else if (typeof nextProp === 'number') {
                        setTextContent(domElement, '' + nextProp);
                    }
                }
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
                    // Noop
                }
                else if (propKey === AUTOFOCUS) {
                    // We polyfill it separately on the client during commit.
                    // We blacklist it here rather than in the property list because we emit it in SSR.
                }
                else if (registrationNameModules.hasOwnProperty(propKey)) {
                    if (nextProp != null) {
                        if (true && typeof nextProp !== 'function') {
                            warnForInvalidEventListener(propKey, nextProp);
                        }
                        ensureListeningTo(rootContainerElement, propKey);
                    }
                }
                else if (isCustomComponentTag) {
                    setValueForAttribute(domElement, propKey, nextProp);
                }
                else if (nextProp != null) {
                    // If we're updating to null or undefined, we should remove the property
                    // from the DOM node instead of inadvertently setting to a string. This
                    // brings us in line with the same behavior we have on initial render.
                    setValueForProperty(domElement, propKey, nextProp);
                }
            }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            // TODO: Handle wasCustomComponentTag
            for (var i = 0; i < updatePayload.length; i += 2) {
                var propKey = updatePayload[i];
                var propValue = updatePayload[i + 1];
                if (propKey === STYLE) {
                    setValueForStyles(domElement, propValue, getStack);
                }
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    setInnerHTML(domElement, propValue);
                }
                else if (propKey === CHILDREN) {
                    setTextContent(domElement, propValue);
                }
                else if (isCustomComponentTag) {
                    if (propValue != null) {
                        setValueForAttribute(domElement, propKey, propValue);
                    }
                    else {
                        deleteValueForAttribute(domElement, propKey);
                    }
                }
                else if (propValue != null) {
                    setValueForProperty(domElement, propKey, propValue);
                }
                else {
                    // If we're updating to null or undefined, we should remove the property
                    // from the DOM node instead of inadvertently setting to a string. This
                    // brings us in line with the same behavior we have on initial render.
                    deleteValueForProperty(domElement, propKey);
                }
            }
        }
        function createElement$1(type, props, rootContainerElement, parentNamespace) {
            // We create tags in the namespace of their parent container, except HTML
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
                namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
                {
                    var isCustomComponentTag = isCustomComponent(type, props);
                    // Should this check be gated by parent namespace? Not sure we want to
                    // allow <SVG> or <mATH>.
                    warning(isCustomComponentTag || type === type.toLowerCase(), '<%s /> is using uppercase HTML. Always use lowercase HTML tags ' + 'in React.', type);
                }
                if (type === 'script') {
                    // Create the script via .innerHTML so its "parser-inserted" flag is
                    // set to true and it does not execute
                    var div = ownerDocument.createElement('div');
                    div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
                    // This is guaranteed to yield a script element.
                    var firstChild = div.firstChild;
                    domElement = div.removeChild(firstChild);
                }
                else if (typeof props.is === 'string') {
                    // $FlowIssue `createElement` should be updated for Web Components
                    domElement = ownerDocument.createElement(type, { is: props.is });
                }
                else {
                    // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                    // See discussion in https://github.com/facebook/react/pull/6896
                    // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                    domElement = ownerDocument.createElement(type);
                }
            }
            else {
                domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
                if (namespaceURI === HTML_NAMESPACE) {
                    if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                        warnedUnknownTags[type] = true;
                        warning(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
                    }
                }
            }
            return domElement;
        }
        function createTextNode$1(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties$1(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
                validatePropertiesInDevelopment(tag, rawProps);
                if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                    warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');
                    didWarnShadyDOM = true;
                }
            }
            // TODO: Make sure that we check isMounted before firing any of these events.
            var props;
            switch (tag) {
                case 'iframe':
                case 'object':
                    trapBubbledEvent('topLoad', 'load', domElement);
                    props = rawProps;
                    break;
                case 'video':
                case 'audio':
                    // Create listener for each media event
                    for (var event in mediaEvents) {
                        if (mediaEvents.hasOwnProperty(event)) {
                            trapBubbledEvent(event, mediaEvents[event], domElement);
                        }
                    }
                    props = rawProps;
                    break;
                case 'source':
                    trapBubbledEvent('topError', 'error', domElement);
                    props = rawProps;
                    break;
                case 'img':
                case 'image':
                    trapBubbledEvent('topError', 'error', domElement);
                    trapBubbledEvent('topLoad', 'load', domElement);
                    props = rawProps;
                    break;
                case 'form':
                    trapBubbledEvent('topReset', 'reset', domElement);
                    trapBubbledEvent('topSubmit', 'submit', domElement);
                    props = rawProps;
                    break;
                case 'details':
                    trapBubbledEvent('topToggle', 'toggle', domElement);
                    props = rawProps;
                    break;
                case 'input':
                    initWrapperState(domElement, rawProps);
                    props = getHostProps(domElement, rawProps);
                    trapBubbledEvent('topInvalid', 'invalid', domElement);
                    // For controlled components we always need to ensure we're listening
                    // to onChange. Even if there is no listener.
                    ensureListeningTo(rootContainerElement, 'onChange');
                    break;
                case 'option':
                    validateProps(domElement, rawProps);
                    props = getHostProps$1(domElement, rawProps);
                    break;
                case 'select':
                    initWrapperState$1(domElement, rawProps);
                    props = getHostProps$2(domElement, rawProps);
                    trapBubbledEvent('topInvalid', 'invalid', domElement);
                    // For controlled components we always need to ensure we're listening
                    // to onChange. Even if there is no listener.
                    ensureListeningTo(rootContainerElement, 'onChange');
                    break;
                case 'textarea':
                    initWrapperState$2(domElement, rawProps);
                    props = getHostProps$3(domElement, rawProps);
                    trapBubbledEvent('topInvalid', 'invalid', domElement);
                    // For controlled components we always need to ensure we're listening
                    // to onChange. Even if there is no listener.
                    ensureListeningTo(rootContainerElement, 'onChange');
                    break;
                default:
                    props = rawProps;
            }
            assertValidProps(tag, props, getStack);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
                case 'input':
                    // TODO: Make sure we check if this is still unmounted or do any clean
                    // up necessary since we never stop tracking anymore.
                    track(domElement);
                    postMountWrapper(domElement, rawProps);
                    break;
                case 'textarea':
                    // TODO: Make sure we check if this is still unmounted or do any clean
                    // up necessary since we never stop tracking anymore.
                    track(domElement);
                    postMountWrapper$3(domElement, rawProps);
                    break;
                case 'option':
                    postMountWrapper$1(domElement, rawProps);
                    break;
                case 'select':
                    postMountWrapper$2(domElement, rawProps);
                    break;
                default:
                    if (typeof props.onClick === 'function') {
                        // TODO: This cast may not be sound for SVG, MathML or custom elements.
                        trapClickOnNonInteractiveElement(domElement);
                    }
                    break;
            }
        }
        // Calculate the diff between the two objects.
        function diffProperties$1(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
                validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
                case 'input':
                    lastProps = getHostProps(domElement, lastRawProps);
                    nextProps = getHostProps(domElement, nextRawProps);
                    updatePayload = [];
                    break;
                case 'option':
                    lastProps = getHostProps$1(domElement, lastRawProps);
                    nextProps = getHostProps$1(domElement, nextRawProps);
                    updatePayload = [];
                    break;
                case 'select':
                    lastProps = getHostProps$2(domElement, lastRawProps);
                    nextProps = getHostProps$2(domElement, nextRawProps);
                    updatePayload = [];
                    break;
                case 'textarea':
                    lastProps = getHostProps$3(domElement, lastRawProps);
                    nextProps = getHostProps$3(domElement, nextRawProps);
                    updatePayload = [];
                    break;
                default:
                    lastProps = lastRawProps;
                    nextProps = nextRawProps;
                    if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
                        // TODO: This cast may not be sound for SVG, MathML or custom elements.
                        trapClickOnNonInteractiveElement(domElement);
                    }
                    break;
            }
            assertValidProps(tag, nextProps, getStack);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
                if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                    continue;
                }
                if (propKey === STYLE) {
                    var lastStyle = lastProps[propKey];
                    for (styleName in lastStyle) {
                        if (lastStyle.hasOwnProperty(styleName)) {
                            if (!styleUpdates) {
                                styleUpdates = {};
                            }
                            styleUpdates[styleName] = '';
                        }
                    }
                }
                else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
                    // Noop. This is handled by the clear text mechanism.
                }
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
                    // Noop
                }
                else if (propKey === AUTOFOCUS) {
                    // Noop. It doesn't work on updates anyway.
                }
                else if (registrationNameModules.hasOwnProperty(propKey)) {
                    // This is a special case. If any listener updates we need to ensure
                    // that the "current" fiber pointer gets updated so we need a commit
                    // to update this element.
                    if (!updatePayload) {
                        updatePayload = [];
                    }
                }
                else {
                    // For all other deleted properties we add it to the queue. We use
                    // the whitelist in the commit phase instead.
                    (updatePayload = updatePayload || []).push(propKey, null);
                }
            }
            for (propKey in nextProps) {
                var nextProp = nextProps[propKey];
                var lastProp = lastProps != null ? lastProps[propKey] : undefined;
                if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                    continue;
                }
                if (propKey === STYLE) {
                    {
                        if (nextProp) {
                            // Freeze the next style object so that we can assume it won't be
                            // mutated. We have already warned for this in the past.
                            Object.freeze(nextProp);
                        }
                    }
                    if (lastProp) {
                        // Unset styles on `lastProp` but not on `nextProp`.
                        for (styleName in lastProp) {
                            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                                if (!styleUpdates) {
                                    styleUpdates = {};
                                }
                                styleUpdates[styleName] = '';
                            }
                        }
                        // Update styles that changed since `lastProp`.
                        for (styleName in nextProp) {
                            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                                if (!styleUpdates) {
                                    styleUpdates = {};
                                }
                                styleUpdates[styleName] = nextProp[styleName];
                            }
                        }
                    }
                    else {
                        // Relies on `updateStylesByID` not mutating `styleUpdates`.
                        if (!styleUpdates) {
                            if (!updatePayload) {
                                updatePayload = [];
                            }
                            updatePayload.push(propKey, styleUpdates);
                        }
                        styleUpdates = nextProp;
                    }
                }
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var nextHtml = nextProp ? nextProp[HTML] : undefined;
                    var lastHtml = lastProp ? lastProp[HTML] : undefined;
                    if (nextHtml != null) {
                        if (lastHtml !== nextHtml) {
                            (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
                        }
                    }
                    else {
                        // TODO: It might be too late to clear this if we have children
                        // inserted already.
                    }
                }
                else if (propKey === CHILDREN) {
                    if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
                        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
                    }
                }
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
                    // Noop
                }
                else if (registrationNameModules.hasOwnProperty(propKey)) {
                    if (nextProp != null) {
                        // We eagerly listen to this even though we haven't committed yet.
                        if (true && typeof nextProp !== 'function') {
                            warnForInvalidEventListener(propKey, nextProp);
                        }
                        ensureListeningTo(rootContainerElement, propKey);
                    }
                    if (!updatePayload && lastProp !== nextProp) {
                        // This is a special case. If any listener updates we need to ensure
                        // that the "current" props pointer gets updated so we need a commit
                        // to update this element.
                        updatePayload = [];
                    }
                }
                else {
                    // For any other property we always add it to the queue and then we
                    // filter it out using the whitelist during the commit.
                    (updatePayload = updatePayload || []).push(propKey, nextProp);
                }
            }
            if (styleUpdates) {
                (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
        }
        // Apply the diff.
        function updateProperties$1(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            // Update checked *before* name.
            // In the middle of an update, it is possible to have multiple checked.
            // When a checked radio tries to change name, browser makes another radio's checked false.
            if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
                updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            // Apply the diff.
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            // TODO: Ensure that an update gets scheduled if any of the special props
            // changed.
            switch (tag) {
                case 'input':
                    // Update the wrapper around inputs *after* updating props. This has to
                    // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                    // raise warnings and prevent the new value from being assigned.
                    updateWrapper(domElement, nextRawProps);
                    break;
                case 'textarea':
                    updateWrapper$1(domElement, nextRawProps);
                    break;
                case 'select':
                    // <select> value update needs to occur after <option> children
                    // reconciliation
                    postUpdateWrapper(domElement, nextRawProps);
                    break;
            }
        }
        function diffHydratedProperties$1(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            {
                var suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
                var isCustomComponentTag = isCustomComponent(tag, rawProps);
                validatePropertiesInDevelopment(tag, rawProps);
                if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                    warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');
                    didWarnShadyDOM = true;
                }
            }
            // TODO: Make sure that we check isMounted before firing any of these events.
            switch (tag) {
                case 'iframe':
                case 'object':
                    trapBubbledEvent('topLoad', 'load', domElement);
                    break;
                case 'video':
                case 'audio':
                    // Create listener for each media event
                    for (var event in mediaEvents) {
                        if (mediaEvents.hasOwnProperty(event)) {
                            trapBubbledEvent(event, mediaEvents[event], domElement);
                        }
                    }
                    break;
                case 'source':
                    trapBubbledEvent('topError', 'error', domElement);
                    break;
                case 'img':
                case 'image':
                    trapBubbledEvent('topError', 'error', domElement);
                    trapBubbledEvent('topLoad', 'load', domElement);
                    break;
                case 'form':
                    trapBubbledEvent('topReset', 'reset', domElement);
                    trapBubbledEvent('topSubmit', 'submit', domElement);
                    break;
                case 'details':
                    trapBubbledEvent('topToggle', 'toggle', domElement);
                    break;
                case 'input':
                    initWrapperState(domElement, rawProps);
                    trapBubbledEvent('topInvalid', 'invalid', domElement);
                    // For controlled components we always need to ensure we're listening
                    // to onChange. Even if there is no listener.
                    ensureListeningTo(rootContainerElement, 'onChange');
                    break;
                case 'option':
                    validateProps(domElement, rawProps);
                    break;
                case 'select':
                    initWrapperState$1(domElement, rawProps);
                    trapBubbledEvent('topInvalid', 'invalid', domElement);
                    // For controlled components we always need to ensure we're listening
                    // to onChange. Even if there is no listener.
                    ensureListeningTo(rootContainerElement, 'onChange');
                    break;
                case 'textarea':
                    initWrapperState$2(domElement, rawProps);
                    trapBubbledEvent('topInvalid', 'invalid', domElement);
                    // For controlled components we always need to ensure we're listening
                    // to onChange. Even if there is no listener.
                    ensureListeningTo(rootContainerElement, 'onChange');
                    break;
            }
            assertValidProps(tag, rawProps, getStack);
            {
                var extraAttributeNames = new Set();
                var attributes = domElement.attributes;
                for (var i = 0; i < attributes.length; i++) {
                    var name = attributes[i].name.toLowerCase();
                    switch (name) {
                        // Built-in SSR attribute is whitelisted
                        case 'data-reactroot':
                            break;
                        // Controlled attributes are not validated
                        // TODO: Only ignore them on controlled tags.
                        case 'value':
                            break;
                        case 'checked':
                            break;
                        case 'selected':
                            break;
                        default:
                            // Intentionally use the original name.
                            // See discussion in https://github.com/facebook/react/pull/10676.
                            extraAttributeNames.add(attributes[i].name);
                    }
                }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
                if (!rawProps.hasOwnProperty(propKey)) {
                    continue;
                }
                var nextProp = rawProps[propKey];
                if (propKey === CHILDREN) {
                    // For text content children we compare against textContent. This
                    // might match additional HTML that is hidden when we read it using
                    // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                    // satisfies our requirement. Our requirement is not to produce perfect
                    // HTML and attributes. Ideally we should preserve structure but it's
                    // ok not to if the visible content is still enough to indicate what
                    // even listeners these nodes might be wired up to.
                    // TODO: Warn if there is more than a single textNode as a child.
                    // TODO: Should we use domElement.firstChild.nodeValue to compare?
                    if (typeof nextProp === 'string') {
                        if (domElement.textContent !== nextProp) {
                            if (true && !suppressHydrationWarning) {
                                warnForTextDifference(domElement.textContent, nextProp);
                            }
                            updatePayload = [CHILDREN, nextProp];
                        }
                    }
                    else if (typeof nextProp === 'number') {
                        if (domElement.textContent !== '' + nextProp) {
                            if (true && !suppressHydrationWarning) {
                                warnForTextDifference(domElement.textContent, nextProp);
                            }
                            updatePayload = [CHILDREN, '' + nextProp];
                        }
                    }
                }
                else if (registrationNameModules.hasOwnProperty(propKey)) {
                    if (nextProp != null) {
                        if (true && typeof nextProp !== 'function') {
                            warnForInvalidEventListener(propKey, nextProp);
                        }
                        ensureListeningTo(rootContainerElement, propKey);
                    }
                }
                else {
                    // Validate that the properties correspond to their expected values.
                    var serverValue;
                    var propertyInfo;
                    if (suppressHydrationWarning) {
                        // Don't bother comparing. We're ignoring all these warnings.
                    }
                    else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
                        // Controlled attributes are not validated
                        // TODO: Only ignore them on controlled tags.
                        propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
                        // Noop
                    }
                    else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                        var rawHtml = nextProp ? nextProp[HTML] || '' : '';
                        var serverHTML = domElement.innerHTML;
                        var expectedHTML = normalizeHTML(domElement, rawHtml);
                        if (expectedHTML !== serverHTML) {
                            warnForPropDifference(propKey, serverHTML, expectedHTML);
                        }
                    }
                    else if (propKey === STYLE) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames['delete'](propKey);
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) {
                            warnForPropDifference(propKey, serverValue, expectedStyle);
                        }
                    }
                    else if (isCustomComponentTag) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames['delete'](propKey.toLowerCase());
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                        if (nextProp !== serverValue) {
                            warnForPropDifference(propKey, serverValue, nextProp);
                        }
                    }
                    else if (shouldSetAttribute(propKey, nextProp)) {
                        if (propertyInfo = getPropertyInfo(propKey)) {
                            // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames['delete'](propertyInfo.attributeName);
                            serverValue = getValueForProperty(domElement, propKey, nextProp);
                        }
                        else {
                            var ownNamespace = parentNamespace;
                            if (ownNamespace === HTML_NAMESPACE) {
                                ownNamespace = getIntrinsicNamespace(tag);
                            }
                            if (ownNamespace === HTML_NAMESPACE) {
                                // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames['delete'](propKey.toLowerCase());
                            }
                            else {
                                // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames['delete'](propKey);
                            }
                            serverValue = getValueForAttribute(domElement, propKey, nextProp);
                        }
                        if (nextProp !== serverValue) {
                            warnForPropDifference(propKey, serverValue, nextProp);
                        }
                    }
                }
            }
            {
                // $FlowFixMe - Should be inferred as not undefined.
                if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    warnForExtraAttributes(extraAttributeNames);
                }
            }
            switch (tag) {
                case 'input':
                    // TODO: Make sure we check if this is still unmounted or do any clean
                    // up necessary since we never stop tracking anymore.
                    track(domElement);
                    postMountWrapper(domElement, rawProps);
                    break;
                case 'textarea':
                    // TODO: Make sure we check if this is still unmounted or do any clean
                    // up necessary since we never stop tracking anymore.
                    track(domElement);
                    postMountWrapper$3(domElement, rawProps);
                    break;
                case 'select':
                case 'option':
                    // For input and textarea we current always set the value property at
                    // post mount to force it to diverge from attributes. However, for
                    // option and select we don't quite do the same thing and select
                    // is not resilient to the DOM state changing so we don't do that here.
                    // TODO: Consider not doing this for input and textarea.
                    break;
                default:
                    if (typeof rawProps.onClick === 'function') {
                        // TODO: This cast may not be sound for SVG, MathML or custom elements.
                        trapClickOnNonInteractiveElement(domElement);
                    }
                    break;
            }
            return updatePayload;
        }
        function diffHydratedText$1(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
        }
        function warnForUnmatchedText$1(textNode, text) {
            {
                warnForTextDifference(textNode.nodeValue, text);
            }
        }
        function warnForDeletedHydratableElement$1(parentNode, child) {
            {
                if (didWarnInvalidHydration) {
                    return;
                }
                didWarnInvalidHydration = true;
                warning(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
        }
        function warnForDeletedHydratableText$1(parentNode, child) {
            {
                if (didWarnInvalidHydration) {
                    return;
                }
                didWarnInvalidHydration = true;
                warning(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
        }
        function warnForInsertedHydratedElement$1(parentNode, tag, props) {
            {
                if (didWarnInvalidHydration) {
                    return;
                }
                didWarnInvalidHydration = true;
                warning(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
            }
        }
        function warnForInsertedHydratedText$1(parentNode, text) {
            {
                if (text === '') {
                    // We expect to insert empty text nodes since they're not represented in
                    // the HTML.
                    // TODO: Remove this special case if we can just avoid inserting empty
                    // text nodes.
                    return;
                }
                if (didWarnInvalidHydration) {
                    return;
                }
                didWarnInvalidHydration = true;
                warning(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
        }
        function restoreControlledState(domElement, tag, props) {
            switch (tag) {
                case 'input':
                    restoreControlledState$1(domElement, props);
                    return;
                case 'textarea':
                    restoreControlledState$3(domElement, props);
                    return;
                case 'select':
                    restoreControlledState$2(domElement, props);
                    return;
            }
        }
        var ReactDOMFiberComponent = Object.freeze({
            createElement: createElement$1,
            createTextNode: createTextNode$1,
            setInitialProperties: setInitialProperties$1,
            diffProperties: diffProperties$1,
            updateProperties: updateProperties$1,
            diffHydratedProperties: diffHydratedProperties$1,
            diffHydratedText: diffHydratedText$1,
            warnForUnmatchedText: warnForUnmatchedText$1,
            warnForDeletedHydratableElement: warnForDeletedHydratableElement$1,
            warnForDeletedHydratableText: warnForDeletedHydratableText$1,
            warnForInsertedHydratedElement: warnForInsertedHydratedElement$1,
            warnForInsertedHydratedText: warnForInsertedHydratedText$1,
            restoreControlledState: restoreControlledState
        });
        // TODO: direct imports like some-package/src/* are bad. Fix me.
        var getCurrentFiberStackAddendum$6 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
        var validateDOMNesting = emptyFunction;
        {
            // This validation code was written based on the HTML5 parsing spec:
            // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
            //
            // Note: this does not catch all invalid nesting, nor does it try to (as it's
            // not clear what practical benefit doing so provides); instead, we warn only
            // for cases where the parser will give a parse tree differing from what React
            // intended. For example, <b><div></div></b> is invalid but we don't warn
            // because it still parses correctly; we do warn for other cases like nested
            // <p> tags where the beginning of the second element implicitly closes the
            // first, causing a confusing mess.
            // https://html.spec.whatwg.org/multipage/syntax.html#special
            var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
            // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
            var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
                // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
                // TODO: Distinguish by namespace here -- for <title>, including it here
                // errs on the side of fewer warnings
                'foreignObject', 'desc', 'title'];
            // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
            var buttonScopeTags = inScopeTags.concat(['button']);
            // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
            var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
            var emptyAncestorInfo = {
                current: null,
                formTag: null,
                aTagInScope: null,
                buttonTagInScope: null,
                nobrTagInScope: null,
                pTagInButtonScope: null,
                listItemTagAutoclosing: null,
                dlItemTagAutoclosing: null
            };
            var updatedAncestorInfo$1 = function (oldInfo, tag, instance) {
                var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
                var info = { tag: tag, instance: instance };
                if (inScopeTags.indexOf(tag) !== -1) {
                    ancestorInfo.aTagInScope = null;
                    ancestorInfo.buttonTagInScope = null;
                    ancestorInfo.nobrTagInScope = null;
                }
                if (buttonScopeTags.indexOf(tag) !== -1) {
                    ancestorInfo.pTagInButtonScope = null;
                }
                // See rules for 'li', 'dd', 'dt' start tags in
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
                if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
                    ancestorInfo.listItemTagAutoclosing = null;
                    ancestorInfo.dlItemTagAutoclosing = null;
                }
                ancestorInfo.current = info;
                if (tag === 'form') {
                    ancestorInfo.formTag = info;
                }
                if (tag === 'a') {
                    ancestorInfo.aTagInScope = info;
                }
                if (tag === 'button') {
                    ancestorInfo.buttonTagInScope = info;
                }
                if (tag === 'nobr') {
                    ancestorInfo.nobrTagInScope = info;
                }
                if (tag === 'p') {
                    ancestorInfo.pTagInButtonScope = info;
                }
                if (tag === 'li') {
                    ancestorInfo.listItemTagAutoclosing = info;
                }
                if (tag === 'dd' || tag === 'dt') {
                    ancestorInfo.dlItemTagAutoclosing = info;
                }
                return ancestorInfo;
            };
            /**
             * Returns whether
             */
            var isTagValidWithParent = function (tag, parentTag) {
                // First, let's check if we're in an unusual parsing mode...
                switch (parentTag) {
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                    case 'select':
                        return tag === 'option' || tag === 'optgroup' || tag === '#text';
                    case 'optgroup':
                        return tag === 'option' || tag === '#text';
                    // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                    // but
                    case 'option':
                        return tag === '#text';
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                    // No special behavior since these rules fall back to "in body" mode for
                    // all except special table nodes which cause bad parsing behavior anyway.
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                    case 'tr':
                        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                    case 'tbody':
                    case 'thead':
                    case 'tfoot':
                        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                    case 'colgroup':
                        return tag === 'col' || tag === 'template';
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                    case 'table':
                        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                    case 'head':
                        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
                    // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                    case 'html':
                        return tag === 'head' || tag === 'body';
                    case '#document':
                        return tag === 'html';
                }
                // Probably in the "in body" parsing mode, so we outlaw only tag combos
                // where the parsing rules cause implicit opens or closes to be added.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
                switch (tag) {
                    case 'h1':
                    case 'h2':
                    case 'h3':
                    case 'h4':
                    case 'h5':
                    case 'h6':
                        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
                    case 'rp':
                    case 'rt':
                        return impliedEndTags.indexOf(parentTag) === -1;
                    case 'body':
                    case 'caption':
                    case 'col':
                    case 'colgroup':
                    case 'frame':
                    case 'head':
                    case 'html':
                    case 'tbody':
                    case 'td':
                    case 'tfoot':
                    case 'th':
                    case 'thead':
                    case 'tr':
                        // These tags are only valid with a few parents that have special child
                        // parsing rules -- if we're down here, then none of those matched and
                        // so we allow it only if we don't know what the parent is, as all other
                        // cases are invalid.
                        return parentTag == null;
                }
                return true;
            };
            /**
             * Returns whether
             */
            var findInvalidAncestorForTag = function (tag, ancestorInfo) {
                switch (tag) {
                    case 'address':
                    case 'article':
                    case 'aside':
                    case 'blockquote':
                    case 'center':
                    case 'details':
                    case 'dialog':
                    case 'dir':
                    case 'div':
                    case 'dl':
                    case 'fieldset':
                    case 'figcaption':
                    case 'figure':
                    case 'footer':
                    case 'header':
                    case 'hgroup':
                    case 'main':
                    case 'menu':
                    case 'nav':
                    case 'ol':
                    case 'p':
                    case 'section':
                    case 'summary':
                    case 'ul':
                    case 'pre':
                    case 'listing':
                    case 'table':
                    case 'hr':
                    case 'xmp':
                    case 'h1':
                    case 'h2':
                    case 'h3':
                    case 'h4':
                    case 'h5':
                    case 'h6':
                        return ancestorInfo.pTagInButtonScope;
                    case 'form':
                        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                    case 'li':
                        return ancestorInfo.listItemTagAutoclosing;
                    case 'dd':
                    case 'dt':
                        return ancestorInfo.dlItemTagAutoclosing;
                    case 'button':
                        return ancestorInfo.buttonTagInScope;
                    case 'a':
                        // Spec says something about storing a list of markers, but it sounds
                        // equivalent to this check.
                        return ancestorInfo.aTagInScope;
                    case 'nobr':
                        return ancestorInfo.nobrTagInScope;
                }
                return null;
            };
            var didWarn = {};
            validateDOMNesting = function (childTag, childText, ancestorInfo) {
                ancestorInfo = ancestorInfo || emptyAncestorInfo;
                var parentInfo = ancestorInfo.current;
                var parentTag = parentInfo && parentInfo.tag;
                if (childText != null) {
                    warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null');
                    childTag = '#text';
                }
                var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
                var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
                var invalidParentOrAncestor = invalidParent || invalidAncestor;
                if (!invalidParentOrAncestor) {
                    return;
                }
                var ancestorTag = invalidParentOrAncestor.tag;
                var addendum = getCurrentFiberStackAddendum$6();
                var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
                if (didWarn[warnKey]) {
                    return;
                }
                didWarn[warnKey] = true;
                var tagDisplayName = childTag;
                var whitespaceInfo = '';
                if (childTag === '#text') {
                    if (/\S/.test(childText)) {
                        tagDisplayName = 'Text nodes';
                    }
                    else {
                        tagDisplayName = 'Whitespace text nodes';
                        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
                    }
                }
                else {
                    tagDisplayName = '<' + childTag + '>';
                }
                if (invalidParent) {
                    var info = '';
                    if (ancestorTag === 'table' && childTag === 'tr') {
                        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
                    }
                    warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
                }
                else {
                    warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
                }
            };
            // TODO: turn this into a named export
            validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo$1;
            // For testing
            validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
                ancestorInfo = ancestorInfo || emptyAncestorInfo;
                var parentInfo = ancestorInfo.current;
                var parentTag = parentInfo && parentInfo.tag;
                return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
            };
        }
        var validateDOMNesting$1 = validateDOMNesting;
        // TODO: direct imports like some-package/src/* are bad. Fix me.
        var createElement = createElement$1;
        var createTextNode = createTextNode$1;
        var setInitialProperties = setInitialProperties$1;
        var diffProperties = diffProperties$1;
        var updateProperties = updateProperties$1;
        var diffHydratedProperties = diffHydratedProperties$1;
        var diffHydratedText = diffHydratedText$1;
        var warnForUnmatchedText = warnForUnmatchedText$1;
        var warnForDeletedHydratableElement = warnForDeletedHydratableElement$1;
        var warnForDeletedHydratableText = warnForDeletedHydratableText$1;
        var warnForInsertedHydratedElement = warnForInsertedHydratedElement$1;
        var warnForInsertedHydratedText = warnForInsertedHydratedText$1;
        var updatedAncestorInfo = validateDOMNesting$1.updatedAncestorInfo;
        var precacheFiberNode = precacheFiberNode$1;
        var updateFiberProps = updateFiberProps$1;
        {
            var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
            if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
                warning(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
            }
        }
        injection$3.injectFiberControlledHostComponent(ReactDOMFiberComponent);
        var eventsEnabled = null;
        var selectionInformation = null;
        /**
         * True if the supplied DOM node is a valid node element.
         *
         * @param {?DOMElement} node The candidate DOM node.
         * @return {boolean} True if the DOM is a valid DOM node.
         * @internal
         */
        function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
        }
        function getReactRootElementInContainer(container) {
            if (!container) {
                return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
                return container.documentElement;
            }
            else {
                return container.firstChild;
            }
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
                case 'button':
                case 'input':
                case 'select':
                case 'textarea':
                    return !!props.autoFocus;
            }
            return false;
        }
        var DOMRenderer = reactReconciler({
            getRootHostContext: function (rootContainerInstance) {
                var type = void 0;
                var namespace = void 0;
                var nodeType = rootContainerInstance.nodeType;
                switch (nodeType) {
                    case DOCUMENT_NODE:
                    case DOCUMENT_FRAGMENT_NODE:
                        {
                            type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                            var root = rootContainerInstance.documentElement;
                            namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                            break;
                        }
                    default:
                        {
                            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                            var ownNamespace = container.namespaceURI || null;
                            type = container.tagName;
                            namespace = getChildNamespace(ownNamespace, type);
                            break;
                        }
                }
                {
                    var validatedTag = type.toLowerCase();
                    var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);
                    return { namespace: namespace, ancestorInfo: _ancestorInfo };
                }
                return namespace;
            },
            getChildHostContext: function (parentHostContext, type) {
                {
                    var parentHostContextDev = parentHostContext;
                    var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
                    var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);
                    return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
                }
                var parentNamespace = parentHostContext;
                return getChildNamespace(parentNamespace, type);
            },
            getPublicInstance: function (instance) {
                return instance;
            },
            prepareForCommit: function () {
                eventsEnabled = isEnabled();
                selectionInformation = getSelectionInformation();
                setEnabled(false);
            },
            resetAfterCommit: function () {
                restoreSelection(selectionInformation);
                selectionInformation = null;
                setEnabled(eventsEnabled);
                eventsEnabled = null;
            },
            createInstance: function (type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
                var parentNamespace = void 0;
                {
                    // TODO: take namespace into account when validating.
                    var hostContextDev = hostContext;
                    validateDOMNesting$1(type, null, hostContextDev.ancestorInfo);
                    if (typeof props.children === 'string' || typeof props.children === 'number') {
                        var string = '' + props.children;
                        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
                        validateDOMNesting$1(null, string, ownAncestorInfo);
                    }
                    parentNamespace = hostContextDev.namespace;
                }
                var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
                precacheFiberNode(internalInstanceHandle, domElement);
                updateFiberProps(domElement, props);
                return domElement;
            },
            appendInitialChild: function (parentInstance, child) {
                parentInstance.appendChild(child);
            },
            finalizeInitialChildren: function (domElement, type, props, rootContainerInstance) {
                setInitialProperties(domElement, type, props, rootContainerInstance);
                return shouldAutoFocusHostComponent(type, props);
            },
            prepareUpdate: function (domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
                {
                    var hostContextDev = hostContext;
                    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
                        var string = '' + newProps.children;
                        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
                        validateDOMNesting$1(null, string, ownAncestorInfo);
                    }
                }
                return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
            },
            shouldSetTextContent: function (type, props) {
                return type === 'textarea' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === 'string';
            },
            shouldDeprioritizeSubtree: function (type, props) {
                return !!props.hidden;
            },
            createTextInstance: function (text, rootContainerInstance, hostContext, internalInstanceHandle) {
                {
                    var hostContextDev = hostContext;
                    validateDOMNesting$1(null, text, hostContextDev.ancestorInfo);
                }
                var textNode = createTextNode(text, rootContainerInstance);
                precacheFiberNode(internalInstanceHandle, textNode);
                return textNode;
            },
            now: now,
            mutation: {
                commitMount: function (domElement, type, newProps, internalInstanceHandle) {
                    domElement.focus();
                },
                commitUpdate: function (domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
                    // Update the props handle so that we know which props are the ones with
                    // with current event handlers.
                    updateFiberProps(domElement, newProps);
                    // Apply the diff to the DOM node.
                    updateProperties(domElement, updatePayload, type, oldProps, newProps);
                },
                resetTextContent: function (domElement) {
                    domElement.textContent = '';
                },
                commitTextUpdate: function (textInstance, oldText, newText) {
                    textInstance.nodeValue = newText;
                },
                appendChild: function (parentInstance, child) {
                    parentInstance.appendChild(child);
                },
                appendChildToContainer: function (container, child) {
                    if (container.nodeType === COMMENT_NODE) {
                        container.parentNode.insertBefore(child, container);
                    }
                    else {
                        container.appendChild(child);
                    }
                },
                insertBefore: function (parentInstance, child, beforeChild) {
                    parentInstance.insertBefore(child, beforeChild);
                },
                insertInContainerBefore: function (container, child, beforeChild) {
                    if (container.nodeType === COMMENT_NODE) {
                        container.parentNode.insertBefore(child, beforeChild);
                    }
                    else {
                        container.insertBefore(child, beforeChild);
                    }
                },
                removeChild: function (parentInstance, child) {
                    parentInstance.removeChild(child);
                },
                removeChildFromContainer: function (container, child) {
                    if (container.nodeType === COMMENT_NODE) {
                        container.parentNode.removeChild(child);
                    }
                    else {
                        container.removeChild(child);
                    }
                }
            },
            hydration: {
                canHydrateInstance: function (instance, type, props) {
                    if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
                        return null;
                    }
                    // This has now been refined to an element node.
                    return instance;
                },
                canHydrateTextInstance: function (instance, text) {
                    if (text === '' || instance.nodeType !== TEXT_NODE) {
                        // Empty strings are not parsed by HTML so there won't be a correct match here.
                        return null;
                    }
                    // This has now been refined to a text node.
                    return instance;
                },
                getNextHydratableSibling: function (instance) {
                    var node = instance.nextSibling;
                    // Skip non-hydratable nodes.
                    while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
                        node = node.nextSibling;
                    }
                    return node;
                },
                getFirstHydratableChild: function (parentInstance) {
                    var next = parentInstance.firstChild;
                    // Skip non-hydratable nodes.
                    while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
                        next = next.nextSibling;
                    }
                    return next;
                },
                hydrateInstance: function (instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
                    precacheFiberNode(internalInstanceHandle, instance);
                    // TODO: Possibly defer this until the commit phase where all the events
                    // get attached.
                    updateFiberProps(instance, props);
                    var parentNamespace = void 0;
                    {
                        var hostContextDev = hostContext;
                        parentNamespace = hostContextDev.namespace;
                    }
                    return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
                },
                hydrateTextInstance: function (textInstance, text, internalInstanceHandle) {
                    precacheFiberNode(internalInstanceHandle, textInstance);
                    return diffHydratedText(textInstance, text);
                },
                didNotMatchHydratedContainerTextInstance: function (parentContainer, textInstance, text) {
                    {
                        warnForUnmatchedText(textInstance, text);
                    }
                },
                didNotMatchHydratedTextInstance: function (parentType, parentProps, parentInstance, textInstance, text) {
                    if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                        warnForUnmatchedText(textInstance, text);
                    }
                },
                didNotHydrateContainerInstance: function (parentContainer, instance) {
                    {
                        if (instance.nodeType === 1) {
                            warnForDeletedHydratableElement(parentContainer, instance);
                        }
                        else {
                            warnForDeletedHydratableText(parentContainer, instance);
                        }
                    }
                },
                didNotHydrateInstance: function (parentType, parentProps, parentInstance, instance) {
                    if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                        if (instance.nodeType === 1) {
                            warnForDeletedHydratableElement(parentInstance, instance);
                        }
                        else {
                            warnForDeletedHydratableText(parentInstance, instance);
                        }
                    }
                },
                didNotFindHydratableContainerInstance: function (parentContainer, type, props) {
                    {
                        warnForInsertedHydratedElement(parentContainer, type, props);
                    }
                },
                didNotFindHydratableContainerTextInstance: function (parentContainer, text) {
                    {
                        warnForInsertedHydratedText(parentContainer, text);
                    }
                },
                didNotFindHydratableInstance: function (parentType, parentProps, parentInstance, type, props) {
                    if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                        warnForInsertedHydratedElement(parentInstance, type, props);
                    }
                },
                didNotFindHydratableTextInstance: function (parentType, parentProps, parentInstance, text) {
                    if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                        warnForInsertedHydratedText(parentInstance, text);
                    }
                }
            },
            scheduleDeferredCallback: rIC,
            cancelDeferredCallback: cIC,
            useSyncScheduling: !enableAsyncSchedulingByDefaultInReactDOM
        });
        injection$4.injectFiberBatchedUpdates(DOMRenderer.batchedUpdates);
        var warnedAboutHydrateAPI = false;
        function renderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
            {
                if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                    var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(container._reactRootContainer.current);
                    if (hostInstance) {
                        warning(hostInstance.parentNode === container, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
                    }
                }
                var isRootRenderedBySomeReact = !!container._reactRootContainer;
                var rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
                warning(!hasNonRootReactChild || isRootRenderedBySomeReact, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
                warning(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
            }
            var root = container._reactRootContainer;
            if (!root) {
                var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
                // First clear any existing content.
                if (!shouldHydrate) {
                    var warned = false;
                    var rootSibling = void 0;
                    while (rootSibling = container.lastChild) {
                        {
                            if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                                warned = true;
                                warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
                            }
                        }
                        container.removeChild(rootSibling);
                    }
                }
                {
                    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                        warnedAboutHydrateAPI = true;
                        lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
                    }
                }
                var newRoot = DOMRenderer.createContainer(container, shouldHydrate);
                root = container._reactRootContainer = newRoot;
                // Initial mount should not be batched.
                DOMRenderer.unbatchedUpdates(function () {
                    DOMRenderer.updateContainer(children, newRoot, parentComponent, callback);
                });
            }
            else {
                DOMRenderer.updateContainer(children, root, parentComponent, callback);
            }
            return DOMRenderer.getPublicRootInstance(root);
        }
        function createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
            // TODO: pass ReactDOM portal implementation as third argument
            return createPortal$1(children, container, null, key);
        }
        function ReactRoot(container, hydrate) {
            var root = DOMRenderer.createContainer(container, hydrate);
            this._reactRootContainer = root;
        }
        ReactRoot.prototype.render = function (children, callback) {
            var root = this._reactRootContainer;
            DOMRenderer.updateContainer(children, root, null, callback);
        };
        ReactRoot.prototype.unmount = function (callback) {
            var root = this._reactRootContainer;
            DOMRenderer.updateContainer(null, root, null, callback);
        };
        var ReactDOM = {
            createPortal: createPortal,
            findDOMNode: function (componentOrElement) {
                {
                    var owner = ReactCurrentOwner.current;
                    if (owner !== null) {
                        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                        warning(warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner) || 'A component');
                        owner.stateNode._warnedAboutRefsInRender = true;
                    }
                }
                if (componentOrElement == null) {
                    return null;
                }
                if (componentOrElement.nodeType === ELEMENT_NODE) {
                    return componentOrElement;
                }
                var inst = get(componentOrElement);
                if (inst) {
                    return DOMRenderer.findHostInstance(inst);
                }
                if (typeof componentOrElement.render === 'function') {
                    invariant(false, 'Unable to find node on an unmounted component.');
                }
                else {
                    invariant(false, 'Element appears to be neither ReactComponent nor DOMNode. Keys: %s', Object.keys(componentOrElement));
                }
            },
            hydrate: function (element, container, callback) {
                // TODO: throw or warn if we couldn't hydrate?
                return renderSubtreeIntoContainer(null, element, container, true, callback);
            },
            render: function (element, container, callback) {
                return renderSubtreeIntoContainer(null, element, container, false, callback);
            },
            unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
                !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
                return renderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
            },
            unmountComponentAtNode: function (container) {
                !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;
                if (container._reactRootContainer) {
                    {
                        var rootEl = getReactRootElementInContainer(container);
                        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
                        warning(!renderedByDifferentReact, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
                    }
                    // Unmount should not be batched.
                    DOMRenderer.unbatchedUpdates(function () {
                        renderSubtreeIntoContainer(null, null, container, false, function () {
                            container._reactRootContainer = null;
                        });
                    });
                    // If you call unmountComponentAtNode twice in quick succession, you'll
                    // get `true` twice. That's probably fine?
                    return true;
                }
                else {
                    {
                        var _rootEl = getReactRootElementInContainer(container);
                        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
                        // Check if the container itself is a React root node.
                        var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                        warning(!hasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
                    }
                    return false;
                }
            },
            // Temporary alias since we already shipped React 16 RC with it.
            // TODO: remove in React 17.
            unstable_createPortal: createPortal,
            unstable_batchedUpdates: batchedUpdates,
            unstable_deferredUpdates: DOMRenderer.deferredUpdates,
            flushSync: DOMRenderer.flushSync,
            __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
                // For TapEventPlugin which is popular in open source
                EventPluginHub: EventPluginHub,
                // Used by test-utils
                EventPluginRegistry: EventPluginRegistry,
                EventPropagators: EventPropagators,
                ReactControlledComponent: ReactControlledComponent,
                ReactDOMComponentTree: ReactDOMComponentTree,
                ReactDOMEventListener: ReactDOMEventListener
            }
        };
        if (enableCreateRoot) {
            ReactDOM.createRoot = function createRoot(container, options) {
                var hydrate = options != null && options.hydrate === true;
                return new ReactRoot(container, hydrate);
            };
        }
        var foundDevTools = DOMRenderer.injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: 'react-dom'
        });
        {
            if (!foundDevTools && ExecutionEnvironment.canUseDOM && window.top === window.self) {
                // If we're in Chrome or Firefox, provide a download link if not installed.
                if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
                    var protocol = window.location.protocol;
                    // Don't warn in exotic cases like chrome-extension://.
                    if (/^(https?|file):$/.test(protocol)) {
                        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
                    }
                }
            }
        }
        var ReactDOM$2 = Object.freeze({
            default: ReactDOM
        });
        var ReactDOM$3 = (ReactDOM$2 && ReactDOM) || ReactDOM$2;
        // TODO: decide on the top-level export form.
        // This is hacky but makes it work with both Rollup and Jest.
        var reactDom = ReactDOM$3['default'] ? ReactDOM$3['default'] : ReactDOM$3;
        module.exports = reactDom;
    })();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var hyphenate = __webpack_require__(51);
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
    return hyphenate(string).replace(msPattern, '-ms-');
}
module.exports = hyphenateStyleName;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */
var _uppercasePattern = /([A-Z])/g;
/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
    return string.replace(_uppercasePattern, '-$1').toLowerCase();
}
module.exports = hyphenate;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var camelize = __webpack_require__(53);
var msPattern = /^-ms-/;
/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
    return camelize(string.replace(msPattern, 'ms-'));
}
module.exports = camelizeStyleName;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */
var _hyphenPattern = /-(.)/g;
/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
    return string.replace(_hyphenPattern, function (_, character) {
        return character.toUpperCase();
    });
}
module.exports = camelize;


/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history_createBrowserHistory__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history_createBrowserHistory___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_history_createBrowserHistory__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(23);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _possibleConstructorReturn(self, call) { if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * The public API for a <Router> that uses HTML5 history.
 */
var BrowserRouter = function (_React$Component) {
    _inherits(BrowserRouter, _React$Component);
    function BrowserRouter() {
        var _temp, _this, _ret;
        _classCallCheck(this, BrowserRouter);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = __WEBPACK_IMPORTED_MODULE_3_history_createBrowserHistory___default()(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
    }
    BrowserRouter.prototype.componentWillMount = function componentWillMount() {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, '<BrowserRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { BrowserRouter as Router }`.');
    };
    BrowserRouter.prototype.render = function render() {
        return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__Router__["a" /* default */], { history: this.history, children: this.props.children });
    };
    return BrowserRouter;
}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);
BrowserRouter.propTypes = {
    basename: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.string,
    forceRefresh: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.bool,
    getUserConfirmation: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
    keyLength: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.number,
    children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.node
};
/* harmony default export */ __webpack_exports__["a"] = (BrowserRouter);


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var emptyFunction = __webpack_require__(5);
var invariant = __webpack_require__(7);
var warning = __webpack_require__(11);
var assign = __webpack_require__(6);
var ReactPropTypesSecret = __webpack_require__(19);
var checkPropTypes = __webpack_require__(18);
module.exports = function (isValidElement, throwOnDirectAccess) {
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */
    function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') {
            return iteratorFn;
        }
    }
    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */
    var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker,
    };
    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    /*eslint-disable no-self-compare*/
    function is(x, y) {
        // SameValue algorithm
        if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
        }
        else {
            // Step 6.a: NaN == NaN
            return x !== x && y !== y;
        }
    }
    /*eslint-enable no-self-compare*/
    /**
     * We use an Error-like object for backward compatibility as people may call
     * PropTypes directly and inspect their output. However, we don't use real
     * Errors anymore. We don't inspect their stack anyway, and creating them
     * is prohibitively expensive if they are created too often, such as what
     * happens in oneOfType() for any type before the one that matched.
     */
    function PropTypeError(message) {
        this.message = message;
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        if (process.env.NODE_ENV !== 'production') {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                        'Use `PropTypes.checkPropTypes()` to call them. ' +
                        'Read more at http://fb.me/use-check-prop-types');
                }
                else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] &&
                        // Avoid spamming the console because they are often not actionable except for lib authors
                        manualPropTypeWarningCount < 3) {
                        warning(false, 'You are manually calling a React.PropTypes validation ' +
                            'function for the `%s` prop on `%s`. This is deprecated ' +
                            'and will throw in the standalone `prop-types` package. ' +
                            'You may be seeing this warning due to a third-party PropTypes ' +
                            'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) {
                        return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    }
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            }
            else {
                return validate(props, propName, componentName, location, propFullName);
            }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunction.thatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') {
                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for (var i = 0; i < propValue.length; i++) {
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) {
                    return error;
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
            return emptyFunction.thatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
                if (is(propValue, expectedValues[i])) {
                    return null;
                }
            }
            var valuesString = JSON.stringify(expectedValues);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') {
                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            }
            for (var key in propValue) {
                if (propValue.hasOwnProperty(key)) {
                    var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                    if (error instanceof Error) {
                        return error;
                    }
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
            return emptyFunction.thatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== 'function') {
                warning(false, 'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
                    'received %s at index %s.', getPostfixForTypeWarning(checker), i);
                return emptyFunction.thatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                var checker = arrayOfTypeCheckers[i];
                if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
                    return null;
                }
            }
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            }
            for (var key in shapeTypes) {
                var checker = shapeTypes[key];
                if (!checker) {
                    continue;
                }
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) {
                    return error;
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            }
            // We need to check all keys in case some are required but missing from
            // props.
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
                var checker = shapeTypes[key];
                if (!checker) {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
                        '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
                        '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                }
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) {
                    return error;
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch (typeof propValue) {
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) {
                    return propValue.every(isNode);
                }
                if (propValue === null || isValidElement(propValue)) {
                    return true;
                }
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) {
                        while (!(step = iterator.next()).done) {
                            if (!isNode(step.value)) {
                                return false;
                            }
                        }
                    }
                    else {
                        // Iterator will provide entry [k,v] tuples rather than values.
                        while (!(step = iterator.next()).done) {
                            var entry = step.value;
                            if (entry) {
                                if (!isNode(entry[1])) {
                                    return false;
                                }
                            }
                        }
                    }
                }
                else {
                    return false;
                }
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') {
            return true;
        }
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') {
            return true;
        }
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
            return true;
        }
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
            return 'array';
        }
        if (propValue instanceof RegExp) {
            // Old webkits (at least until Android 4.0) return 'function' rather than
            // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
            // passes PropTypes.object.
            return 'object';
        }
        if (isSymbol(propType, propValue)) {
            return 'symbol';
        }
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
            return '' + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) {
                return 'date';
            }
            else if (propValue instanceof RegExp) {
                return 'regexp';
            }
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
        }
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var emptyFunction = __webpack_require__(5);
var invariant = __webpack_require__(7);
var ReactPropTypesSecret = __webpack_require__(19);
module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
            // It is still safe when called from React.
            return;
        }
        invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use PropTypes.checkPropTypes() to call them. ' +
            'Read more at http://fb.me/use-check-prop-types');
    }
    ;
    shim.isRequired = shim;
    function getShim() {
        return shim;
    }
    ;
    // Important!
    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
    var ReactPropTypes = {
        array: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim
    };
    ReactPropTypes.checkPropTypes = emptyFunction;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };
var _warning = __webpack_require__(1);
var _warning2 = _interopRequireDefault(_warning);
var _invariant = __webpack_require__(4);
var _invariant2 = _interopRequireDefault(_invariant);
var _LocationUtils = __webpack_require__(21);
var _PathUtils = __webpack_require__(8);
var _createTransitionManager = __webpack_require__(22);
var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
var _DOMUtils = __webpack_require__(36);
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';
var getHistoryState = function getHistoryState() {
    try {
        return window.history.state || {};
    }
    catch (e) {
        // IE 11 sometimes throws when accessing window.history.state
        // See https://github.com/ReactTraining/history/pull/289
        return {};
    }
};
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */
var createBrowserHistory = function createBrowserHistory() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');
    var globalHistory = window.history;
    var canUseHistory = (0, _DOMUtils.supportsHistory)();
    var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();
    var _props$forceRefresh = props.forceRefresh, forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh, _props$getUserConfirm = props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm, _props$keyLength = props.keyLength, keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;
    var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';
    var getDOMLocation = function getDOMLocation(historyState) {
        var _ref = historyState || {}, key = _ref.key, state = _ref.state;
        var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
        var path = pathname + search + hash;
        (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
        if (basename)
            path = (0, _PathUtils.stripBasename)(path, basename);
        return (0, _LocationUtils.createLocation)(path, state, key);
    };
    var createKey = function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
    };
    var transitionManager = (0, _createTransitionManager2.default)();
    var setState = function setState(nextState) {
        _extends(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
    };
    var handlePopState = function handlePopState(event) {
        // Ignore extraneous popstate events in WebKit.
        if ((0, _DOMUtils.isExtraneousPopstateEvent)(event))
            return;
        handlePop(getDOMLocation(event.state));
    };
    var handleHashChange = function handleHashChange() {
        handlePop(getDOMLocation(getHistoryState()));
    };
    var forceNextPop = false;
    var handlePop = function handlePop(location) {
        if (forceNextPop) {
            forceNextPop = false;
            setState();
        }
        else {
            var action = 'POP';
            transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                if (ok) {
                    setState({ action: action, location: location });
                }
                else {
                    revertPop(location);
                }
            });
        }
    };
    var revertPop = function revertPop(fromLocation) {
        var toLocation = history.location;
        // TODO: We could probably make this more reliable by
        // keeping a list of keys we've seen in sessionStorage.
        // Instead, we just default to 0 for keys we don't know.
        var toIndex = allKeys.indexOf(toLocation.key);
        if (toIndex === -1)
            toIndex = 0;
        var fromIndex = allKeys.indexOf(fromLocation.key);
        if (fromIndex === -1)
            fromIndex = 0;
        var delta = toIndex - fromIndex;
        if (delta) {
            forceNextPop = true;
            go(delta);
        }
    };
    var initialLocation = getDOMLocation(getHistoryState());
    var allKeys = [initialLocation.key];
    // Public interface
    var createHref = function createHref(location) {
        return basename + (0, _PathUtils.createPath)(location);
    };
    var push = function push(path, state) {
        (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
        var action = 'PUSH';
        var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            var href = createHref(location);
            var key = location.key, state = location.state;
            if (canUseHistory) {
                globalHistory.pushState({ key: key, state: state }, null, href);
                if (forceRefresh) {
                    window.location.href = href;
                }
                else {
                    var prevIndex = allKeys.indexOf(history.location.key);
                    var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
                    nextKeys.push(location.key);
                    allKeys = nextKeys;
                    setState({ action: action, location: location });
                }
            }
            else {
                (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');
                window.location.href = href;
            }
        });
    };
    var replace = function replace(path, state) {
        (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
        var action = 'REPLACE';
        var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            var href = createHref(location);
            var key = location.key, state = location.state;
            if (canUseHistory) {
                globalHistory.replaceState({ key: key, state: state }, null, href);
                if (forceRefresh) {
                    window.location.replace(href);
                }
                else {
                    var prevIndex = allKeys.indexOf(history.location.key);
                    if (prevIndex !== -1)
                        allKeys[prevIndex] = location.key;
                    setState({ action: action, location: location });
                }
            }
            else {
                (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');
                window.location.replace(href);
            }
        });
    };
    var go = function go(n) {
        globalHistory.go(n);
    };
    var goBack = function goBack() {
        return go(-1);
    };
    var goForward = function goForward() {
        return go(1);
    };
    var listenerCount = 0;
    var checkDOMListeners = function checkDOMListeners(delta) {
        listenerCount += delta;
        if (listenerCount === 1) {
            (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);
            if (needsHashChangeListener)
                (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
        }
        else if (listenerCount === 0) {
            (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);
            if (needsHashChangeListener)
                (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
        }
    };
    var isBlocked = false;
    var block = function block() {
        var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var unblock = transitionManager.setPrompt(prompt);
        if (!isBlocked) {
            checkDOMListeners(1);
            isBlocked = true;
        }
        return function () {
            if (isBlocked) {
                isBlocked = false;
                checkDOMListeners(-1);
            }
            return unblock();
        };
    };
    var listen = function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function () {
            checkDOMListeners(-1);
            unlisten();
        };
    };
    var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
    };
    return history;
};
exports.default = createBrowserHistory;


/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history_createHashHistory__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history_createHashHistory___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_history_createHashHistory__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(23);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _possibleConstructorReturn(self, call) { if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * The public API for a <Router> that uses window.location.hash.
 */
var HashRouter = function (_React$Component) {
    _inherits(HashRouter, _React$Component);
    function HashRouter() {
        var _temp, _this, _ret;
        _classCallCheck(this, HashRouter);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = __WEBPACK_IMPORTED_MODULE_3_history_createHashHistory___default()(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
    }
    HashRouter.prototype.componentWillMount = function componentWillMount() {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, '<HashRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { HashRouter as Router }`.');
    };
    HashRouter.prototype.render = function render() {
        return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__Router__["a" /* default */], { history: this.history, children: this.props.children });
    };
    return HashRouter;
}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);
HashRouter.propTypes = {
    basename: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.string,
    getUserConfirmation: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
    hashType: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.oneOf(['hashbang', 'noslash', 'slash']),
    children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.node
};
/* unused harmony default export */ var _unused_webpack_default_export = (HashRouter);


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };
var _warning = __webpack_require__(1);
var _warning2 = _interopRequireDefault(_warning);
var _invariant = __webpack_require__(4);
var _invariant2 = _interopRequireDefault(_invariant);
var _LocationUtils = __webpack_require__(21);
var _PathUtils = __webpack_require__(8);
var _createTransitionManager = __webpack_require__(22);
var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
var _DOMUtils = __webpack_require__(36);
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var HashChangeEvent = 'hashchange';
var HashPathCoders = {
    hashbang: {
        encodePath: function encodePath(path) {
            return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
        },
        decodePath: function decodePath(path) {
            return path.charAt(0) === '!' ? path.substr(1) : path;
        }
    },
    noslash: {
        encodePath: _PathUtils.stripLeadingSlash,
        decodePath: _PathUtils.addLeadingSlash
    },
    slash: {
        encodePath: _PathUtils.addLeadingSlash,
        decodePath: _PathUtils.addLeadingSlash
    }
};
var getHashPath = function getHashPath() {
    // We can't use window.location.hash here because it's not
    // consistent across browsers - Firefox will pre-decode it!
    var href = window.location.href;
    var hashIndex = href.indexOf('#');
    return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
};
var pushHashPath = function pushHashPath(path) {
    return window.location.hash = path;
};
var replaceHashPath = function replaceHashPath(path) {
    var hashIndex = window.location.href.indexOf('#');
    window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
};
var createHashHistory = function createHashHistory() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');
    var globalHistory = window.history;
    var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();
    var _props$getUserConfirm = props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm, _props$hashType = props.hashType, hashType = _props$hashType === undefined ? 'slash' : _props$hashType;
    var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';
    var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath = _HashPathCoders$hashT.encodePath, decodePath = _HashPathCoders$hashT.decodePath;
    var getDOMLocation = function getDOMLocation() {
        var path = decodePath(getHashPath());
        (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
        if (basename)
            path = (0, _PathUtils.stripBasename)(path, basename);
        return (0, _LocationUtils.createLocation)(path);
    };
    var transitionManager = (0, _createTransitionManager2.default)();
    var setState = function setState(nextState) {
        _extends(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
    };
    var forceNextPop = false;
    var ignorePath = null;
    var handleHashChange = function handleHashChange() {
        var path = getHashPath();
        var encodedPath = encodePath(path);
        if (path !== encodedPath) {
            // Ensure we always have a properly-encoded hash.
            replaceHashPath(encodedPath);
        }
        else {
            var location = getDOMLocation();
            var prevLocation = history.location;
            if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location))
                return; // A hashchange doesn't always == location change.
            if (ignorePath === (0, _PathUtils.createPath)(location))
                return; // Ignore this change; we already setState in push/replace.
            ignorePath = null;
            handlePop(location);
        }
    };
    var handlePop = function handlePop(location) {
        if (forceNextPop) {
            forceNextPop = false;
            setState();
        }
        else {
            var action = 'POP';
            transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                if (ok) {
                    setState({ action: action, location: location });
                }
                else {
                    revertPop(location);
                }
            });
        }
    };
    var revertPop = function revertPop(fromLocation) {
        var toLocation = history.location;
        // TODO: We could probably make this more reliable by
        // keeping a list of paths we've seen in sessionStorage.
        // Instead, we just default to 0 for paths we don't know.
        var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));
        if (toIndex === -1)
            toIndex = 0;
        var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));
        if (fromIndex === -1)
            fromIndex = 0;
        var delta = toIndex - fromIndex;
        if (delta) {
            forceNextPop = true;
            go(delta);
        }
    };
    // Ensure the hash is encoded properly before doing anything else.
    var path = getHashPath();
    var encodedPath = encodePath(path);
    if (path !== encodedPath)
        replaceHashPath(encodedPath);
    var initialLocation = getDOMLocation();
    var allPaths = [(0, _PathUtils.createPath)(initialLocation)];
    // Public interface
    var createHref = function createHref(location) {
        return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
    };
    var push = function push(path, state) {
        (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');
        var action = 'PUSH';
        var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            var path = (0, _PathUtils.createPath)(location);
            var encodedPath = encodePath(basename + path);
            var hashChanged = getHashPath() !== encodedPath;
            if (hashChanged) {
                // We cannot tell if a hashchange was caused by a PUSH, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path;
                pushHashPath(encodedPath);
                var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
                var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
                nextPaths.push(path);
                allPaths = nextPaths;
                setState({ action: action, location: location });
            }
            else {
                (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');
                setState();
            }
        });
    };
    var replace = function replace(path, state) {
        (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');
        var action = 'REPLACE';
        var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            var path = (0, _PathUtils.createPath)(location);
            var encodedPath = encodePath(basename + path);
            var hashChanged = getHashPath() !== encodedPath;
            if (hashChanged) {
                // We cannot tell if a hashchange was caused by a REPLACE, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path;
                replaceHashPath(encodedPath);
            }
            var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));
            if (prevIndex !== -1)
                allPaths[prevIndex] = path;
            setState({ action: action, location: location });
        });
    };
    var go = function go(n) {
        (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');
        globalHistory.go(n);
    };
    var goBack = function goBack() {
        return go(-1);
    };
    var goForward = function goForward() {
        return go(1);
    };
    var listenerCount = 0;
    var checkDOMListeners = function checkDOMListeners(delta) {
        listenerCount += delta;
        if (listenerCount === 1) {
            (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
        }
        else if (listenerCount === 0) {
            (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
        }
    };
    var isBlocked = false;
    var block = function block() {
        var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var unblock = transitionManager.setPrompt(prompt);
        if (!isBlocked) {
            checkDOMListeners(1);
            isBlocked = true;
        }
        return function () {
            if (isBlocked) {
                isBlocked = false;
                checkDOMListeners(-1);
            }
            return unblock();
        };
    };
    var listen = function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function () {
            checkDOMListeners(-1);
            unlisten();
        };
    };
    var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
    };
    return history;
};
exports.default = createHashHistory;


/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_MemoryRouter__ = __webpack_require__(61);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_MemoryRouter__["a" /* default */]);


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history_createMemoryHistory__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history_createMemoryHistory___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_history_createMemoryHistory__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(24);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _possibleConstructorReturn(self, call) { if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * The public API for a <Router> that stores location in memory.
 */
var MemoryRouter = function (_React$Component) {
    _inherits(MemoryRouter, _React$Component);
    function MemoryRouter() {
        var _temp, _this, _ret;
        _classCallCheck(this, MemoryRouter);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = __WEBPACK_IMPORTED_MODULE_3_history_createMemoryHistory___default()(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
    }
    MemoryRouter.prototype.componentWillMount = function componentWillMount() {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, '<MemoryRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { MemoryRouter as Router }`.');
    };
    MemoryRouter.prototype.render = function render() {
        return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__Router__["a" /* default */], { history: this.history, children: this.props.children });
    };
    return MemoryRouter;
}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);
MemoryRouter.propTypes = {
    initialEntries: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.array,
    initialIndex: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.number,
    getUserConfirmation: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
    keyLength: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.number,
    children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.node
};
/* harmony default export */ __webpack_exports__["a"] = (MemoryRouter);


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };
var _warning = __webpack_require__(1);
var _warning2 = _interopRequireDefault(_warning);
var _PathUtils = __webpack_require__(8);
var _LocationUtils = __webpack_require__(21);
var _createTransitionManager = __webpack_require__(22);
var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var clamp = function clamp(n, lowerBound, upperBound) {
    return Math.min(Math.max(n, lowerBound), upperBound);
};
/**
 * Creates a history object that stores locations in memory.
 */
var createMemoryHistory = function createMemoryHistory() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var getUserConfirmation = props.getUserConfirmation, _props$initialEntries = props.initialEntries, initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries, _props$initialIndex = props.initialIndex, initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex, _props$keyLength = props.keyLength, keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;
    var transitionManager = (0, _createTransitionManager2.default)();
    var setState = function setState(nextState) {
        _extends(history, nextState);
        history.length = history.entries.length;
        transitionManager.notifyListeners(history.location, history.action);
    };
    var createKey = function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
    };
    var index = clamp(initialIndex, 0, initialEntries.length - 1);
    var entries = initialEntries.map(function (entry) {
        return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, createKey()) : (0, _LocationUtils.createLocation)(entry, undefined, entry.key || createKey());
    });
    // Public interface
    var createHref = _PathUtils.createPath;
    var push = function push(path, state) {
        (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
        var action = 'PUSH';
        var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            var prevIndex = history.index;
            var nextIndex = prevIndex + 1;
            var nextEntries = history.entries.slice(0);
            if (nextEntries.length > nextIndex) {
                nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
            }
            else {
                nextEntries.push(location);
            }
            setState({
                action: action,
                location: location,
                index: nextIndex,
                entries: nextEntries
            });
        });
    };
    var replace = function replace(path, state) {
        (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
        var action = 'REPLACE';
        var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            history.entries[history.index] = location;
            setState({ action: action, location: location });
        });
    };
    var go = function go(n) {
        var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
        var action = 'POP';
        var location = history.entries[nextIndex];
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (ok) {
                setState({
                    action: action,
                    location: location,
                    index: nextIndex
                });
            }
            else {
                // Mimic the behavior of DOM histories by
                // causing a render after a cancelled POP.
                setState();
            }
        });
    };
    var goBack = function goBack() {
        return go(-1);
    };
    var goForward = function goForward() {
        return go(1);
    };
    var canGo = function canGo(n) {
        var nextIndex = history.index + n;
        return nextIndex >= 0 && nextIndex < history.entries.length;
    };
    var block = function block() {
        var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return transitionManager.setPrompt(prompt);
    };
    var listen = function listen(listener) {
        return transitionManager.appendListener(listener);
    };
    var history = {
        length: entries.length,
        action: 'POP',
        location: entries[index],
        index: index,
        entries: entries,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        canGo: canGo,
        block: block,
        listen: listen
    };
    return history;
};
exports.default = createMemoryHistory;


/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Route__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Link__ = __webpack_require__(37);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) {
    if (keys.indexOf(i) >= 0)
        continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i))
        continue;
    target[i] = obj[i];
} return target; }




/**
 * A <Link> wrapper that knows if it's "active" or not.
 */
var NavLink = function NavLink(_ref) {
    var to = _ref.to, exact = _ref.exact, strict = _ref.strict, location = _ref.location, activeClassName = _ref.activeClassName, className = _ref.className, activeStyle = _ref.activeStyle, style = _ref.style, getIsActive = _ref.isActive, ariaCurrent = _ref.ariaCurrent, rest = _objectWithoutProperties(_ref, ['to', 'exact', 'strict', 'location', 'activeClassName', 'className', 'activeStyle', 'style', 'isActive', 'ariaCurrent']);
    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__Route__["a" /* default */], {
        path: (typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' ? to.pathname : to,
        exact: exact,
        strict: strict,
        location: location,
        children: function children(_ref2) {
            var location = _ref2.location, match = _ref2.match;
            var isActive = !!(getIsActive ? getIsActive(match, location) : match);
            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__Link__["a" /* default */], _extends({
                to: to,
                className: isActive ? [className, activeClassName].filter(function (i) {
                    return i;
                }).join(' ') : className,
                style: isActive ? _extends({}, style, activeStyle) : style,
                'aria-current': isActive && ariaCurrent
            }, rest));
        }
    });
};
NavLink.propTypes = {
    to: __WEBPACK_IMPORTED_MODULE_3__Link__["a" /* default */].propTypes.to,
    exact: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
    strict: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
    location: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
    activeClassName: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
    className: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
    activeStyle: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
    style: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
    isActive: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
    ariaCurrent: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOf(['page', 'step', 'location', 'true'])
};
NavLink.defaultProps = {
    activeClassName: 'active',
    ariaCurrent: 'true'
};
/* unused harmony default export */ var _unused_webpack_default_export = (NavLink);


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var isarray = __webpack_require__(65);
/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp;
module.exports.parse = parse;
module.exports.compile = compile;
module.exports.tokensToFunction = tokensToFunction;
module.exports.tokensToRegExp = tokensToRegExp;
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
    // Match escaped characters that would otherwise appear in future matches.
    // This allows the user to escape special characters that won't transform.
    '(\\\\.)',
    // Match Express-style parameters and un-named parameters with a prefix
    // and optional suffixes. Matches appear as:
    //
    // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
    // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
    // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
    '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse(str, options) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var defaultDelimiter = options && options.delimiter || '/';
    var res;
    while ((res = PATH_REGEXP.exec(str)) != null) {
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length;
        // Ignore already escaped sequences.
        if (escaped) {
            path += escaped[1];
            continue;
        }
        var next = str[index];
        var prefix = res[2];
        var name = res[3];
        var capture = res[4];
        var group = res[5];
        var modifier = res[6];
        var asterisk = res[7];
        // Push the current path onto the tokens.
        if (path) {
            tokens.push(path);
            path = '';
        }
        var partial = prefix != null && next != null && next !== prefix;
        var repeat = modifier === '+' || modifier === '*';
        var optional = modifier === '?' || modifier === '*';
        var delimiter = res[2] || defaultDelimiter;
        var pattern = capture || group;
        tokens.push({
            name: name || key++,
            prefix: prefix || '',
            delimiter: delimiter,
            optional: optional,
            repeat: repeat,
            partial: partial,
            asterisk: !!asterisk,
            pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
        });
    }
    // Match any characters still remaining.
    if (index < str.length) {
        path += str.substr(index);
    }
    // If the path exists, push it onto the end.
    if (path) {
        tokens.push(path);
    }
    return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile(str, options) {
    return tokensToFunction(parse(str, options));
}
/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty(str) {
    return encodeURI(str).replace(/[\/?#]/g, function (c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk(str) {
    return encodeURI(str).replace(/[?#]/g, function (c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction(tokens) {
    // Compile all the tokens into regexps.
    var matches = new Array(tokens.length);
    // Compile all the patterns before compilation.
    for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] === 'object') {
            matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
        }
    }
    return function (obj, opts) {
        var path = '';
        var data = obj || {};
        var options = opts || {};
        var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;
        for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i];
            if (typeof token === 'string') {
                path += token;
                continue;
            }
            var value = data[token.name];
            var segment;
            if (value == null) {
                if (token.optional) {
                    // Prepend partial segment prefixes.
                    if (token.partial) {
                        path += token.prefix;
                    }
                    continue;
                }
                else {
                    throw new TypeError('Expected "' + token.name + '" to be defined');
                }
            }
            if (isarray(value)) {
                if (!token.repeat) {
                    throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
                }
                if (value.length === 0) {
                    if (token.optional) {
                        continue;
                    }
                    else {
                        throw new TypeError('Expected "' + token.name + '" to not be empty');
                    }
                }
                for (var j = 0; j < value.length; j++) {
                    segment = encode(value[j]);
                    if (!matches[i].test(segment)) {
                        throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
                    }
                    path += (j === 0 ? token.prefix : token.delimiter) + segment;
                }
                continue;
            }
            segment = token.asterisk ? encodeAsterisk(value) : encode(value);
            if (!matches[i].test(segment)) {
                throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
            }
            path += token.prefix + segment;
        }
        return path;
    };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup(group) {
    return group.replace(/([=!:$\/()])/g, '\\$1');
}
/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys(re, keys) {
    re.keys = keys;
    return re;
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags(options) {
    return options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp(path, keys) {
    // Use a negative lookahead to match only capturing groups.
    var groups = path.source.match(/\((?!\?)/g);
    if (groups) {
        for (var i = 0; i < groups.length; i++) {
            keys.push({
                name: i,
                prefix: null,
                delimiter: null,
                optional: false,
                repeat: false,
                partial: false,
                asterisk: false,
                pattern: null
            });
        }
    }
    return attachKeys(path, keys);
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp(path, keys, options) {
    var parts = [];
    for (var i = 0; i < path.length; i++) {
        parts.push(pathToRegexp(path[i], keys, options).source);
    }
    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
    return attachKeys(regexp, keys);
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp(path, keys, options) {
    return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp(tokens, keys, options) {
    if (!isarray(keys)) {
        options = /** @type {!Object} */ (keys || options);
        keys = [];
    }
    options = options || {};
    var strict = options.strict;
    var end = options.end !== false;
    var route = '';
    // Iterate over the tokens and create our regexp string.
    for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        if (typeof token === 'string') {
            route += escapeString(token);
        }
        else {
            var prefix = escapeString(token.prefix);
            var capture = '(?:' + token.pattern + ')';
            keys.push(token);
            if (token.repeat) {
                capture += '(?:' + prefix + capture + ')*';
            }
            if (token.optional) {
                if (!token.partial) {
                    capture = '(?:' + prefix + '(' + capture + '))?';
                }
                else {
                    capture = prefix + '(' + capture + ')?';
                }
            }
            else {
                capture = prefix + '(' + capture + ')';
            }
            route += capture;
        }
    }
    var delimiter = escapeString(options.delimiter || '/');
    var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
    // In non-strict mode we allow a slash at the end of match. If the path to
    // match already ends with a slash, we remove it for consistency. The slash
    // is valid at the end of a path match, not in the middle. This is important
    // in non-ending mode, where "/test/" shouldn't match "/test//route".
    if (!strict) {
        route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
    }
    if (end) {
        route += '$';
    }
    else {
        // In non-ending mode, we need the capturing groups to match as much as
        // possible by using a positive lookahead to the end or next path segment.
        route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
    }
    return attachKeys(new RegExp('^' + route, flags(options)), keys);
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp(path, keys, options) {
    if (!isarray(keys)) {
        options = /** @type {!Object} */ (keys || options);
        keys = [];
    }
    options = options || {};
    if (path instanceof RegExp) {
        return regexpToRegexp(path, /** @type {!Array} */ (keys));
    }
    if (isarray(path)) {
        return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options);
    }
    return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options);
}


/***/ }),
/* 65 */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
};


/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Prompt__ = __webpack_require__(67);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Prompt__["a" /* default */]);


/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_invariant__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _possibleConstructorReturn(self, call) { if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



/**
 * The public API for prompting the user before navigating away
 * from a screen with a component.
 */
var Prompt = function (_React$Component) {
    _inherits(Prompt, _React$Component);
    function Prompt() {
        _classCallCheck(this, Prompt);
        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    Prompt.prototype.enable = function enable(message) {
        if (this.unblock)
            this.unblock();
        this.unblock = this.context.router.history.block(message);
    };
    Prompt.prototype.disable = function disable() {
        if (this.unblock) {
            this.unblock();
            this.unblock = null;
        }
    };
    Prompt.prototype.componentWillMount = function componentWillMount() {
        __WEBPACK_IMPORTED_MODULE_2_invariant___default()(this.context.router, 'You should not use <Prompt> outside a <Router>');
        if (this.props.when)
            this.enable(this.props.message);
    };
    Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (nextProps.when) {
            if (!this.props.when || this.props.message !== nextProps.message)
                this.enable(nextProps.message);
        }
        else {
            this.disable();
        }
    };
    Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
        this.disable();
    };
    Prompt.prototype.render = function render() {
        return null;
    };
    return Prompt;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);
Prompt.propTypes = {
    when: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
    message: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string]).isRequired
};
Prompt.defaultProps = {
    when: true
};
Prompt.contextTypes = {
    router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
        history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
            block: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
        }).isRequired
    }).isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (Prompt);


/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Redirect__ = __webpack_require__(69);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Redirect__["a" /* default */]);


/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_history__ = __webpack_require__(70);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _possibleConstructorReturn(self, call) { if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * The public API for updating the location programmatically
 * with a component.
 */
var Redirect = function (_React$Component) {
    _inherits(Redirect, _React$Component);
    function Redirect() {
        _classCallCheck(this, Redirect);
        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    Redirect.prototype.isStatic = function isStatic() {
        return this.context.router && this.context.router.staticContext;
    };
    Redirect.prototype.componentWillMount = function componentWillMount() {
        __WEBPACK_IMPORTED_MODULE_3_invariant___default()(this.context.router, 'You should not use <Redirect> outside a <Router>');
        if (this.isStatic())
            this.perform();
    };
    Redirect.prototype.componentDidMount = function componentDidMount() {
        if (!this.isStatic())
            this.perform();
    };
    Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
        var prevTo = Object(__WEBPACK_IMPORTED_MODULE_4_history__["a" /* createLocation */])(prevProps.to);
        var nextTo = Object(__WEBPACK_IMPORTED_MODULE_4_history__["a" /* createLocation */])(this.props.to);
        if (Object(__WEBPACK_IMPORTED_MODULE_4_history__["b" /* locationsAreEqual */])(prevTo, nextTo)) {
            __WEBPACK_IMPORTED_MODULE_2_warning___default()(false, 'You tried to redirect to the same route you\'re currently on: ' + ('"' + nextTo.pathname + nextTo.search + '"'));
            return;
        }
        this.perform();
    };
    Redirect.prototype.perform = function perform() {
        var history = this.context.router.history;
        var _props = this.props, push = _props.push, to = _props.to;
        if (push) {
            history.push(to);
        }
        else {
            history.replace(to);
        }
    };
    Redirect.prototype.render = function render() {
        return null;
    };
    return Redirect;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);
Redirect.propTypes = {
    push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
    from: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
    to: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object]).isRequired
};
Redirect.defaultProps = {
    push: false
};
Redirect.contextTypes = {
    router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
        history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
            push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
            replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
        }).isRequired,
        staticContext: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object
    }).isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (Redirect);


/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__createBrowserHistory__ = __webpack_require__(71);
/* unused harmony reexport createBrowserHistory */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__createHashHistory__ = __webpack_require__(72);
/* unused harmony reexport createHashHistory */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__createMemoryHistory__ = __webpack_require__(73);
/* unused harmony reexport createMemoryHistory */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__LocationUtils__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_3__LocationUtils__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_3__LocationUtils__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__PathUtils__ = __webpack_require__(9);
/* unused harmony reexport parsePath */
/* unused harmony reexport createPath */










/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__PathUtils__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__createTransitionManager__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DOMUtils__ = __webpack_require__(40);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };






var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';
var getHistoryState = function getHistoryState() {
    try {
        return window.history.state || {};
    }
    catch (e) {
        // IE 11 sometimes throws when accessing window.history.state
        // See https://github.com/ReactTraining/history/pull/289
        return {};
    }
};
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */
var createBrowserHistory = function createBrowserHistory() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    __WEBPACK_IMPORTED_MODULE_1_invariant___default()(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["b" /* canUseDOM */], 'Browser history needs a DOM');
    var globalHistory = window.history;
    var canUseHistory = Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["g" /* supportsHistory */])();
    var needsHashChangeListener = !Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["h" /* supportsPopStateOnHashChange */])();
    var _props$forceRefresh = props.forceRefresh, forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh, _props$getUserConfirm = props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === undefined ? __WEBPACK_IMPORTED_MODULE_5__DOMUtils__["c" /* getConfirmation */] : _props$getUserConfirm, _props$keyLength = props.keyLength, keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;
    var basename = props.basename ? Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["g" /* stripTrailingSlash */])(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */])(props.basename)) : '';
    var getDOMLocation = function getDOMLocation(historyState) {
        var _ref = historyState || {}, key = _ref.key, state = _ref.state;
        var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
        var path = pathname + search + hash;
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!basename || Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["c" /* hasBasename */])(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
        if (basename)
            path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["e" /* stripBasename */])(path, basename);
        return Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, key);
    };
    var createKey = function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
    };
    var transitionManager = Object(__WEBPACK_IMPORTED_MODULE_4__createTransitionManager__["a" /* default */])();
    var setState = function setState(nextState) {
        _extends(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
    };
    var handlePopState = function handlePopState(event) {
        // Ignore extraneous popstate events in WebKit.
        if (Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["d" /* isExtraneousPopstateEvent */])(event))
            return;
        handlePop(getDOMLocation(event.state));
    };
    var handleHashChange = function handleHashChange() {
        handlePop(getDOMLocation(getHistoryState()));
    };
    var forceNextPop = false;
    var handlePop = function handlePop(location) {
        if (forceNextPop) {
            forceNextPop = false;
            setState();
        }
        else {
            var action = 'POP';
            transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                if (ok) {
                    setState({ action: action, location: location });
                }
                else {
                    revertPop(location);
                }
            });
        }
    };
    var revertPop = function revertPop(fromLocation) {
        var toLocation = history.location;
        // TODO: We could probably make this more reliable by
        // keeping a list of keys we've seen in sessionStorage.
        // Instead, we just default to 0 for keys we don't know.
        var toIndex = allKeys.indexOf(toLocation.key);
        if (toIndex === -1)
            toIndex = 0;
        var fromIndex = allKeys.indexOf(fromLocation.key);
        if (fromIndex === -1)
            fromIndex = 0;
        var delta = toIndex - fromIndex;
        if (delta) {
            forceNextPop = true;
            go(delta);
        }
    };
    var initialLocation = getDOMLocation(getHistoryState());
    var allKeys = [initialLocation.key];
    // Public interface
    var createHref = function createHref(location) {
        return basename + Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location);
    };
    var push = function push(path, state) {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
        var action = 'PUSH';
        var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            var href = createHref(location);
            var key = location.key, state = location.state;
            if (canUseHistory) {
                globalHistory.pushState({ key: key, state: state }, null, href);
                if (forceRefresh) {
                    window.location.href = href;
                }
                else {
                    var prevIndex = allKeys.indexOf(history.location.key);
                    var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
                    nextKeys.push(location.key);
                    allKeys = nextKeys;
                    setState({ action: action, location: location });
                }
            }
            else {
                __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');
                window.location.href = href;
            }
        });
    };
    var replace = function replace(path, state) {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
        var action = 'REPLACE';
        var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            var href = createHref(location);
            var key = location.key, state = location.state;
            if (canUseHistory) {
                globalHistory.replaceState({ key: key, state: state }, null, href);
                if (forceRefresh) {
                    window.location.replace(href);
                }
                else {
                    var prevIndex = allKeys.indexOf(history.location.key);
                    if (prevIndex !== -1)
                        allKeys[prevIndex] = location.key;
                    setState({ action: action, location: location });
                }
            }
            else {
                __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');
                window.location.replace(href);
            }
        });
    };
    var go = function go(n) {
        globalHistory.go(n);
    };
    var goBack = function goBack() {
        return go(-1);
    };
    var goForward = function goForward() {
        return go(1);
    };
    var listenerCount = 0;
    var checkDOMListeners = function checkDOMListeners(delta) {
        listenerCount += delta;
        if (listenerCount === 1) {
            Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["a" /* addEventListener */])(window, PopStateEvent, handlePopState);
            if (needsHashChangeListener)
                Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["a" /* addEventListener */])(window, HashChangeEvent, handleHashChange);
        }
        else if (listenerCount === 0) {
            Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["e" /* removeEventListener */])(window, PopStateEvent, handlePopState);
            if (needsHashChangeListener)
                Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["e" /* removeEventListener */])(window, HashChangeEvent, handleHashChange);
        }
    };
    var isBlocked = false;
    var block = function block() {
        var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var unblock = transitionManager.setPrompt(prompt);
        if (!isBlocked) {
            checkDOMListeners(1);
            isBlocked = true;
        }
        return function () {
            if (isBlocked) {
                isBlocked = false;
                checkDOMListeners(-1);
            }
            return unblock();
        };
    };
    var listen = function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function () {
            checkDOMListeners(-1);
            unlisten();
        };
    };
    var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
    };
    return history;
};
/* unused harmony default export */ var _unused_webpack_default_export = (createBrowserHistory);


/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__PathUtils__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__createTransitionManager__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DOMUtils__ = __webpack_require__(40);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };






var HashChangeEvent = 'hashchange';
var HashPathCoders = {
    hashbang: {
        encodePath: function encodePath(path) {
            return path.charAt(0) === '!' ? path : '!/' + Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["f" /* stripLeadingSlash */])(path);
        },
        decodePath: function decodePath(path) {
            return path.charAt(0) === '!' ? path.substr(1) : path;
        }
    },
    noslash: {
        encodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["f" /* stripLeadingSlash */],
        decodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */]
    },
    slash: {
        encodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */],
        decodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */]
    }
};
var getHashPath = function getHashPath() {
    // We can't use window.location.hash here because it's not
    // consistent across browsers - Firefox will pre-decode it!
    var href = window.location.href;
    var hashIndex = href.indexOf('#');
    return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
};
var pushHashPath = function pushHashPath(path) {
    return window.location.hash = path;
};
var replaceHashPath = function replaceHashPath(path) {
    var hashIndex = window.location.href.indexOf('#');
    window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
};
var createHashHistory = function createHashHistory() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    __WEBPACK_IMPORTED_MODULE_1_invariant___default()(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["b" /* canUseDOM */], 'Hash history needs a DOM');
    var globalHistory = window.history;
    var canGoWithoutReload = Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["f" /* supportsGoWithoutReloadUsingHash */])();
    var _props$getUserConfirm = props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === undefined ? __WEBPACK_IMPORTED_MODULE_5__DOMUtils__["c" /* getConfirmation */] : _props$getUserConfirm, _props$hashType = props.hashType, hashType = _props$hashType === undefined ? 'slash' : _props$hashType;
    var basename = props.basename ? Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["g" /* stripTrailingSlash */])(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */])(props.basename)) : '';
    var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath = _HashPathCoders$hashT.encodePath, decodePath = _HashPathCoders$hashT.decodePath;
    var getDOMLocation = function getDOMLocation() {
        var path = decodePath(getHashPath());
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!basename || Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["c" /* hasBasename */])(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
        if (basename)
            path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["e" /* stripBasename */])(path, basename);
        return Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path);
    };
    var transitionManager = Object(__WEBPACK_IMPORTED_MODULE_4__createTransitionManager__["a" /* default */])();
    var setState = function setState(nextState) {
        _extends(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
    };
    var forceNextPop = false;
    var ignorePath = null;
    var handleHashChange = function handleHashChange() {
        var path = getHashPath();
        var encodedPath = encodePath(path);
        if (path !== encodedPath) {
            // Ensure we always have a properly-encoded hash.
            replaceHashPath(encodedPath);
        }
        else {
            var location = getDOMLocation();
            var prevLocation = history.location;
            if (!forceNextPop && Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["b" /* locationsAreEqual */])(prevLocation, location))
                return; // A hashchange doesn't always == location change.
            if (ignorePath === Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location))
                return; // Ignore this change; we already setState in push/replace.
            ignorePath = null;
            handlePop(location);
        }
    };
    var handlePop = function handlePop(location) {
        if (forceNextPop) {
            forceNextPop = false;
            setState();
        }
        else {
            var action = 'POP';
            transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                if (ok) {
                    setState({ action: action, location: location });
                }
                else {
                    revertPop(location);
                }
            });
        }
    };
    var revertPop = function revertPop(fromLocation) {
        var toLocation = history.location;
        // TODO: We could probably make this more reliable by
        // keeping a list of paths we've seen in sessionStorage.
        // Instead, we just default to 0 for paths we don't know.
        var toIndex = allPaths.lastIndexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(toLocation));
        if (toIndex === -1)
            toIndex = 0;
        var fromIndex = allPaths.lastIndexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(fromLocation));
        if (fromIndex === -1)
            fromIndex = 0;
        var delta = toIndex - fromIndex;
        if (delta) {
            forceNextPop = true;
            go(delta);
        }
    };
    // Ensure the hash is encoded properly before doing anything else.
    var path = getHashPath();
    var encodedPath = encodePath(path);
    if (path !== encodedPath)
        replaceHashPath(encodedPath);
    var initialLocation = getDOMLocation();
    var allPaths = [Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(initialLocation)];
    // Public interface
    var createHref = function createHref(location) {
        return '#' + encodePath(basename + Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location));
    };
    var push = function push(path, state) {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Hash history cannot push state; it is ignored');
        var action = 'PUSH';
        var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            var path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location);
            var encodedPath = encodePath(basename + path);
            var hashChanged = getHashPath() !== encodedPath;
            if (hashChanged) {
                // We cannot tell if a hashchange was caused by a PUSH, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path;
                pushHashPath(encodedPath);
                var prevIndex = allPaths.lastIndexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(history.location));
                var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
                nextPaths.push(path);
                allPaths = nextPaths;
                setState({ action: action, location: location });
            }
            else {
                __WEBPACK_IMPORTED_MODULE_0_warning___default()(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');
                setState();
            }
        });
    };
    var replace = function replace(path, state) {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Hash history cannot replace state; it is ignored');
        var action = 'REPLACE';
        var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            var path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location);
            var encodedPath = encodePath(basename + path);
            var hashChanged = getHashPath() !== encodedPath;
            if (hashChanged) {
                // We cannot tell if a hashchange was caused by a REPLACE, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path;
                replaceHashPath(encodedPath);
            }
            var prevIndex = allPaths.indexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(history.location));
            if (prevIndex !== -1)
                allPaths[prevIndex] = path;
            setState({ action: action, location: location });
        });
    };
    var go = function go(n) {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');
        globalHistory.go(n);
    };
    var goBack = function goBack() {
        return go(-1);
    };
    var goForward = function goForward() {
        return go(1);
    };
    var listenerCount = 0;
    var checkDOMListeners = function checkDOMListeners(delta) {
        listenerCount += delta;
        if (listenerCount === 1) {
            Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["a" /* addEventListener */])(window, HashChangeEvent, handleHashChange);
        }
        else if (listenerCount === 0) {
            Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["e" /* removeEventListener */])(window, HashChangeEvent, handleHashChange);
        }
    };
    var isBlocked = false;
    var block = function block() {
        var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var unblock = transitionManager.setPrompt(prompt);
        if (!isBlocked) {
            checkDOMListeners(1);
            isBlocked = true;
        }
        return function () {
            if (isBlocked) {
                isBlocked = false;
                checkDOMListeners(-1);
            }
            return unblock();
        };
    };
    var listen = function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function () {
            checkDOMListeners(-1);
            unlisten();
        };
    };
    var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
    };
    return history;
};
/* unused harmony default export */ var _unused_webpack_default_export = (createHashHistory);


/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__PathUtils__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__createTransitionManager__ = __webpack_require__(26);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };




var clamp = function clamp(n, lowerBound, upperBound) {
    return Math.min(Math.max(n, lowerBound), upperBound);
};
/**
 * Creates a history object that stores locations in memory.
 */
var createMemoryHistory = function createMemoryHistory() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var getUserConfirmation = props.getUserConfirmation, _props$initialEntries = props.initialEntries, initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries, _props$initialIndex = props.initialIndex, initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex, _props$keyLength = props.keyLength, keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;
    var transitionManager = Object(__WEBPACK_IMPORTED_MODULE_3__createTransitionManager__["a" /* default */])();
    var setState = function setState(nextState) {
        _extends(history, nextState);
        history.length = history.entries.length;
        transitionManager.notifyListeners(history.location, history.action);
    };
    var createKey = function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
    };
    var index = clamp(initialIndex, 0, initialEntries.length - 1);
    var entries = initialEntries.map(function (entry) {
        return typeof entry === 'string' ? Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(entry, undefined, createKey()) : Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(entry, undefined, entry.key || createKey());
    });
    // Public interface
    var createHref = __WEBPACK_IMPORTED_MODULE_1__PathUtils__["b" /* createPath */];
    var push = function push(path, state) {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
        var action = 'PUSH';
        var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            var prevIndex = history.index;
            var nextIndex = prevIndex + 1;
            var nextEntries = history.entries.slice(0);
            if (nextEntries.length > nextIndex) {
                nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
            }
            else {
                nextEntries.push(location);
            }
            setState({
                action: action,
                location: location,
                index: nextIndex,
                entries: nextEntries
            });
        });
    };
    var replace = function replace(path, state) {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
        var action = 'REPLACE';
        var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (!ok)
                return;
            history.entries[history.index] = location;
            setState({ action: action, location: location });
        });
    };
    var go = function go(n) {
        var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
        var action = 'POP';
        var location = history.entries[nextIndex];
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (ok) {
                setState({
                    action: action,
                    location: location,
                    index: nextIndex
                });
            }
            else {
                // Mimic the behavior of DOM histories by
                // causing a render after a cancelled POP.
                setState();
            }
        });
    };
    var goBack = function goBack() {
        return go(-1);
    };
    var goForward = function goForward() {
        return go(1);
    };
    var canGo = function canGo(n) {
        var nextIndex = history.index + n;
        return nextIndex >= 0 && nextIndex < history.entries.length;
    };
    var block = function block() {
        var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return transitionManager.setPrompt(prompt);
    };
    var listen = function listen(listener) {
        return transitionManager.appendListener(listener);
    };
    var history = {
        length: entries.length,
        action: 'POP',
        location: entries[index],
        index: index,
        entries: entries,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        canGo: canGo,
        block: block,
        listen: listen
    };
    return history;
};
/* unused harmony default export */ var _unused_webpack_default_export = (createMemoryHistory);


/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_StaticRouter__ = __webpack_require__(75);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_StaticRouter__["a" /* default */]);


/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_history_PathUtils__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_history_PathUtils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_history_PathUtils__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Router__ = __webpack_require__(24);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) {
    if (keys.indexOf(i) >= 0)
        continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i))
        continue;
    target[i] = obj[i];
} return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _possibleConstructorReturn(self, call) { if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var normalizeLocation = function normalizeLocation(object) {
    var _object$pathname = object.pathname, pathname = _object$pathname === undefined ? '/' : _object$pathname, _object$search = object.search, search = _object$search === undefined ? '' : _object$search, _object$hash = object.hash, hash = _object$hash === undefined ? '' : _object$hash;
    return {
        pathname: pathname,
        search: search === '?' ? '' : search,
        hash: hash === '#' ? '' : hash
    };
};
var addBasename = function addBasename(basename, location) {
    if (!basename)
        return location;
    return _extends({}, location, {
        pathname: Object(__WEBPACK_IMPORTED_MODULE_4_history_PathUtils__["addLeadingSlash"])(basename) + location.pathname
    });
};
var stripBasename = function stripBasename(basename, location) {
    if (!basename)
        return location;
    var base = Object(__WEBPACK_IMPORTED_MODULE_4_history_PathUtils__["addLeadingSlash"])(basename);
    if (location.pathname.indexOf(base) !== 0)
        return location;
    return _extends({}, location, {
        pathname: location.pathname.substr(base.length)
    });
};
var createLocation = function createLocation(location) {
    return typeof location === 'string' ? Object(__WEBPACK_IMPORTED_MODULE_4_history_PathUtils__["parsePath"])(location) : normalizeLocation(location);
};
var createURL = function createURL(location) {
    return typeof location === 'string' ? location : Object(__WEBPACK_IMPORTED_MODULE_4_history_PathUtils__["createPath"])(location);
};
var staticHandler = function staticHandler(methodName) {
    return function () {
        __WEBPACK_IMPORTED_MODULE_1_invariant___default()(false, 'You cannot %s with <StaticRouter>', methodName);
    };
};
var noop = function noop() { };
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */
var StaticRouter = function (_React$Component) {
    _inherits(StaticRouter, _React$Component);
    function StaticRouter() {
        var _temp, _this, _ret;
        _classCallCheck(this, StaticRouter);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
            return Object(__WEBPACK_IMPORTED_MODULE_4_history_PathUtils__["addLeadingSlash"])(_this.props.basename + createURL(path));
        }, _this.handlePush = function (location) {
            var _this$props = _this.props, basename = _this$props.basename, context = _this$props.context;
            context.action = 'PUSH';
            context.location = addBasename(basename, createLocation(location));
            context.url = createURL(context.location);
        }, _this.handleReplace = function (location) {
            var _this$props2 = _this.props, basename = _this$props2.basename, context = _this$props2.context;
            context.action = 'REPLACE';
            context.location = addBasename(basename, createLocation(location));
            context.url = createURL(context.location);
        }, _this.handleListen = function () {
            return noop;
        }, _this.handleBlock = function () {
            return noop;
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    StaticRouter.prototype.getChildContext = function getChildContext() {
        return {
            router: {
                staticContext: this.props.context
            }
        };
    };
    StaticRouter.prototype.componentWillMount = function componentWillMount() {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, '<StaticRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { StaticRouter as Router }`.');
    };
    StaticRouter.prototype.render = function render() {
        var _props = this.props, basename = _props.basename, context = _props.context, location = _props.location, props = _objectWithoutProperties(_props, ['basename', 'context', 'location']);
        var history = {
            createHref: this.createHref,
            action: 'POP',
            location: stripBasename(basename, createLocation(location)),
            push: this.handlePush,
            replace: this.handleReplace,
            go: staticHandler('go'),
            goBack: staticHandler('goBack'),
            goForward: staticHandler('goForward'),
            listen: this.handleListen,
            block: this.handleBlock
        };
        return __WEBPACK_IMPORTED_MODULE_2_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__Router__["a" /* default */], _extends({}, props, { history: history }));
    };
    return StaticRouter;
}(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component);
StaticRouter.propTypes = {
    basename: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string,
    context: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
    location: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object])
};
StaticRouter.defaultProps = {
    basename: '',
    location: '/'
};
StaticRouter.childContextTypes = {
    router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (StaticRouter);


/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Switch__ = __webpack_require__(77);
// Written in this round about way for babel-transform-imports

/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Switch__["a" /* default */]);


/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__matchPath__ = __webpack_require__(25);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _possibleConstructorReturn(self, call) { if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * The public API for rendering the first <Route> that matches.
 */
var Switch = function (_React$Component) {
    _inherits(Switch, _React$Component);
    function Switch() {
        _classCallCheck(this, Switch);
        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    Switch.prototype.componentWillMount = function componentWillMount() {
        __WEBPACK_IMPORTED_MODULE_3_invariant___default()(this.context.router, 'You should not use <Switch> outside a <Router>');
    };
    Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        __WEBPACK_IMPORTED_MODULE_2_warning___default()(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
        __WEBPACK_IMPORTED_MODULE_2_warning___default()(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
    };
    Switch.prototype.render = function render() {
        var route = this.context.router.route;
        var children = this.props.children;
        var location = this.props.location || route.location;
        var match = void 0, child = void 0;
        __WEBPACK_IMPORTED_MODULE_0_react___default.a.Children.forEach(children, function (element) {
            if (!__WEBPACK_IMPORTED_MODULE_0_react___default.a.isValidElement(element))
                return;
            var _element$props = element.props, pathProp = _element$props.path, exact = _element$props.exact, strict = _element$props.strict, sensitive = _element$props.sensitive, from = _element$props.from;
            var path = pathProp || from;
            if (match == null) {
                child = element;
                match = path ? Object(__WEBPACK_IMPORTED_MODULE_4__matchPath__["a" /* default */])(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }) : route.match;
            }
        });
        return match ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(child, { location: location, computedMatch: match }) : null;
    };
    return Switch;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);
Switch.contextTypes = {
    router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
        route: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object.isRequired
    }).isRequired
};
Switch.propTypes = {
    children: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,
    location: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object
};
/* harmony default export */ __webpack_exports__["a"] = (Switch);


/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_matchPath__ = __webpack_require__(25);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_matchPath__["a" /* default */]);


/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_withRouter__ = __webpack_require__(80);
// Written in this round about way for babel-transform-imports

/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_withRouter__["a" /* default */]);


/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Route__ = __webpack_require__(39);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
} return target; };
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) {
    if (keys.indexOf(i) >= 0)
        continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i))
        continue;
    target[i] = obj[i];
} return target; }




/**
 * A public higher-order component to access the imperative API
 */
var withRouter = function withRouter(Component) {
    var C = function C(props) {
        var wrappedComponentRef = props.wrappedComponentRef, remainingProps = _objectWithoutProperties(props, ['wrappedComponentRef']);
        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__Route__["a" /* default */], { render: function render(routeComponentProps) {
                return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(Component, _extends({}, remainingProps, routeComponentProps, { ref: wrappedComponentRef }));
            } });
    };
    C.displayName = 'withRouter(' + (Component.displayName || Component.name) + ')';
    C.WrappedComponent = Component;
    C.propTypes = {
        wrappedComponentRef: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func
    };
    return __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics___default()(C, Component);
};
/* harmony default export */ __webpack_exports__["a"] = (withRouter);


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
(function (global, factory) {
     true ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
            (global.hoistNonReactStatics = factory());
}(this, (function () {
    'use strict';
    var REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
    };
    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
    };
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = getPrototypeOf && getPrototypeOf(Object);
    return function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== 'string') {
            if (objectPrototype) {
                var inheritedComponent = getPrototypeOf(sourceComponent);
                if (inheritedComponent && inheritedComponent !== objectPrototype) {
                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                }
            }
            var keys = getOwnPropertyNames(sourceComponent);
            if (getOwnPropertySymbols) {
                keys = keys.concat(getOwnPropertySymbols(sourceComponent));
            }
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                    var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                    try {
                        defineProperty(targetComponent, key, descriptor);
                    }
                    catch (e) { }
                }
            }
            return targetComponent;
        }
        return targetComponent;
    };
})));


/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Styled_Heading__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Table_of_contents__ = __webpack_require__(90);



class Header extends __WEBPACK_IMPORTED_MODULE_0_react__["Component"] {
    constructor() {
        super(...arguments);
        this.state = {
            is_table_of_contents_shown: false,
        };
        this.toggle_table_of_contents = () => this.setState({
            is_table_of_contents_shown: !this.state.is_table_of_contents_shown
        });
    }
    render() {
        return (__WEBPACK_IMPORTED_MODULE_0_react__["createElement"]("div", { onClick: this.toggle_table_of_contents },
            __WEBPACK_IMPORTED_MODULE_0_react__["createElement"](__WEBPACK_IMPORTED_MODULE_1__Styled_Heading__["a" /* Styled_Heading */], null, "Quests of Web Programming"),
            __WEBPACK_IMPORTED_MODULE_0_react__["createElement"](__WEBPACK_IMPORTED_MODULE_2__Table_of_contents__["a" /* Table_of_contents */], { is_open: this.state.is_table_of_contents_shown })));
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Header;



/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_components__ = __webpack_require__(27);

// z-index for being always on top of Table_of_contents
const Styled_Heading = __WEBPACK_IMPORTED_MODULE_0_styled_components__["b" /* default */].h1 `
  position: relative;
  top: 0px;
  z-index: 2;
  
  margin: 0px;
  padding: 0.8em;
  
  background-color: black;
  color: greenyellow;
  text-align: center;
`;
/* harmony export (immutable) */ __webpack_exports__["a"] = Styled_Heading;



/***/ }),
/* 84 */
/***/ (function(module, exports) {

module.exports = function (originalModule) {
    if (!originalModule.webpackPolyfill) {
        var module = Object.create(originalModule);
        // module.parent = undefined by default
        if (!module.children)
            module.children = [];
        Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function () {
                return module.l;
            }
        });
        Object.defineProperty(module, "id", {
            enumerable: true,
            get: function () {
                return module.i;
            }
        });
        Object.defineProperty(module, "exports", {
            enumerable: true,
        });
        module.webpackPolyfill = 1;
    }
    return module;
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isObject = __webpack_require__(86);
function isObjectObject(o) {
    return isObject(o) === true
        && Object.prototype.toString.call(o) === '[object Object]';
}
module.exports = function isPlainObject(o) {
    var ctor, prot;
    if (isObjectObject(o) === false)
        return false;
    // If has modified constructor
    ctor = o.constructor;
    if (typeof ctor !== 'function')
        return false;
    // If has modified prototype
    prot = ctor.prototype;
    if (isObjectObject(prot) === false)
        return false;
    // If constructor does not have an Object-specific method
    if (prot.hasOwnProperty('isPrototypeOf') === false) {
        return false;
    }
    // Most likely a plain Object
    return true;
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

module.exports = function isObject(val) {
    return val != null && typeof val === 'object' && Array.isArray(val) === false;
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

/*
 *          __        ___
 *    _____/ /___  __/ (_)____
 *   / ___/ __/ / / / / / ___/
 *  (__  ) /_/ /_/ / / (__  )
 * /____/\__/\__, /_/_/____/
 *          /____/
 *
 * light - weight css preprocessor @licence MIT
 */
(function (factory) {
     true ? (module['exports'] = factory(null)) :
        typeof define === 'function' && define['amd'] ? define(factory(null)) :
            (window['stylis'] = factory(null));
}(/** @param {*=} options */ function factory(options) {
    'use strict';
    /**
     * Notes
     *
     * The ['<method name>'] pattern is used to support closure compiler
     * the jsdoc signatures are also used to the same effect
     *
     * ----
     *
     * int + int + int === n4 [faster]
     *
     * vs
     *
     * int === n1 && int === n2 && int === n3
     *
     * ----
     *
     * switch (int) { case ints...} [faster]
     *
     * vs
     *
     * if (int == 1 && int === 2 ...)
     *
     * ----
     *
     * The (first*n1 + second*n2 + third*n3) format used in the property parser
     * is a simple way to hash the sequence of characters
     * taking into account the index they occur in
     * since any number of 3 character sequences could produce duplicates.
     *
     * On the other hand sequences that are directly tied to the index of the character
     * resolve a far more accurate measure, it's also faster
     * to evaluate one condition in a switch statement
     * than three in an if statement regardless of the added math.
     *
     * This allows the vendor prefixer to be both small and fast.
     */
    var nullptn = /^\0+/g; /* matches leading null characters */
    var formatptn = /[\0\r\f]/g; /* matches new line, null and formfeed characters */
    var colonptn = /: */g; /* splits animation rules */
    var cursorptn = /zoo|gra/; /* assert cursor varient */
    var transformptn = /([,: ])(transform)/g; /* vendor prefix transform, older webkit */
    var animationptn = /,+\s*(?![^(]*[)])/g; /* splits multiple shorthand notation animations */
    var propertiesptn = / +\s*(?![^(]*[)])/g; /* animation properties */
    var elementptn = / *[\0] */g; /* selector elements */
    var selectorptn = /,\r+?/g; /* splits selectors */
    var andptn = /([\t\r\n ])*\f?&/g; /* match & */
    var escapeptn = /:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g; /* matches :global(.*) */
    var invalidptn = /\W+/g; /* removes invalid characters from keyframes */
    var keyframeptn = /@(k\w+)\s*(\S*)\s*/; /* matches @keyframes $1 */
    var plcholdrptn = /::(place)/g; /* match ::placeholder varient */
    var readonlyptn = /:(read-only)/g; /* match :read-only varient */
    var beforeptn = /\s+(?=[{\];=:>])/g; /* matches \s before ] ; = : */
    var afterptn = /([[}=:>])\s+/g; /* matches \s after characters [ } = : */
    var tailptn = /(\{[^{]+?);(?=\})/g; /* matches tail semi-colons ;} */
    var whiteptn = /\s{2,}/g; /* matches repeating whitespace */
    var pseudoptn = /([^\(])(:+) */g; /* pseudo element */
    var writingptn = /[svh]\w+-[tblr]{2}/; /* match writing mode property values */
    var gradientptn = /([\w-]+t\()/g; /* match *gradient property */
    var supportsptn = /\(\s*(.*)\s*\)/g; /* match supports (groups) */
    var propertyptn = /([\s\S]*?);/g; /* match properties leading semicolon */
    var selfptn = /-self|flex-/g; /* match flex- and -self in align-self: flex-*; */
    var pseudofmt = /[^]*?(:[rp][el]a[\w-]+)[^]*/; /* extrats :readonly or :placholder from selector */
    var trimptn = /[ \t]+$/; /* match tail whitspace */
    var dimensionptn = /stretch|:\s*\w+\-(?:conte|avail)/; /* match max/min/fit-content, fill-available

    /* vendors */
    var webkit = '-webkit-';
    var moz = '-moz-';
    var ms = '-ms-';
    /* character codes */
    var SEMICOLON = 59; /* ; */
    var CLOSEBRACES = 125; /* } */
    var OPENBRACES = 123; /* { */
    var OPENPARENTHESES = 40; /* ( */
    var CLOSEPARENTHESES = 41; /* ) */
    var OPENBRACKET = 91; /* [ */
    var CLOSEBRACKET = 93; /* ] */
    var NEWLINE = 10; /* \n */
    var CARRIAGE = 13; /* \r */
    var TAB = 9; /* \t */
    var AT = 64; /* @ */
    var SPACE = 32; /*   */
    var AND = 38; /* & */
    var DASH = 45; /* - */
    var UNDERSCORE = 95; /* _ */
    var STAR = 42; /* * */
    var COMMA = 44; /* , */
    var COLON = 58; /* : */
    var SINGLEQUOTE = 39; /* ' */
    var DOUBLEQUOTE = 34; /* " */
    var FOWARDSLASH = 47; /* / */
    var GREATERTHAN = 62; /* > */
    var PLUS = 43; /* + */
    var TILDE = 126; /* ~ */
    var NULL = 0; /* \0 */
    var FORMFEED = 12; /* \f */
    var VERTICALTAB = 11; /* \v */
    /* special identifiers */
    var KEYFRAME = 107; /* k */
    var MEDIA = 109; /* m */
    var SUPPORTS = 115; /* s */
    var PLACEHOLDER = 112; /* p */
    var READONLY = 111; /* o */
    var IMPORT = 169; /* <at>i */
    var CHARSET = 163; /* <at>c */
    var DOCUMENT = 100; /* <at>d */
    var PAGE = 112; /* <at>p */
    var column = 1; /* current column */
    var line = 1; /* current line numebr */
    var pattern = 0; /* :pattern */
    var cascade = 1; /* #id h1 h2 vs h1#id h2#id  */
    var prefix = 1; /* vendor prefix */
    var escape = 1; /* escape :global() pattern */
    var compress = 0; /* compress output */
    var semicolon = 0; /* no/semicolon option */
    var preserve = 0; /* preserve empty selectors */
    /* empty reference */
    var array = [];
    /* plugins */
    var plugins = [];
    var plugged = 0;
    var should = null;
    /* plugin context */
    var POSTS = -2;
    var PREPS = -1;
    var UNKWN = 0;
    var PROPS = 1;
    var BLCKS = 2;
    var ATRUL = 3;
    /* plugin newline context */
    var unkwn = 0;
    /* keyframe animation */
    var keyed = 1;
    var key = '';
    /* selector namespace */
    var nscopealt = '';
    var nscope = '';
    /**
     * Compile
     *
     * @param {Array<string>} parent
     * @param {Array<string>} current
     * @param {string} body
     * @param {number} id
     * @param {number} depth
     * @return {string}
     */
    function compile(parent, current, body, id, depth) {
        var bracket = 0; /* brackets [] */
        var comment = 0; /* comments /* // or /* */
        var parentheses = 0; /* functions () */
        var quote = 0; /* quotes '', "" */
        var first = 0; /* first character code */
        var second = 0; /* second character code */
        var code = 0; /* current character code */
        var tail = 0; /* previous character code */
        var trail = 0; /* character before previous code */
        var peak = 0; /* previous non-whitespace code */
        var counter = 0; /* count sequence termination */
        var context = 0; /* track current context */
        var atrule = 0; /* track @at-rule context */
        var pseudo = 0; /* track pseudo token index */
        var caret = 0; /* current character index */
        var format = 0; /* control character formating context */
        var insert = 0; /* auto semicolon insertion */
        var invert = 0; /* inverted selector pattern */
        var length = 0; /* generic length address */
        var eof = body.length; /* end of file(length) */
        var eol = eof - 1; /* end of file(characters) */
        var char = ''; /* current character */
        var chars = ''; /* current buffer of characters */
        var child = ''; /* next buffer of characters */
        var out = ''; /* compiled body */
        var children = ''; /* compiled children */
        var flat = ''; /* compiled leafs */
        var selector; /* generic selector address */
        var result; /* generic address */
        // ...build body
        while (caret < eof) {
            code = body.charCodeAt(caret);
            // eof varient
            if (caret === eol) {
                // last character + noop context, add synthetic padding for noop context to terminate
                if (comment + quote + parentheses + bracket !== 0) {
                    if (comment !== 0) {
                        code = comment === FOWARDSLASH ? NEWLINE : FOWARDSLASH;
                    }
                    quote = parentheses = bracket = 0;
                    eof++;
                    eol++;
                }
            }
            if (comment + quote + parentheses + bracket === 0) {
                // eof varient
                if (caret === eol) {
                    if (format > 0) {
                        chars = chars.replace(formatptn, '');
                    }
                    if (chars.trim().length > 0) {
                        switch (code) {
                            case SPACE:
                            case TAB:
                            case SEMICOLON:
                            case CARRIAGE:
                            case NEWLINE: {
                                break;
                            }
                            default: {
                                chars += body.charAt(caret);
                            }
                        }
                        code = SEMICOLON;
                    }
                }
                // auto semicolon insertion
                if (insert === 1) {
                    switch (code) {
                        // false flags
                        case OPENBRACES:
                        case CLOSEBRACES:
                        case SEMICOLON:
                        case DOUBLEQUOTE:
                        case SINGLEQUOTE:
                        case OPENPARENTHESES:
                        case CLOSEPARENTHESES:
                        case COMMA: {
                            insert = 0;
                        }
                        // ignore
                        case TAB:
                        case CARRIAGE:
                        case NEWLINE:
                        case SPACE: {
                            break;
                        }
                        // valid
                        default: {
                            insert = 0;
                            length = caret;
                            first = code;
                            caret--;
                            code = SEMICOLON;
                            while (length < eof) {
                                switch (body.charCodeAt(length++)) {
                                    case NEWLINE:
                                    case CARRIAGE:
                                    case SEMICOLON: {
                                        ++caret;
                                        code = first;
                                        length = eof;
                                        break;
                                    }
                                    case COLON: {
                                        if (format > 0) {
                                            ++caret;
                                            code = first;
                                        }
                                    }
                                    case OPENBRACES: {
                                        length = eof;
                                    }
                                }
                            }
                        }
                    }
                }
                // token varient
                switch (code) {
                    case OPENBRACES: {
                        chars = chars.trim();
                        first = chars.charCodeAt(0);
                        counter = 1;
                        length = ++caret;
                        while (caret < eof) {
                            code = body.charCodeAt(caret);
                            switch (code) {
                                case OPENBRACES: {
                                    counter++;
                                    break;
                                }
                                case CLOSEBRACES: {
                                    counter--;
                                    break;
                                }
                            }
                            if (counter === 0) {
                                break;
                            }
                            caret++;
                        }
                        child = body.substring(length, caret);
                        if (first === NULL) {
                            first = (chars = chars.replace(nullptn, '').trim()).charCodeAt(0);
                        }
                        switch (first) {
                            // @at-rule
                            case AT: {
                                if (format > 0) {
                                    chars = chars.replace(formatptn, '');
                                }
                                second = chars.charCodeAt(1);
                                switch (second) {
                                    case DOCUMENT:
                                    case MEDIA:
                                    case SUPPORTS:
                                    case DASH: {
                                        selector = current;
                                        break;
                                    }
                                    default: {
                                        selector = array;
                                    }
                                }
                                child = compile(current, selector, child, second, depth + 1);
                                length = child.length;
                                // preserve empty @at-rule
                                if (preserve > 0 && length === 0) {
                                    length = chars.length;
                                }
                                // execute plugins, @at-rule context
                                if (plugged > 0) {
                                    selector = select(array, chars, invert);
                                    result = proxy(ATRUL, child, selector, current, line, column, length, second, depth, id);
                                    chars = selector.join('');
                                    if (result !== void 0) {
                                        if ((length = (child = result.trim()).length) === 0) {
                                            second = 0;
                                            child = '';
                                        }
                                    }
                                }
                                if (length > 0) {
                                    switch (second) {
                                        case SUPPORTS: {
                                            chars = chars.replace(supportsptn, supports);
                                        }
                                        case DOCUMENT:
                                        case MEDIA:
                                        case DASH: {
                                            child = chars + '{' + child + '}';
                                            break;
                                        }
                                        case KEYFRAME: {
                                            chars = chars.replace(keyframeptn, '$1 $2' + (keyed > 0 ? key : ''));
                                            child = chars + '{' + child + '}';
                                            if (prefix === 1 || (prefix === 2 && vendor('@' + child, 3))) {
                                                child = '@' + webkit + child + '@' + child;
                                            }
                                            else {
                                                child = '@' + child;
                                            }
                                            break;
                                        }
                                        default: {
                                            child = chars + child;
                                            if (id === PAGE) {
                                                child = (out += child, '');
                                            }
                                        }
                                    }
                                }
                                else {
                                    child = '';
                                }
                                break;
                            }
                            // selector
                            default: {
                                child = compile(current, select(current, chars, invert), child, id, depth + 1);
                            }
                        }
                        children += child;
                        // reset
                        context = 0;
                        insert = 0;
                        pseudo = 0;
                        format = 0;
                        invert = 0;
                        atrule = 0;
                        chars = '';
                        child = '';
                        code = body.charCodeAt(++caret);
                        break;
                    }
                    case CLOSEBRACES:
                    case SEMICOLON: {
                        chars = (format > 0 ? chars.replace(formatptn, '') : chars).trim();
                        if ((length = chars.length) > 1) {
                            // monkey-patch missing colon
                            if (pseudo === 0) {
                                first = chars.charCodeAt(0);
                                // first character is a letter or dash, buffer has a space character
                                if ((first === DASH || first > 96 && first < 123)) {
                                    length = (chars = chars.replace(' ', ':')).length;
                                }
                            }
                            // execute plugins, property context
                            if (plugged > 0) {
                                if ((result = proxy(PROPS, chars, current, parent, line, column, out.length, id, depth, id)) !== void 0) {
                                    if ((length = (chars = result.trim()).length) === 0) {
                                        chars = '\0\0';
                                    }
                                }
                            }
                            first = chars.charCodeAt(0);
                            second = chars.charCodeAt(1);
                            switch (first + second) {
                                case NULL: {
                                    break;
                                }
                                case IMPORT:
                                case CHARSET: {
                                    flat += chars + body.charAt(caret);
                                    break;
                                }
                                default: {
                                    if (chars.charCodeAt(length - 1) === COLON)
                                        break;
                                    out += property(chars, first, second, chars.charCodeAt(2));
                                }
                            }
                        }
                        // reset
                        context = 0;
                        insert = 0;
                        pseudo = 0;
                        format = 0;
                        invert = 0;
                        chars = '';
                        code = body.charCodeAt(++caret);
                        break;
                    }
                }
            }
            // parse characters
            switch (code) {
                case CARRIAGE:
                case NEWLINE: {
                    // auto insert semicolon
                    if (comment + quote + parentheses + bracket + semicolon === 0) {
                        // valid non-whitespace characters that
                        // may precede a newline
                        switch (peak) {
                            case CLOSEPARENTHESES:
                            case SINGLEQUOTE:
                            case DOUBLEQUOTE:
                            case AT:
                            case TILDE:
                            case GREATERTHAN:
                            case STAR:
                            case PLUS:
                            case FOWARDSLASH:
                            case DASH:
                            case COLON:
                            case COMMA:
                            case SEMICOLON:
                            case OPENBRACES:
                            case CLOSEBRACES: {
                                break;
                            }
                            default: {
                                // current buffer has a colon
                                if (pseudo > 0) {
                                    insert = 1;
                                }
                            }
                        }
                    }
                    // terminate line comment
                    if (comment === FOWARDSLASH) {
                        comment = 0;
                    }
                    else if (cascade + context === 0) {
                        format = 1;
                        chars += '\0';
                    }
                    // execute plugins, newline context
                    if (plugged * unkwn > 0) {
                        proxy(UNKWN, chars, current, parent, line, column, out.length, id, depth, id);
                    }
                    // next line, reset column position
                    column = 1;
                    line++;
                    break;
                }
                case SEMICOLON:
                case CLOSEBRACES: {
                    if (comment + quote + parentheses + bracket === 0) {
                        column++;
                        break;
                    }
                }
                default: {
                    // increment column position
                    column++;
                    // current character
                    char = body.charAt(caret);
                    // remove comments, escape functions, strings, attributes and prepare selectors
                    switch (code) {
                        case TAB:
                        case SPACE: {
                            if (quote + bracket + comment === 0) {
                                switch (tail) {
                                    case COMMA:
                                    case COLON:
                                    case TAB:
                                    case SPACE: {
                                        char = '';
                                        break;
                                    }
                                    default: {
                                        if (code !== SPACE) {
                                            char = ' ';
                                        }
                                    }
                                }
                            }
                            break;
                        }
                        // escape breaking control characters
                        case NULL: {
                            char = '\\0';
                            break;
                        }
                        case FORMFEED: {
                            char = '\\f';
                            break;
                        }
                        case VERTICALTAB: {
                            char = '\\v';
                            break;
                        }
                        // &
                        case AND: {
                            // inverted selector pattern i.e html &
                            if (quote + comment + bracket === 0 && cascade > 0) {
                                invert = 1;
                                format = 1;
                                char = '\f' + char;
                            }
                            break;
                        }
                        // ::p<l>aceholder, l
                        // :read-on<l>y, l
                        case 108: {
                            if (quote + comment + bracket + pattern === 0 && pseudo > 0) {
                                switch (caret - pseudo) {
                                    // ::placeholder
                                    case 2: {
                                        if (tail === PLACEHOLDER && body.charCodeAt(caret - 3) === COLON) {
                                            pattern = tail;
                                        }
                                    }
                                    // :read-only
                                    case 8: {
                                        if (trail === READONLY) {
                                            pattern = trail;
                                        }
                                    }
                                }
                            }
                            break;
                        }
                        // :<pattern>
                        case COLON: {
                            if (quote + comment + bracket === 0) {
                                pseudo = caret;
                            }
                            break;
                        }
                        // selectors
                        case COMMA: {
                            if (comment + parentheses + quote + bracket === 0) {
                                format = 1;
                                char += '\r';
                            }
                            break;
                        }
                        // quotes
                        case DOUBLEQUOTE: {
                            if (comment === 0) {
                                quote = quote === code ? 0 : (quote === 0 ? code : quote);
                            }
                            break;
                        }
                        case SINGLEQUOTE: {
                            if (comment === 0) {
                                quote = quote === code ? 0 : (quote === 0 ? code : quote);
                            }
                            break;
                        }
                        // attributes
                        case OPENBRACKET: {
                            if (quote + comment + parentheses === 0) {
                                bracket++;
                            }
                            break;
                        }
                        case CLOSEBRACKET: {
                            if (quote + comment + parentheses === 0) {
                                bracket--;
                            }
                            break;
                        }
                        // functions
                        case CLOSEPARENTHESES: {
                            if (quote + comment + bracket === 0) {
                                parentheses--;
                            }
                            break;
                        }
                        case OPENPARENTHESES: {
                            if (quote + comment + bracket === 0) {
                                if (context === 0) {
                                    switch (tail * 2 + trail * 3) {
                                        // :matches
                                        case 533: {
                                            break;
                                        }
                                        // :global, :not, :nth-child etc...
                                        default: {
                                            counter = 0;
                                            context = 1;
                                        }
                                    }
                                }
                                parentheses++;
                            }
                            break;
                        }
                        case AT: {
                            if (comment + parentheses + quote + bracket + pseudo + atrule === 0) {
                                atrule = 1;
                            }
                            break;
                        }
                        // block/line comments
                        case STAR:
                        case FOWARDSLASH: {
                            if (quote + bracket + parentheses > 0) {
                                break;
                            }
                            switch (comment) {
                                // initialize line/block comment context
                                case 0: {
                                    switch (code * 2 + body.charCodeAt(caret + 1) * 3) {
                                        // //
                                        case 235: {
                                            comment = FOWARDSLASH;
                                            break;
                                        }
                                        // /*
                                        case 220: {
                                            length = caret;
                                            comment = STAR;
                                            break;
                                        }
                                    }
                                    break;
                                }
                                // end block comment context
                                case STAR: {
                                    if (code === FOWARDSLASH && tail === STAR) {
                                        // /*<!> ... */, !
                                        if (body.charCodeAt(length + 2) === 33) {
                                            out += body.substring(length, caret + 1);
                                        }
                                        char = '';
                                        comment = 0;
                                    }
                                }
                            }
                        }
                    }
                    // ignore comment blocks
                    if (comment === 0) {
                        // aggressive isolation mode, divide each individual selector
                        // including selectors in :not function but excluding selectors in :global function
                        if (cascade + quote + bracket + atrule === 0 && id !== KEYFRAME && code !== SEMICOLON) {
                            switch (code) {
                                case COMMA:
                                case TILDE:
                                case GREATERTHAN:
                                case PLUS:
                                case CLOSEPARENTHESES:
                                case OPENPARENTHESES: {
                                    if (context === 0) {
                                        // outside of an isolated context i.e nth-child(<...>)
                                        switch (tail) {
                                            case TAB:
                                            case SPACE:
                                            case NEWLINE:
                                            case CARRIAGE: {
                                                char = char + '\0';
                                                break;
                                            }
                                            default: {
                                                char = '\0' + char + (code === COMMA ? '' : '\0');
                                            }
                                        }
                                        format = 1;
                                    }
                                    else {
                                        // within an isolated context, sleep untill it's terminated
                                        switch (code) {
                                            case OPENPARENTHESES: {
                                                context = ++counter;
                                                break;
                                            }
                                            case CLOSEPARENTHESES: {
                                                if ((context = --counter) === 0) {
                                                    format = 1;
                                                    char += '\0';
                                                }
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                case TAB:
                                case SPACE: {
                                    switch (tail) {
                                        case NULL:
                                        case OPENBRACES:
                                        case CLOSEBRACES:
                                        case SEMICOLON:
                                        case COMMA:
                                        case FORMFEED:
                                        case TAB:
                                        case SPACE:
                                        case NEWLINE:
                                        case CARRIAGE: {
                                            break;
                                        }
                                        default: {
                                            // ignore in isolated contexts
                                            if (context === 0) {
                                                format = 1;
                                                char += '\0';
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        // concat buffer of characters
                        chars += char;
                        // previous non-whitespace character code
                        if (code !== SPACE && code !== TAB) {
                            peak = code;
                        }
                    }
                }
            }
            // tail character codes
            trail = tail;
            tail = code;
            // visit every character
            caret++;
        }
        length = out.length;
        // preserve empty selector
        if (preserve > 0) {
            if (length === 0 && children.length === 0 && (current[0].length === 0) === false) {
                if (id !== MEDIA || (current.length === 1 && (cascade > 0 ? nscopealt : nscope) === current[0])) {
                    length = current.join(',').length + 2;
                }
            }
        }
        if (length > 0) {
            // cascade isolation mode?
            selector = cascade === 0 && id !== KEYFRAME ? isolate(current) : current;
            // execute plugins, block context
            if (plugged > 0) {
                result = proxy(BLCKS, out, selector, parent, line, column, length, id, depth, id);
                if (result !== void 0 && (out = result).length === 0) {
                    return flat + out + children;
                }
            }
            out = selector.join(',') + '{' + out + '}';
            if (prefix * pattern !== 0) {
                if (prefix === 2 && !vendor(out, 2))
                    pattern = 0;
                switch (pattern) {
                    // ::read-only
                    case READONLY: {
                        out = out.replace(readonlyptn, ':' + moz + '$1') + out;
                        break;
                    }
                    // ::placeholder
                    case PLACEHOLDER: {
                        out = (out.replace(plcholdrptn, '::' + webkit + 'input-$1') +
                            out.replace(plcholdrptn, '::' + moz + '$1') +
                            out.replace(plcholdrptn, ':' + ms + 'input-$1') + out);
                        break;
                    }
                }
                pattern = 0;
            }
        }
        return flat + out + children;
    }
    /**
     * Select
     *
     * @param {Array<string>} parent
     * @param {string} current
     * @param {number} invert
     * @return {Array<string>}
     */
    function select(parent, current, invert) {
        var selectors = current.trim().split(selectorptn);
        var out = selectors;
        var length = selectors.length;
        var l = parent.length;
        switch (l) {
            // 0-1 parent selectors
            case 0:
            case 1: {
                for (var i = 0, selector = l === 0 ? '' : parent[0] + ' '; i < length; ++i) {
                    out[i] = scope(selector, out[i], invert, l).trim();
                }
                break;
            }
            // >2 parent selectors, nested
            default: {
                for (var i = 0, j = 0, out = []; i < length; ++i) {
                    for (var k = 0; k < l; ++k) {
                        out[j++] = scope(parent[k] + ' ', selectors[i], invert, l).trim();
                    }
                }
            }
        }
        return out;
    }
    /**
     * Scope
     *
     * @param {string} parent
     * @param {string} current
     * @param {number} invert
     * @param {number} level
     * @return {string}
     */
    function scope(parent, current, invert, level) {
        var selector = current;
        var code = selector.charCodeAt(0);
        // trim leading whitespace
        if (code < 33) {
            code = (selector = selector.trim()).charCodeAt(0);
        }
        switch (code) {
            // &
            case AND: {
                switch (cascade + level) {
                    case 0:
                    case 1: {
                        if (parent.trim().length === 0) {
                            break;
                        }
                    }
                    default: {
                        return selector.replace(andptn, '$1' + parent.trim());
                    }
                }
                break;
            }
            // :
            case COLON: {
                switch (selector.charCodeAt(1)) {
                    // g in :global
                    case 103: {
                        if (escape > 0 && cascade > 0) {
                            return selector.replace(escapeptn, '$1').replace(andptn, '$1' + nscope);
                        }
                        break;
                    }
                    default: {
                        // :hover
                        return parent.trim() + selector.replace(andptn, '$1' + parent.trim());
                    }
                }
            }
            default: {
                // html &
                if (invert * cascade > 0 && selector.indexOf('\f') > 0) {
                    return selector.replace(andptn, (parent.charCodeAt(0) === COLON ? '' : '$1') + parent.trim());
                }
            }
        }
        return parent + selector;
    }
    /**
     * Property
     *
     * @param {string} input
     * @param {number} first
     * @param {number} second
     * @param {number} third
     * @return {string}
     */
    function property(input, first, second, third) {
        var index = 0;
        var out = input + ';';
        var hash = (first * 2) + (second * 3) + (third * 4);
        var cache;
        // animation: a, n, i characters
        if (hash === 944) {
            return animation(out);
        }
        else if (prefix === 0 || (prefix === 2 && !vendor(out, 1))) {
            return out;
        }
        // vendor prefix
        switch (hash) {
            // text-decoration/text-size-adjust/text-shadow/text-align/text-transform: t, e, x
            case 1015: {
                // text-shadow/text-align/text-transform, a
                return out.charCodeAt(10) === 97 ? webkit + out + out : out;
            }
            // filter/fill f, i, l
            case 951: {
                // filter, t
                return out.charCodeAt(3) === 116 ? webkit + out + out : out;
            }
            // color/column, c, o, l
            case 963: {
                // column, n
                return out.charCodeAt(5) === 110 ? webkit + out + out : out;
            }
            // box-decoration-break, b, o, x
            case 1009: {
                if (out.charCodeAt(4) !== 100) {
                    break;
                }
            }
            // mask, m, a, s
            // clip-path, c, l, i
            case 969:
            case 942: {
                return webkit + out + out;
            }
            // appearance: a, p, p
            case 978: {
                return webkit + out + moz + out + out;
            }
            // hyphens: h, y, p
            // user-select: u, s, e
            case 1019:
            case 983: {
                return webkit + out + moz + out + ms + out + out;
            }
            // background/backface-visibility, b, a, c
            case 883: {
                // backface-visibility, -
                return out.charCodeAt(8) === DASH ? webkit + out + out : out;
            }
            // flex: f, l, e
            case 932: {
                if (out.charCodeAt(4) === DASH) {
                    switch (out.charCodeAt(5)) {
                        // flex-grow, g
                        case 103: {
                            return webkit + 'box-' + out.replace('-grow', '') + webkit + out + ms + out.replace('grow', 'positive') + out;
                        }
                        // flex-shrink, s
                        case 115: {
                            return webkit + out + ms + out.replace('shrink', 'negative') + out;
                        }
                        // flex-basis, b
                        case 98: {
                            return webkit + out + ms + out.replace('basis', 'preferred-size') + out;
                        }
                    }
                }
                return webkit + out + ms + out + out;
            }
            // order: o, r, d
            case 964: {
                return webkit + out + ms + 'flex' + '-' + out + out;
            }
            // justify-items/justify-content, j, u, s
            case 1023: {
                // justify-content, c
                if (out.charCodeAt(8) !== 99) {
                    break;
                }
                cache = out.substring(out.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
                return webkit + 'box-pack' + cache + webkit + out + ms + 'flex-pack' + cache + out;
            }
            // cursor, c, u, r
            case 1005: {
                return cursorptn.test(out) ? out.replace(colonptn, ':' + webkit) + out.replace(colonptn, ':' + moz) + out : out;
            }
            // writing-mode, w, r, i
            case 1000: {
                cache = out.substring(13).trim();
                index = cache.indexOf('-') + 1;
                switch (cache.charCodeAt(0) + cache.charCodeAt(index)) {
                    // vertical-lr
                    case 226: {
                        cache = out.replace(writingptn, 'tb');
                        break;
                    }
                    // vertical-rl
                    case 232: {
                        cache = out.replace(writingptn, 'tb-rl');
                        break;
                    }
                    // horizontal-tb
                    case 220: {
                        cache = out.replace(writingptn, 'lr');
                        break;
                    }
                    default: {
                        return out;
                    }
                }
                return webkit + out + ms + cache + out;
            }
            // position: sticky
            case 1017: {
                if (out.indexOf('sticky', 9) === -1) {
                    return out;
                }
            }
            // display(flex/inline-flex/inline-box): d, i, s
            case 975: {
                index = (out = input).length - 10;
                cache = (out.charCodeAt(index) === 33 ? out.substring(0, index) : out).substring(input.indexOf(':', 7) + 1).trim();
                switch (hash = cache.charCodeAt(0) + (cache.charCodeAt(7) | 0)) {
                    // inline-
                    case 203: {
                        // inline-box
                        if (cache.charCodeAt(8) < 111) {
                            break;
                        }
                    }
                    // inline-box/sticky
                    case 115: {
                        out = out.replace(cache, webkit + cache) + ';' + out;
                        break;
                    }
                    // inline-flex
                    // flex
                    case 207:
                    case 102: {
                        out = (out.replace(cache, webkit + (hash > 102 ? 'inline-' : '') + 'box') + ';' +
                            out.replace(cache, webkit + cache) + ';' +
                            out.replace(cache, ms + cache + 'box') + ';' +
                            out);
                    }
                }
                return out + ';';
            }
            // align-items, align-center, align-self: a, l, i, -
            case 938: {
                if (out.charCodeAt(5) === DASH) {
                    switch (out.charCodeAt(6)) {
                        // align-items, i
                        case 105: {
                            cache = out.replace('-items', '');
                            return webkit + out + webkit + 'box-' + cache + ms + 'flex-' + cache + out;
                        }
                        // align-self, s
                        case 115: {
                            return webkit + out + ms + 'flex-item-' + out.replace(selfptn, '') + out;
                        }
                        // align-content
                        default: {
                            return webkit + out + ms + 'flex-line-pack' + out.replace('align-content', '').replace(selfptn, '') + out;
                        }
                    }
                }
                break;
            }
            // min/max
            case 973:
            case 989: {
                // min-/max- height/width/block-size/inline-size
                if (out.charCodeAt(3) !== DASH || out.charCodeAt(4) === 122) {
                    break;
                }
            }
            // height/width: min-content / width: max-content
            case 931:
            case 953: {
                if (dimensionptn.test(input) === true) {
                    // stretch
                    if ((cache = input.substring(input.indexOf(':') + 1)).charCodeAt(0) === 115)
                        return property(input.replace('stretch', 'fill-available'), first, second, third).replace(':fill-available', ':stretch');
                    else
                        return out.replace(cache, webkit + cache) + out.replace(cache, moz + cache.replace('fill-', '')) + out;
                }
                break;
            }
            // transform, transition: t, r, a
            case 962: {
                out = webkit + out + (out.charCodeAt(5) === 102 ? ms + out : '') + out;
                // transitions
                if (second + third === 211 && out.charCodeAt(13) === 105 && out.indexOf('transform', 10) > 0) {
                    return out.substring(0, out.indexOf(';', 27) + 1).replace(transformptn, '$1' + webkit + '$2') + out;
                }
                break;
            }
        }
        return out;
    }
    /**
     * Vendor
     *
     * @param {string} content
     * @param {number} context
     * @return {boolean}
     */
    function vendor(content, context) {
        var index = content.indexOf(context === 1 ? ':' : '{');
        var key = content.substring(0, context !== 3 ? index : 10);
        var value = content.substring(index + 1, content.length - 1);
        return should(context !== 2 ? key : key.replace(pseudofmt, '$1'), value, context);
    }
    /**
     * Supports
     *
     * @param {string} match
     * @param {string} group
     * @return {string}
     */
    function supports(match, group) {
        var out = property(group, group.charCodeAt(0), group.charCodeAt(1), group.charCodeAt(2));
        return out !== group + ';' ? out.replace(propertyptn, ' or ($1)').substring(4) : '(' + group + ')';
    }
    /**
     * Animation
     *
     * @param {string} input
     * @return {string}
     */
    function animation(input) {
        var length = input.length;
        var index = input.indexOf(':', 9) + 1;
        var declare = input.substring(0, index).trim();
        var out = input.substring(index, length - 1).trim();
        switch (input.charCodeAt(9) * keyed) {
            case 0: {
                break;
            }
            // animation-*, -
            case DASH: {
                // animation-name, n
                if (input.charCodeAt(10) !== 110) {
                    break;
                }
            }
            // animation/animation-name
            default: {
                // split in case of multiple animations
                var list = out.split((out = '', animationptn));
                for (var i = 0, index = 0, length = list.length; i < length; index = 0, ++i) {
                    var value = list[i];
                    var items = value.split(propertiesptn);
                    while (value = items[index]) {
                        var peak = value.charCodeAt(0);
                        if (keyed === 1 && (
                        // letters
                        (peak > AT && peak < 90) || (peak > 96 && peak < 123) || peak === UNDERSCORE ||
                            // dash but not in sequence i.e --
                            (peak === DASH && value.charCodeAt(1) !== DASH))) {
                            // not a number/function
                            switch (isNaN(parseFloat(value)) + (value.indexOf('(') !== -1)) {
                                case 1: {
                                    switch (value) {
                                        // not a valid reserved keyword
                                        case 'infinite':
                                        case 'alternate':
                                        case 'backwards':
                                        case 'running':
                                        case 'normal':
                                        case 'forwards':
                                        case 'both':
                                        case 'none':
                                        case 'linear':
                                        case 'ease':
                                        case 'ease-in':
                                        case 'ease-out':
                                        case 'ease-in-out':
                                        case 'paused':
                                        case 'reverse':
                                        case 'alternate-reverse':
                                        case 'inherit':
                                        case 'initial':
                                        case 'unset':
                                        case 'step-start':
                                        case 'step-end': {
                                            break;
                                        }
                                        default: {
                                            value += key;
                                        }
                                    }
                                }
                            }
                        }
                        items[index++] = value;
                    }
                    out += (i === 0 ? '' : ',') + items.join(' ');
                }
            }
        }
        out = declare + out + ';';
        if (prefix === 1 || (prefix === 2 && vendor(out, 1)))
            return webkit + out + out;
        return out;
    }
    /**
     * Isolate
     *
     * @param {Array<string>} current
     */
    function isolate(current) {
        for (var i = 0, length = current.length, selector = Array(length), padding, element; i < length; ++i) {
            // split individual elements in a selector i.e h1 h2 === [h1, h2]
            var elements = current[i].split(elementptn);
            var out = '';
            for (var j = 0, size = 0, tail = 0, code = 0, l = elements.length; j < l; ++j) {
                // empty element
                if ((size = (element = elements[j]).length) === 0 && l > 1) {
                    continue;
                }
                tail = out.charCodeAt(out.length - 1);
                code = element.charCodeAt(0);
                padding = '';
                if (j !== 0) {
                    // determine if we need padding
                    switch (tail) {
                        case STAR:
                        case TILDE:
                        case GREATERTHAN:
                        case PLUS:
                        case SPACE:
                        case OPENPARENTHESES: {
                            break;
                        }
                        default: {
                            padding = ' ';
                        }
                    }
                }
                switch (code) {
                    case AND: {
                        element = padding + nscopealt;
                    }
                    case TILDE:
                    case GREATERTHAN:
                    case PLUS:
                    case SPACE:
                    case CLOSEPARENTHESES:
                    case OPENPARENTHESES: {
                        break;
                    }
                    case OPENBRACKET: {
                        element = padding + element + nscopealt;
                        break;
                    }
                    case COLON: {
                        switch (element.charCodeAt(1) * 2 + element.charCodeAt(2) * 3) {
                            // :global
                            case 530: {
                                if (escape > 0) {
                                    element = padding + element.substring(8, size - 1);
                                    break;
                                }
                            }
                            // :hover, :nth-child(), ...
                            default: {
                                if (j < 1 || elements[j - 1].length < 1) {
                                    element = padding + nscopealt + element;
                                }
                            }
                        }
                        break;
                    }
                    case COMMA: {
                        padding = '';
                    }
                    default: {
                        if (size > 1 && element.indexOf(':') > 0) {
                            element = padding + element.replace(pseudoptn, '$1' + nscopealt + '$2');
                        }
                        else {
                            element = padding + element + nscopealt;
                        }
                    }
                }
                out += element;
            }
            selector[i] = out.replace(formatptn, '').trim();
        }
        return selector;
    }
    /**
     * Proxy
     *
     * @param {number} context
     * @param {string} content
     * @param {Array<string>} selectors
     * @param {Array<string>} parents
     * @param {number} line
     * @param {number} column
     * @param {number} length
     * @param {number} id
     * @param {number} depth
     * @param {number} at
     * @return {(string|void|*)}
     */
    function proxy(context, content, selectors, parents, line, column, length, id, depth, at) {
        for (var i = 0, out = content, next; i < plugged; ++i) {
            switch (next = plugins[i].call(stylis, context, out, selectors, parents, line, column, length, id, depth, at)) {
                case void 0:
                case false:
                case true:
                case null: {
                    break;
                }
                default: {
                    out = next;
                }
            }
        }
        switch (out) {
            case void 0:
            case false:
            case true:
            case null:
            case content: {
                break;
            }
            default: {
                return out;
            }
        }
    }
    /**
     * Minify
     *
     * @param {(string|*)} output
     * @return {string}
     */
    function minify(output) {
        return output
            .replace(formatptn, '')
            .replace(beforeptn, '')
            .replace(afterptn, '$1')
            .replace(tailptn, '$1')
            .replace(whiteptn, ' ');
    }
    /**
     * Use
     *
     * @param {(Array<function(...?)>|function(...?)|number|void)?} plugin
     */
    function use(plugin) {
        switch (plugin) {
            case void 0:
            case null: {
                plugged = plugins.length = 0;
                break;
            }
            default: {
                switch (plugin.constructor) {
                    case Array: {
                        for (var i = 0, length = plugin.length; i < length; ++i) {
                            use(plugin[i]);
                        }
                        break;
                    }
                    case Function: {
                        plugins[plugged++] = plugin;
                        break;
                    }
                    case Boolean: {
                        unkwn = !!plugin | 0;
                    }
                }
            }
        }
        return use;
    }
    /**
     * Set
     *
     * @param {*} options
     */
    function set(options) {
        for (var name in options) {
            var value = options[name];
            switch (name) {
                case 'keyframe':
                    keyed = value | 0;
                    break;
                case 'global':
                    escape = value | 0;
                    break;
                case 'cascade':
                    cascade = value | 0;
                    break;
                case 'compress':
                    compress = value | 0;
                    break;
                case 'semicolon':
                    semicolon = value | 0;
                    break;
                case 'preserve':
                    preserve = value | 0;
                    break;
                case 'prefix':
                    should = null;
                    if (!value) {
                        prefix = 0;
                    }
                    else if (typeof value !== 'function') {
                        prefix = 1;
                    }
                    else {
                        prefix = 2;
                        should = value;
                    }
            }
        }
        return set;
    }
    /**
     * Stylis
     *
     * @param {string} selector
     * @param {string} input
     * @return {*}
     */
    function stylis(selector, input) {
        if (this !== void 0 && this.constructor === stylis) {
            return factory(selector);
        }
        // setup
        var ns = selector;
        var code = ns.charCodeAt(0);
        // trim leading whitespace
        if (code < 33) {
            code = (ns = ns.trim()).charCodeAt(0);
        }
        // keyframe/animation namespace
        if (keyed > 0) {
            key = ns.replace(invalidptn, code === OPENBRACKET ? '' : '-');
        }
        // reset, used to assert if a plugin is moneky-patching the return value
        code = 1;
        // cascade/isolate
        if (cascade === 1) {
            nscope = ns;
        }
        else {
            nscopealt = ns;
        }
        var selectors = [nscope];
        var result;
        // execute plugins, pre-process context
        if (plugged > 0) {
            result = proxy(PREPS, input, selectors, selectors, line, column, 0, 0, 0, 0);
            if (result !== void 0 && typeof result === 'string') {
                input = result;
            }
        }
        // build
        var output = compile(array, selectors, input, 0, 0);
        // execute plugins, post-process context
        if (plugged > 0) {
            result = proxy(POSTS, output, selectors, selectors, line, column, output.length, 0, 0, 0);
            // bypass minification
            if (result !== void 0 && typeof (output = result) !== 'string') {
                code = 0;
            }
        }
        // reset
        key = '';
        nscope = '';
        nscopealt = '';
        pattern = 0;
        line = 1;
        column = 1;
        return compress * code === 0 ? output : minify(output);
    }
    stylis['use'] = use;
    stylis['set'] = set;
    if (options !== void 0) {
        set(options);
    }
    return stylis;
}));


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

(function (factory) {
     true ? (module['exports'] = factory()) :
        typeof define === 'function' && define['amd'] ? define(factory()) :
            (window['stylisRuleSheet'] = factory());
}(function () {
    'use strict';
    return function (insertRule) {
        var delimiter = '/*|*/';
        var needle = delimiter + '}';
        function toSheet(block) {
            if (block)
                try {
                    insertRule(block + '}');
                }
                catch (e) { }
        }
        return function ruleSheet(context, content, selectors, parents, line, column, length, ns, depth, at) {
            switch (context) {
                // property
                case 1:
                    // @import
                    if (depth === 0 && content.charCodeAt(0) === 64)
                        return insertRule(content + ';'), '';
                    break;
                // selector
                case 2:
                    if (ns === 0)
                        return content + delimiter;
                    break;
                // at-rule
                case 3:
                    switch (ns) {
                        // @font-face, @page
                        case 102:
                        case 112:
                            return insertRule(selectors[0] + content), '';
                        default:
                            return content + (at === 0 ? delimiter : '');
                    }
                case -2:
                    content.split(needle).forEach(toSheet);
            }
        };
    };
}));


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    arguments: true,
    arity: true
};
var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';
module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
    if (typeof sourceComponent !== 'string') {
        var keys = Object.getOwnPropertyNames(sourceComponent);
        /* istanbul ignore else */
        if (isGetOwnPropertySymbolsAvailable) {
            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
        }
        for (var i = 0; i < keys.length; ++i) {
            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
                try {
                    targetComponent[keys[i]] = sourceComponent[keys[i]];
                }
                catch (error) {
                }
            }
        }
    }
    return targetComponent;
};


/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_router_dom__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Styled_svg__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__routes_config__ = __webpack_require__(41);




const table_of_contents_svg = __webpack_require__(93);
class Table_of_contents_without_router extends __WEBPACK_IMPORTED_MODULE_0_react__["Component"] {
    componentDidMount() {
        for (let route of __WEBPACK_IMPORTED_MODULE_3__routes_config__["a" /* routes_config */]) {
            const node = document.getElementById(route.name);
            if (node) {
                node.addEventListener("click", () => this.props.history.push(route.name));
            }
            else {
                console.warn('For the following route no svg-img could be found:');
                console.warn(route);
            }
        }
    }
    render() {
        return (__WEBPACK_IMPORTED_MODULE_0_react__["createElement"](__WEBPACK_IMPORTED_MODULE_2__Styled_svg__["a" /* Styled_svg */], { is_open: this.props.is_open, dangerouslySetInnerHTML: { __html: table_of_contents_svg } }));
    }
}
const Table_of_contents = Object(__WEBPACK_IMPORTED_MODULE_1_react_router_dom__["d" /* withRouter */])(Table_of_contents_without_router);
/* harmony export (immutable) */ __webpack_exports__["a"] = Table_of_contents;



/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_components__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__css_opening_mechanism__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__css_floating_ghosts__ = __webpack_require__(95);



const Styled_svg = __WEBPACK_IMPORTED_MODULE_0_styled_components__["b" /* default */].div.attrs({}) `
  width: 100%;
  
  svg #routes > g {
    fill: transparent;
    transition: all 1s ease-in-out;
    cursor: pointer;
  }
  
  svg #routes > g:hover {
    opacity: 0.75;
    transform: scale(1.1);
  }
  
  ${props => Object(__WEBPACK_IMPORTED_MODULE_1__css_opening_mechanism__["a" /* css_opening_mechanism */])(props)}
  ${() => Object(__WEBPACK_IMPORTED_MODULE_2__css_floating_ghosts__["a" /* css_floating_ghosts */])()}
`;
/* harmony export (immutable) */ __webpack_exports__["a"] = Styled_svg;



/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_components__ = __webpack_require__(27);

const css_opening_mechanism = (props) => __WEBPACK_IMPORTED_MODULE_0_styled_components__["a" /* css */] `
  position: absolute;
  transition: top 2s;
  top: 0px;
  
  ${!props.is_open && __WEBPACK_IMPORTED_MODULE_0_styled_components__["a" /* css */] `
      z-index: 1;
      top: -1020px;
  `}
`;
/* harmony export (immutable) */ __webpack_exports__["a"] = css_opening_mechanism;



/***/ }),
/* 93 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" id=\"table_of_contents_svg\" version=\"1.1\" viewBox=\"0 0 507.99999 285.75001\"><defs id=\"defs3699\"><filter id=\"filter3901\" style=\"color-interpolation-filters:sRGB;\" width=\"1.3\" x=\"-0.15\" height=\"1.3\" y=\"-0.15\"><feTurbulence id=\"feTurbulence3887\" result=\"result4\" seed=\"0\" numOctaves=\"5\" baseFrequency=\"0.04\" type=\"fractalNoise\"></feTurbulence><feDisplacementMap id=\"feDisplacementMap3889\" result=\"result3\" scale=\"10\" xChannelSelector=\"R\" yChannelSelector=\"G\" in2=\"result4\" in=\"SourceGraphic\"></feDisplacementMap><feDiffuseLighting id=\"feDiffuseLighting3893\" in=\"result4\" result=\"result1\" surfaceScale=\"2\" diffuseConstant=\"1\" lighting-color=\"rgb(233,230,215)\"><feDistantLight id=\"feDistantLight3891\" elevation=\"40\" azimuth=\"235\"></feDistantLight></feDiffuseLighting><feComposite id=\"feComposite3895\" result=\"result2\" in2=\"result1\" in=\"result3\" operator=\"in\"></feComposite><feComposite id=\"feComposite3897\" k1=\"1.7\" operator=\"arithmetic\" result=\"result5\" in2=\"result1\"></feComposite><feBlend id=\"feBlend3899\" mode=\"normal\" in2=\"result3\" in=\"result5\"></feBlend></filter><filter id=\"filter5016\" style=\"color-interpolation-filters:sRGB;\"><feTurbulence id=\"feTurbulence5012\" result=\"turbulence\" baseFrequency=\"0.013 0.013\" seed=\"1\" numOctaves=\"5\" type=\"fractalNoise\"></feTurbulence><feDisplacementMap result=\"fbSourceGraphic\" id=\"feDisplacementMap5014\" xChannelSelector=\"R\" yChannelSelector=\"G\" scale=\"6.6\" in2=\"turbulence\" in=\"SourceGraphic\"></feDisplacementMap><feColorMatrix id=\"feColorMatrix5018\" values=\"0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0\" in=\"fbSourceGraphic\" result=\"fbSourceGraphicAlpha\"></feColorMatrix><feTurbulence in=\"fbSourceGraphic\" result=\"turbulence\" baseFrequency=\"0.013 0.013\" seed=\"1\" numOctaves=\"5\" type=\"fractalNoise\" id=\"feTurbulence5020\"></feTurbulence><feDisplacementMap result=\"fbSourceGraphic\" xChannelSelector=\"R\" yChannelSelector=\"G\" scale=\"6.6\" in=\"fbSourceGraphic\" id=\"feDisplacementMap5022\" in2=\"turbulence\"></feDisplacementMap><feColorMatrix id=\"feColorMatrix5024\" values=\"0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0\" in=\"fbSourceGraphic\" result=\"fbSourceGraphicAlpha\"></feColorMatrix><feTurbulence in=\"fbSourceGraphic\" result=\"turbulence\" baseFrequency=\"0.013 0.013\" seed=\"1\" numOctaves=\"5\" type=\"fractalNoise\" id=\"feTurbulence5026\"></feTurbulence><feDisplacementMap result=\"fbSourceGraphic\" xChannelSelector=\"R\" yChannelSelector=\"G\" scale=\"6.6\" in=\"fbSourceGraphic\" id=\"feDisplacementMap5028\" in2=\"turbulence\"></feDisplacementMap><feColorMatrix id=\"feColorMatrix5030\" values=\"0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0\" in=\"fbSourceGraphic\" result=\"fbSourceGraphicAlpha\"></feColorMatrix><feTurbulence in=\"fbSourceGraphic\" result=\"turbulence\" baseFrequency=\"0.013 0.013\" seed=\"1\" numOctaves=\"5\" type=\"fractalNoise\" id=\"feTurbulence5032\"></feTurbulence><feDisplacementMap result=\"fbSourceGraphic\" xChannelSelector=\"R\" yChannelSelector=\"G\" scale=\"6.6\" in=\"fbSourceGraphic\" id=\"feDisplacementMap5034\" in2=\"turbulence\"></feDisplacementMap><feColorMatrix id=\"feColorMatrix5036\" values=\"0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0\" in=\"fbSourceGraphic\" result=\"fbSourceGraphicAlpha\"></feColorMatrix><feTurbulence in=\"fbSourceGraphic\" result=\"turbulence\" baseFrequency=\"0.013 0.013\" seed=\"1\" numOctaves=\"5\" type=\"fractalNoise\" id=\"feTurbulence5038\"></feTurbulence><feDisplacementMap result=\"fbSourceGraphic\" xChannelSelector=\"R\" yChannelSelector=\"G\" scale=\"6.6\" in=\"fbSourceGraphic\" id=\"feDisplacementMap5040\" in2=\"turbulence\"></feDisplacementMap><feColorMatrix id=\"feColorMatrix5042\" values=\"0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0\" in=\"fbSourceGraphic\" result=\"fbSourceGraphicAlpha\"></feColorMatrix><feTurbulence in=\"fbSourceGraphic\" result=\"turbulence\" baseFrequency=\"0.013 0.013\" seed=\"1\" numOctaves=\"5\" type=\"fractalNoise\" id=\"feTurbulence5044\"></feTurbulence><feDisplacementMap result=\"fbSourceGraphic\" xChannelSelector=\"R\" yChannelSelector=\"G\" scale=\"6.6\" in=\"fbSourceGraphic\" id=\"feDisplacementMap5046\" in2=\"turbulence\"></feDisplacementMap><feColorMatrix id=\"feColorMatrix5048\" values=\"0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0\" in=\"fbSourceGraphic\" result=\"fbSourceGraphicAlpha\"></feColorMatrix><feTurbulence in=\"fbSourceGraphic\" result=\"turbulence\" baseFrequency=\"0.013 0.013\" seed=\"1\" numOctaves=\"5\" type=\"fractalNoise\" id=\"feTurbulence5050\"></feTurbulence><feDisplacementMap result=\"fbSourceGraphic\" xChannelSelector=\"R\" yChannelSelector=\"G\" scale=\"6.6\" in=\"fbSourceGraphic\" id=\"feDisplacementMap5052\" in2=\"turbulence\"></feDisplacementMap><feColorMatrix id=\"feColorMatrix5090\" values=\"0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0\" in=\"fbSourceGraphic\" result=\"fbSourceGraphicAlpha\"></feColorMatrix><feGaussianBlur in=\"fbSourceGraphic\" result=\"fbSourceGraphic\" stdDeviation=\"0.95 0.87\" id=\"feGaussianBlur5092\"></feGaussianBlur><feColorMatrix id=\"feColorMatrix5094\" values=\"0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0\" in=\"fbSourceGraphic\" result=\"fbSourceGraphicAlpha\"></feColorMatrix><feGaussianBlur stdDeviation=\"2.2\" in=\"fbSourceGraphicAlpha\" result=\"result1\" id=\"feGaussianBlur5096\"></feGaussianBlur><feSpecularLighting surfaceScale=\"5\" specularConstant=\"2\" specularExponent=\"18.1\" result=\"result0\" id=\"feSpecularLighting5098\"><feDistantLight elevation=\"24\" azimuth=\"225\" id=\"feDistantLight5100\"></feDistantLight></feSpecularLighting><feComposite operator=\"in\" result=\"result6\" id=\"feComposite5102\" in2=\"fbSourceGraphicAlpha\"></feComposite><feMorphology operator=\"dilate\" radius=\"5.7\" id=\"feMorphology5104\"></feMorphology><feGaussianBlur stdDeviation=\"5.7\" result=\"result11\" id=\"feGaussianBlur5106\"></feGaussianBlur><feDiffuseLighting in=\"result1\" diffuseConstant=\"2\" result=\"result3\" surfaceScale=\"5\" id=\"feDiffuseLighting5108\"><feDistantLight azimuth=\"225\" elevation=\"25\" id=\"feDistantLight5110\"></feDistantLight></feDiffuseLighting><feBlend in=\"result3\" mode=\"multiply\" result=\"result7\" id=\"feBlend5112\" in2=\"fbSourceGraphic\"></feBlend><feComposite result=\"result91\" operator=\"in\" in=\"result7\" id=\"feComposite5114\" in2=\"fbSourceGraphicAlpha\"></feComposite><feBlend in=\"result6\" mode=\"lighten\" result=\"result9\" id=\"feBlend5116\" in2=\"result91\"></feBlend><feComposite result=\"fbSourceGraphic\" in=\"result11\" id=\"feComposite5118\" in2=\"result9\"></feComposite><feColorMatrix id=\"feColorMatrix5154\" values=\"0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0\" in=\"fbSourceGraphic\" result=\"fbSourceGraphicAlpha\"></feColorMatrix><feColorMatrix result=\"colormatrix\" values=\"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 -0.2125 -0.7154 -0.0721 1 0 \" in=\"fbSourceGraphic\" id=\"feColorMatrix5156\"></feColorMatrix><feComposite result=\"composite\" k4=\"0\" k3=\"0\" k2=\"1\" operator=\"arithmetic\" in=\"fbSourceGraphic\" id=\"feComposite5158\" in2=\"colormatrix\"></feComposite><feGaussianBlur result=\"blur1\" stdDeviation=\"5 0.01\" id=\"feGaussianBlur5160\"></feGaussianBlur><feGaussianBlur result=\"blur2\" stdDeviation=\"0.01 5\" in=\"composite\" id=\"feGaussianBlur5162\"></feGaussianBlur><feBlend result=\"blend\" mode=\"darken\" in=\"blur2\" id=\"feBlend5164\" in2=\"blur1\"></feBlend></filter></defs><metadata id=\"metadata3702\"><rdf:RDF><cc:Work rdf:about><dc:format>image/svg+xml</dc:format><dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"></dc><dc:title></dc:title></cc:Work></rdf:RDF></metadata><g style=\"fill:#aa4400\" id=\"layer1\"></g><path id=\"rect3720\" d=\"M-4.08571038256 -2.01413864898C-4.08571038256 -2.01413864898 3.35667106397 -2.39525123682 9.80684502688 -2.39525123682C12.5968751775 -2.39525123682 13.183002624 7.34758432331 17.0230042927 7.34758432331C20.043151239 7.34758432331 36.0826511372 8.26654483893 39.6999457554 8.26654483893C42.8148348047 8.26654483893 40.2791254699 7.41210089887 43.8050066356 7.41210089887C46.971383401 7.41210089887 50.9390683726 8.80323470315 54.4143776354 8.80323470315C57.613709177 8.80323470315 59.5528390466 -0.468837915722 62.9966417807 -0.468837915722C66.2180360041 -0.468837915722 61.3812245153 8.92816777409 64.8024535996 8.92816777409C68.0407075387 8.92816777409 66.8383035124 7.00320033169 70.2437222805 7.00320033169C73.4946523132 7.00320033169 82.3513210481 -2.69264089 85.7443144193 -2.69264089C89.0051012431 -2.69264089 86.815078652 6.53180783492 90.1979815249 6.53180783492C93.4669031627 6.53180783492 97.8691629313 4.41847449801 101.243929391 4.41847449801C104.519656137 4.41847449801 112.682600199 4.52585287609 116.050585936 4.52585287609C119.332135426 4.52585287609 131.229311603 0.166298666631 134.591554189 0.166298666631C137.878657403 0.166298666631 131.52738139 7.09822098039 134.885182994 7.09822098039C138.176593727 7.09822098039 148.994476609 -2.19435295324 152.347771167 -2.19435295324C155.643177532 -2.19435295324 161.48118248 12.1258898427 164.83062318 12.1258898427C168.129216691 12.1258898427 162.821603151 0.412870694909 166.167134473 0.412870694909C169.46910399 0.412870694909 178.968573148 9.59080166865 182.311014319 9.59080166865C185.616215157 9.59080166865 183.840224236 8.49646798801 187.179926589 8.49646798801C190.487748669 8.49646798801 191.811941467 -2.5820688665 195.148684091 -2.5820688665C198.459047087 -2.5820688665 198.610297095 11.6249695931 201.944319631 11.6249695931C205.25752578 11.6249695931 220.475807081 -2.26209180835 223.80766613 -2.26209180835C227.12320673 -2.26209180835 221.423204368 6.03486561276 224.752575529 6.03486561276C228.07012576 6.03486561276 233.908905288 10.8323886222 237.23560033 10.8323886222C240.555904165 10.8323886222 239.845976233 8.88927458084 243.170832181 8.88927458084C246.493497958 8.88927458084 260.088725432 8.48549081626 263.41139161 8.48549081626C266.736326012 8.48549081626 272.445316706 0.966015381058 275.76569953 0.966015381058C279.092929561 0.966015381058 272.780916838 11.5216938414 276.098999454 11.5216938414C279.428490476 11.5216938414 288.974326489 7.49166636586 292.289985833 7.49166636586C295.621458216 7.49166636586 295.127007008 12.6681819558 298.439830879 12.6681819558C301.774264275 12.6681819558 301.243670427 4.87083211842 304.554438522 4.87083211842C307.89114346 4.87083211842 305.790123264 -0.654770851269 309.097908066 -0.654770851269C312.437617755 -0.654770851269 319.725141186 1.56228533828 323.030348978 1.56228533828C326.37305815 1.56228533828 329.232088765 6.62773759414 332.534319327 6.62773759414C335.880006466 6.62773759414 354.021416046 -0.447442890556 357.320160068 -0.447442890556C360.66954578 -0.447442890556 350.299482906 -0.0249047953431 353.594834879 -0.0249047953431C356.947789393 -0.0249047953431 362.523076111 6.54327944534 365.814158426 6.54327944534C369.171956567 6.54327944534 379.411713823 12.467397499 382.698813262 12.467397499C386.061037694 12.467397499 383.765359946 8.79626476591 387.046891657 8.79626476591C390.415000456 8.79626476591 393.874778628 0.543888328545 397.150621027 0.543888328545C400.525556954 0.543888328545 407.641157041 -1.52496174919 410.91023617 -1.52496174919C414.292998712 -1.52496174919 420.809649696 10.839695787 424.070304278 10.839695787C427.463166778 10.839695787 434.737961927 3.10600376175 437.988770369 3.10600376175C441.394360152 3.10600376175 426.336676821 8.67224759465 429.575083345 8.67224759465C432.996775363 8.67224759465 437.939641833 6.8479453939 441.161440479 6.8479453939C444.604799198 6.8479453939 447.00554548 6.8484519945 450.204485889 6.8484519945C453.679945076 6.8484519945 462.97933689 3.30427446615 466.14582901 3.30427446615C469.671566746 3.30427446615 467.609516069 5.34491958469 470.724279015 5.34491958469C474.341255504 5.34491958469 479.075939941 10.2886033533 482.095853179 10.2886033533C485.935770599 10.2886033533 498.337653908 -0.225707746328 501.127635751 -0.225707746328C507.577812087 -0.225707746328 515.629606436 1.95033505772 515.629606436 1.95033505772C515.629606436 1.95033505772 499.75721534 5.32286900059 499.75721534 11.5203507634C499.75721534 14.2462606333 500.701832543 23.0898744889 500.701832543 26.7982543963C500.701832543 29.7476695065 502.936608688 24.7520354586 502.936608688 28.2478162513C502.936608688 31.2887933132 508.679610552 43.1200327741 508.679610552 46.5273770678C508.679610552 49.6187778317 515.437629481 51.8691964362 515.437629481 55.2277854434C515.437629481 58.3516909712 518.237605559 66.212453269 518.237605559 69.5401978577C518.237605559 72.6864543352 517.800213852 62.1937024649 517.800213852 65.499280178C517.800213852 68.6625557838 514.632986551 80.4830791541 514.632986551 83.7723183253C514.632986551 86.9490430915 499.874624406 95.7268729207 499.874624406 99.0032160012C499.874624406 102.190839038 508.705223215 94.5492294696 508.705223215 97.8147482215C508.705223215 101.011646603 507.709313506 105.641479734 507.709313506 108.897694618C507.709313506 112.103314316 516.233444076 121.236275404 516.233444076 124.484787869C516.233444076 127.697746018 515.576940672 122.685585653 515.576940672 125.926415098C515.576940672 129.146474614 501.507836737 132.015493309 501.507836737 135.249281161C501.507836737 138.476211654 502.708142095 149.068350068 502.708142095 152.295280925C502.708142095 155.528841071 515.768560424 162.367816422 515.768560424 165.587651384C515.768560424 168.828326777 512.546422599 162.2883513 512.546422599 165.50116015C512.546422599 168.749320236 503.69639623 178.997153156 503.69639623 182.202433189C503.69639623 185.458860535 511.259732015 192.232483264 511.259732015 195.429590602C511.259732015 198.695277682 505.589921008 191.613660152 505.589921008 194.8014472C505.589921008 198.077844159 517.826229571 208.682419089 517.826229571 211.859198009C517.826229571 215.148679106 505.133938513 208.627913594 505.133938513 211.791415943C505.133938513 215.097111298 498.6848169 225.732549861 498.6848169 228.878914826C498.6848169 232.206800833 517.568035255 227.142425658 517.568035255 230.266456496C517.568035255 233.625303586 505.798353283 246.428247224 505.798353283 249.519863387C505.798353283 252.927098073 502.019813078 248.800584159 502.019813078 251.841466942C502.019813078 255.337138107 499.333482521 261.590359452 499.333482521 264.539690191C499.333482521 268.248062379 513.83883202 273.741618771 513.83883202 276.467515879C513.83883202 282.664915118 513.184292628 287.094380932 513.184292628 287.094380932C513.184292628 287.094380932 513.929463771 292.73516226 507.479289808 292.73516226C504.689259657 292.73516226 501.958274215 280.837011932 498.118272546 280.837011932C495.0981256 280.837011932 483.555715197 292.111238086 479.938420579 292.111238086C476.82353153 292.111238086 462.501105903 283.88866342 458.975224737 283.88866342C455.808847972 283.88866342 467.588825904 278.434548782 464.113516642 278.434548782C460.9141851 278.434548782 442.503850531 285.299707322 439.060047797 285.299707322C435.838653573 285.299707322 446.032354008 290.78138619 442.611124924 290.78138619C439.372870984 290.78138619 423.774495833 292.382550404 420.369077065 292.382550404C417.118147033 292.382550404 415.812942295 290.228905851 412.419948924 290.228905851C409.1591621 290.228905851 402.949993178 281.078947431 399.567090305 281.078947431C396.298168667 281.078947431 407.891905011 287.813406311 404.517138551 287.813406311C401.241411805 287.813406311 391.580008877 290.171148607 388.21202314 290.171148607C384.93047365 290.171148607 380.41319878 282.522323733 377.050956194 282.522323733C373.76385298 282.522323733 379.463106453 279.03664603 376.105304849 279.03664603C372.813894116 279.03664603 368.082790869 292.830956081 364.729496311 292.830956081C361.434089946 292.830956081 354.425912632 292.738464958 351.076471932 292.738464958C347.777878421 292.738464958 348.83910035 281.103785232 345.493569028 281.103785232C342.191599511 281.103785232 339.318772427 286.533039943 335.976331256 286.533039943C332.671130418 286.533039943 322.237432827 293.039893044 318.897730474 293.039893044C315.589908394 293.039893044 319.848736281 278.813594539 316.511993657 278.813594539C313.201630661 278.813594539 308.6545921 290.44989896 305.320569564 290.44989896C302.007363415 290.44989896 285.92703069 280.228173448 282.595171641 280.228173448C279.279631041 280.228173448 273.068168303 284.180835468 269.738797142 284.180835468C266.421246911 284.180835468 274.046380712 288.0456889 270.71968567 288.0456889C267.399381835 288.0456889 260.493567305 293.742517626 257.168711357 293.742517626C253.84604558 293.742517626 245.149461529 279.775532346 241.826795351 279.775532346C238.501860949 279.775532346 242.920683194 285.873952219 239.60030037 285.873952219C236.273070339 285.873952219 230.08479337 280.484550996 226.766710754 280.484550996C223.437219732 280.484550996 229.874950584 285.135096333 226.55929124 285.135096333C223.227818857 285.135096333 220.037659037 288.878270583 216.724835166 288.878270583C213.39040177 288.878270583 194.520884896 291.681867307 191.210116801 291.681867307C187.873411863 291.681867307 185.839819323 283.693265122 182.532034521 283.693265122C179.192324832 283.693265122 179.253074237 279.041994081 175.947866445 279.041994081C172.605157273 279.041994081 172.235239158 292.590640075 168.933008596 292.590640075C165.587321457 292.590640075 153.581702452 283.877737099 150.28295843 283.877737099C146.933572718 283.877737099 155.309705877 285.578719138 152.014353904 285.578719138C148.66139939 285.578719138 146.507164456 282.381328334 143.216082141 282.381328334C139.858284 282.381328334 137.253751896 284.559319765 133.966652457 284.559319765C130.604428025 284.559319765 117.156802814 286.787088241 113.875271103 286.787088241C110.507162304 286.787088241 119.423951265 290.574816323 116.148108866 290.574816323C112.773172939 290.574816323 98.2170088584 280.386540928 94.9479297293 280.386540928C91.5651671877 280.386540928 92.7515718057 284.937720814 89.4909172234 284.937720814C86.098054724 284.937720814 88.5673877639 289.620900328 85.3165793227 289.620900328C81.9109895396 289.620900328 70.1526097249 293.022719217 66.9142032005 293.022719217C63.4925111827 293.022719217 68.8785199872 283.25243482 65.656721341 283.25243482C62.2133626222 283.25243482 59.4318531746 284.975500107 56.2329127665 284.975500107C52.7574535792 284.975500107 36.3955629925 290.90147924 33.2290708729 290.90147924C29.7033331375 290.90147924 30.4522127579 288.261184411 27.3374498111 288.261184411C23.720473323 288.261184411 22.5428998005 281.590302955 19.5229865624 281.590302955C15.6830691423 281.590302955 20.4767608279 283.078671444 17.686778985 283.078671444C11.2366026484 283.078671444 -3.3119833511 280.685386104 -3.3119833511 280.685386104C-3.3119833511 280.685386104 4.03503473212 278.815691443 4.03503473212 272.61820968C4.03503473212 269.89229981 3.37576065349 274.640305376 3.37576065349 270.931925468C3.37576065349 267.982510358 -3.53396478252 254.386870323 -3.53396478252 250.89108953C-3.53396478252 247.850112468 -0.607290190575 245.05231054 -0.607290190575 241.644966246C-0.607290190575 238.553565482 0.422279110479 236.095482233 0.422279110479 232.736893226C0.422279110479 229.612987699 -4.41955308998 225.906187297 -4.41955308998 222.578442708C-4.41955308998 219.43218623 -1.93777240762 227.08685215 -1.93777240762 223.781274437C-1.93777240762 220.617998831 1.52228749243 213.412878322 1.52228749243 210.123639151C1.52228749243 206.946914385 -8.01892196423 197.696673128 -8.01892196423 194.420330048C-8.01892196423 191.232707011 9.56540156398 193.828239086 9.56540156398 190.562720334C9.56540156398 187.365821952 -7.19457390109 182.095198695 -7.19457390109 178.838983811C-7.19457390109 175.633364113 3.89402217253 174.751720241 3.89402217253 171.503207776C3.89402217253 168.290249627 9.52333270629 156.274406486 9.52333270629 153.033577041C9.52333270629 149.813517525 5.26577273668 155.814634182 5.26577273668 152.58084633C5.26577273668 149.353915837 -1.50000704269 143.865170493 -1.50000704269 140.638239636C-1.50000704269 137.40467949 -7.43229447888 126.218228272 -7.43229447888 122.99839331C-7.43229447888 119.757717917 4.5581879682 130.399247856 4.5581879682 127.186439006C4.5581879682 123.93827892 -7.95992680538 110.983583 -7.95992680538 107.778302967C-7.95992680538 104.521875621 -0.115211904055 105.135519458 -0.115211904055 101.93841212C-0.115211904055 98.6727250399 -4.3582296076 89.7298609194 -4.3582296076 86.5420738714C-4.3582296076 83.2656769127 5.2363685508 85.419874205 5.2363685508 82.2430952845C5.2363685508 78.9536141881 5.64524311239 78.858156554 5.64524311239 75.6946542056C5.64524311239 72.3889588503 -9.00957339092 65.1030768366 -9.00957339092 61.9567118718C-9.00957339092 58.6288258639 -0.188242564871 54.6669001427 -0.188242564871 51.5428693047C-0.188242564871 48.1840222148 1.9520200966 53.512966951 1.9520200966 50.4213507882C1.9520200966 47.0141161023 0.918780962416 35.7872106731 0.918780962416 32.7463278906C0.918780962416 29.2506567255 -5.06042403499 20.111083065 -5.06042403499 17.161752326C-5.06042403499 13.4533801379 8.23890376975 10.4917159446 8.23890376975 7.76581883671C8.23890376975 1.56841959779 0.416970428314 11.1374956151 0.416970428314 11.1374956151\" style=\"fill:#aa4400;stroke-width:0.26458335;filter:url(#filter3901)\"></path><g id=\"layer3\"><path id=\"path5486\" d=\"M 87.165398,88.006544 131.21136,65.289313\" style=\"fill:none;stroke:#000000;stroke-width:3.71924806;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:7.43849589, 3.71924795;stroke-dashoffset:5.0036149;stroke-opacity:1\"></path></g><g id=\"routes\"><g transform=\"translate(5.3453904,5.8799295)\" id=\"Every_story_needs_a_beginning\"><g id=\"Every_story_needs_a_beginning2\" transform=\"matrix(0.56836092,0,0,0.59091303,247.6446,-22.684564)\"><path id=\"path82\" d=\"m -374.69264,190.03894 h 71.05249 c -19.59437,-11.06871 -39.66609,-19.74364 -63.59716,-9.06534 -3.8752,2.70533 -6.74836,5.63876 -7.45533,9.06534 z\" style=\"fill:#784421;stroke:#784421;stroke-width:0.31227243px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><rect y=\"150.03711\" x=\"-342.20273\" height=\"31.401331\" width=\"2.5017958\" id=\"rect84\" style=\"fill:#88aa00;fill-opacity:1;stroke:#88aa00;stroke-width:0.34737816\"></rect><rect transform=\"matrix(-0.8296364,-0.55830408,0.42907767,-0.9032676,0,0)\" y=\"-326.92523\" x=\"240.75891\" height=\"19.072891\" width=\"1.6966547\" id=\"rect86\" style=\"fill:#88aa00;fill-opacity:1;stroke:#88aa00;stroke-width:0.32192698\"></rect><path id=\"path88\" d=\"m -341.77773,166.46628 c -1.73537,2.83326 -4.47715,3.97576 -10.48173,-1.23441 -6.00459,-5.21017 -13.00937,-14.80974 -11.27401,-17.643 1.73538,-2.83325 11.55697,2.16741 17.56157,7.37759 6.00458,5.21015 5.92953,8.66657 4.19417,11.49982 z\" style=\"fill:#ccff00;stroke:#1a1a1a;stroke-width:0.40288496px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path95\" d=\"m -339.79611,168.18572 -23.19481,-20.12609\" style=\"fill:none;stroke:#000000;stroke-width:0.15762964px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path97\" d=\"m -348.65241,167.73285 c 4.14138,-1.66241 5.91051,-4.91723 5.78454,-9.44417\" style=\"fill:none;stroke:#000000;stroke-width:0.15074588px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path99\" d=\"m -352.38094,164.96923 c 4.30745,-1.11532 6.4522,-4.40502 6.19323,-10.11143\" style=\"fill:none;stroke:#000000;stroke-width:0.15074588px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path101\" d=\"m -355.48925,162.11496 c 3.66225,-1.80671 6.39926,-4.37024 5.87886,-9.59816\" style=\"fill:none;stroke:#000000;stroke-width:0.15074588px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path103\" d=\"m -358.09336,158.99071 c 3.44385,-1.6474 5.32336,-4.55368 5.43873,-8.87958\" style=\"fill:none;stroke:#000000;stroke-width:0.15074588px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path105\" d=\"m -360.28643,156.30173 c 2.73081,-1.49382 4.62235,-3.65388 4.52704,-7.3911\" style=\"fill:none;stroke:#000000;stroke-width:0.15074588px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path107\" d=\"m -361.81151,153.72076 c 1.91065,-1.23901 3.45526,-2.88585 3.67822,-6.00528\" style=\"fill:none;stroke:#000000;stroke-width:0.15074588px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path88-3\" d=\"m -333.69582,148.01168 c -1.0006,-0.89751 -1.294,-2.06388 1.04412,-4.03994 2.33811,-1.97605 6.42642,-4.01673 7.42731,-3.11969 1.0006,0.8975 -1.46279,4.39377 -3.80093,6.36986 -2.33809,1.97603 -3.6696,1.68681 -4.6705,0.78977 z\" style=\"fill:#ccff00;stroke:#1a1a1a;stroke-width:0.15933719px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path95-9\" d=\"m -334.46743,148.66381 9.03179,-7.63321\" style=\"fill:none;stroke:#000000;stroke-width:0.06234102px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path97-6\" d=\"m -333.81325,145.20603 c 0.4183,1.75772 1.58024,2.69974 3.33604,2.99051\" style=\"fill:none;stroke:#000000;stroke-width:0.05961857px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path99-0\" d=\"m -332.54365,143.94357 c 0.19791,1.78211 1.35302,2.87486 3.5722,3.20106\" style=\"fill:none;stroke:#000000;stroke-width:0.05961857px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path101-9\" d=\"m -331.27256,142.93246 c 0.49996,1.57966 1.34242,2.85135 3.39056,3.03912\" style=\"fill:none;stroke:#000000;stroke-width:0.05961857px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path103-8\" d=\"m -329.92444,142.14043 c 0.45023,1.48157 1.47154,2.44093 3.13694,2.81121\" style=\"fill:none;stroke:#000000;stroke-width:0.05961857px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path105-6\" d=\"m -328.76675,141.47777 c 0.42946,1.1889 1.16177,2.09695 2.61085,2.34034\" style=\"fill:none;stroke:#000000;stroke-width:0.05961857px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path><path id=\"path107-2\" d=\"m -327.68694,141.07034 c 0.37538,0.84639 0.92817,1.57911 2.1211,1.90191\" style=\"fill:none;stroke:#000000;stroke-width:0.05961857px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"></path></g><rect style=\"opacity:1;fill:#000000;fill-opacity:0;stroke:#1a1a1a;stroke-width:1.07356155;stroke-miterlimit:4;stroke-dasharray:none\" id=\"rect126\" width=\"50.523621\" height=\"42.085426\" x=\"27.858065\" y=\"54.634972\"></rect><title id=\"title5262\">Every story needs a beginning</title></g><g id=\"Ghosts_of_the_past\"><g id=\"Ghosts_of_the_past_inner\" transform=\"matrix(0.26297717,0,0,0.32966944,205.70578,75.19638)\"><g id=\"ghost_3\"><g id=\"ghost_3_inner\" transform=\"rotate(-8.458652,-360.17954,202.76275)\"><ellipse style=\"fill:#333333;fill-opacity:1;stroke:#333333;stroke-width:0.26458335\" id=\"path48-5\" cx=\"-126.28486\" cy=\"-44.996044\" rx=\"9.2207985\" ry=\"7.3499122\"></ellipse><ellipse style=\"fill:#333333;fill-opacity:1;stroke:#333333;stroke-width:0.26458335\" id=\"path48-7-8\" cx=\"-97.018837\" cy=\"-40.318825\" rx=\"9.2207985\" ry=\"7.3499122\"></ellipse><path style=\"fill:#333333;fill-opacity:1;stroke:#333333;stroke-width:0.26458335\" id=\"path67-2\" d=\"m -98.622456,-16.799105 a 17.105251,5.3453913 0 0 1 -14.066404,5.260361 17.105251,5.3453913 0 0 1 -19.06436,-3.391295 17.105251,5.3453913 0 0 1 7.29262,-6.465326\"></path><path style=\"fill:#cccccc;fill-opacity:1;stroke:#333333;stroke-width:1.01015258\" d=\"m -430.57582,56.622232 c -7.60322,-3.995689 -14.27438,-12.784541 -23.17209,-30.52781 -3.1699,-6.321222 -6.11465,-11.094192 -6.54389,-10.606602 -0.42923,0.487601 -3.2223,4.469885 -6.20681,8.849522 -2.98451,4.379628 -8.03101,10.60835 -11.21444,13.841585 -16.51969,16.778169 -28.47236,12.672566 -38.00108,-13.052908 l -2.74496,-7.410792 -4.54569,0.546775 c -2.50012,0.300723 -9.09137,1.246407 -14.64721,2.101532 -13.1025,2.016658 -29.88411,2.032618 -36.61141,0.03485 -6.52208,-1.936877 -10.36068,-6.180396 -10.36068,-11.4536249 0,-5.2647837 5.58547,-16.3224792 13.08536,-25.9054221 3.47853,-4.444672 13.26701,-14.915024 21.75217,-23.26745 l 15.42757,-15.186229 -2.36884,-12.08789 c -4.92484,-25.130797 -6.82521,-43.966138 -6.87607,-68.151358 -0.0506,-24.04657 0.7913,-32.19184 4.98878,-48.26861 11.3547,-43.48961 40.72189,-83.8884 90.98142,-60.81335 5.53132,2.53953 9.30114,0.22749 14.55205,1.41346 1.91325,0.43213 -19.32473,3.28332 -5.25091,-1.18597 63.28399,-20.09651 112.74741,12.07728 133.67647,22.6522 7.40656,3.74235 11.07532,6.34077 17.1038,12.37142 13.15283,13.15756 17.77513,26.31076 16.71593,47.56689 -1.56477,31.40262 -17.95292,71.347899 -50.90349,124.07468 l -6.5196,10.432522 8.09944,16.33652 c 27.42078,55.307549 17.61634,69.399904 -31.03742,44.611448 -6.98958,-3.561101 -17.46105,-9.383105 -23.26992,-12.937792 l -10.56159,-6.463077 -5.94162,10.715264 c -15.11303,27.255239 -28.20809,37.759724 -39.60527,31.770217 z m 17.17259,-100.46158 c 17.32321,-2.122876 33.09787,-7.43846 38.17263,-12.86302 2.50435,-2.676965 4.51144,-7.230389 3.18707,-7.230389 -0.38379,0 -22.57464,-3.925665 -49.31301,-8.723687 -26.73837,-4.798033 -49.83277,-8.657119 -51.32086,-8.575761 -4.19701,0.229466 -15.96158,4.080632 -21.35983,6.992205 -15.89273,8.571791 -9.38522,20.800536 14.33719,26.942102 16.80751,4.351343 46.40969,5.895624 66.29681,3.45855 z m 62.37133,-82.713052 c 11.509,-4.30606 19.93637,-15.19884 19.93637,-25.7687 0,-10.55892 -8.29706,-21.29314 -20.03473,-25.91969 -4.49711,-1.77259 -7.84236,-2.26075 -15.80595,-2.30653 -9.26303,-0.0532 -10.64654,0.20107 -16.66752,3.06367 -8.55265,4.06627 -12.06447,7.13699 -15.68481,13.71477 -7.0572,12.8222 -1.3282,28.03832 13.39192,35.5686 9.82258,5.02488 24.04252,5.69699 34.86472,1.64788 z m -113.66743,-16.68675 c 2.82372,-0.83855 7.32315,-2.99776 9.99873,-4.79823 14.86836,-10.00531 17.38689,-26.794 5.86699,-39.10971 -16.4823,-17.62092 -51.32468,-14.09172 -61.44851,6.22414 -5.73992,11.51853 -1.96164,24.59859 9.35447,32.38428 9.28152,6.38585 24.8845,8.66827 36.22832,5.29952 z\" id=\"path79-1\" transform=\"scale(0.26458334)\"></path></g></g><g id=\"ghost_1\"><g transform=\"translate(7.9375001,2.2678572)\" id=\"ghost_1_inner\"><ellipse style=\"fill:#333333;fill-opacity:1;stroke:#333333;stroke-width:0.26458335\" id=\"path48\" cx=\"-126.28486\" cy=\"-44.996044\" rx=\"9.2207985\" ry=\"7.3499122\"></ellipse><ellipse style=\"fill:#333333;fill-opacity:1;stroke:#333333;stroke-width:0.26458335\" id=\"path48-7\" cx=\"-97.018837\" cy=\"-40.318825\" rx=\"9.2207985\" ry=\"7.3499122\"></ellipse><path style=\"fill:#333333;fill-opacity:1;stroke:#333333;stroke-width:0.26458335\" id=\"path67\" d=\"m -98.622456,-16.799105 a 17.105251,5.3453913 0 0 1 -14.066404,5.260361 17.105251,5.3453913 0 0 1 -19.06436,-3.391295 17.105251,5.3453913 0 0 1 7.29262,-6.465326\"></path><path style=\"fill:#cccccc;fill-opacity:1;stroke:#333333;stroke-width:1.01015258\" d=\"m -430.57582,56.622232 c -7.60322,-3.995689 -14.27438,-12.784541 -23.17209,-30.52781 -3.1699,-6.321222 -6.11465,-11.094192 -6.54389,-10.606602 -0.42923,0.487601 -3.2223,4.469885 -6.20681,8.849522 -2.98451,4.379628 -8.03101,10.60835 -11.21444,13.841585 -16.51969,16.778169 -28.47236,12.672566 -38.00108,-13.052908 l -2.74496,-7.410792 -4.54569,0.546775 c -2.50012,0.300723 -9.09137,1.246407 -14.64721,2.101532 -13.1025,2.016658 -29.88411,2.032618 -36.61141,0.03485 -6.52208,-1.936877 -10.36068,-6.180396 -10.36068,-11.4536249 0,-5.2647837 5.58547,-16.3224792 13.08536,-25.9054221 3.47853,-4.444672 13.26701,-14.915024 21.75217,-23.26745 l 15.42757,-15.186229 -2.36884,-12.08789 c -4.92484,-25.130797 -6.82521,-43.966138 -6.87607,-68.151358 -0.0506,-24.04657 0.79129,-32.19184 4.98878,-48.26861 11.3547,-43.48961 42.62586,-64.39172 90.98142,-60.81335 6.06984,0.44917 12.61826,1.08523 14.55205,1.41346 1.93378,0.32823 15.56204,1.52271 30.28502,2.65441 56.01462,4.30562 77.17434,8.36156 98.14054,18.81182 7.4269,3.70182 11.07532,6.34077 17.1038,12.37142 13.15283,13.15756 17.77513,26.31076 16.71593,47.56689 -1.56477,31.40262 -17.95292,71.347899 -50.90349,124.07468 l -6.5196,10.432522 8.09944,16.33652 c 27.42078,55.307549 17.61634,69.399904 -31.03742,44.611448 -6.98958,-3.561101 -17.46105,-9.383105 -23.26992,-12.937792 l -10.56159,-6.463077 -5.94162,10.715264 c -15.11303,27.255239 -28.20809,37.759724 -39.60527,31.770217 z m 17.17259,-100.46158 c 17.32321,-2.122876 33.09787,-7.43846 38.17263,-12.86302 2.50435,-2.676965 4.51144,-7.230389 3.18707,-7.230389 -0.38379,0 -22.57464,-3.925665 -49.31301,-8.723687 -26.73837,-4.798033 -49.83277,-8.657119 -51.32086,-8.575761 -4.19701,0.229466 -15.96158,4.080632 -21.35983,6.992205 -15.89273,8.571791 -9.38522,20.800536 14.33719,26.942102 16.80751,4.351343 46.40969,5.895624 66.29681,3.45855 z m 62.37133,-82.713052 c 11.509,-4.30606 19.93637,-15.19884 19.93637,-25.7687 0,-10.55892 -8.29706,-21.29314 -20.03473,-25.91969 -4.49711,-1.77259 -7.84236,-2.26075 -15.80595,-2.30653 -9.26303,-0.0532 -10.64654,0.20107 -16.66752,3.06367 -8.55265,4.06627 -12.06447,7.13699 -15.68481,13.71477 -7.0572,12.8222 -1.3282,28.03832 13.39192,35.5686 9.82258,5.02488 24.04252,5.69699 34.86472,1.64788 z m -113.66743,-16.68675 c 2.82372,-0.83855 7.32315,-2.99776 9.99873,-4.79823 14.86836,-10.00531 17.38689,-26.794 5.86699,-39.10971 -16.4823,-17.62092 -51.32468,-14.09172 -61.44851,6.22414 -5.73992,11.51853 -1.96164,24.59859 9.35447,32.38428 9.28152,6.38585 24.8845,8.66827 36.22832,5.29952 z\" id=\"path79\" transform=\"scale(0.26458334)\"></path></g></g><g id=\"ghost_2\"><g id=\"ghost_2_inner\" transform=\"matrix(-1,0,0,1,-313.85653,-0.60035424)\"><ellipse style=\"fill:#333333;fill-opacity:1;stroke:#333333;stroke-width:0.26458335\" id=\"path48-8\" cx=\"-126.28486\" cy=\"-44.996044\" rx=\"9.2207985\" ry=\"7.3499122\"></ellipse><ellipse style=\"fill:#333333;fill-opacity:1;stroke:#333333;stroke-width:0.26458335\" id=\"path48-7-9\" cx=\"-97.018837\" cy=\"-40.318825\" rx=\"9.2207985\" ry=\"7.3499122\"></ellipse><path style=\"fill:#333333;fill-opacity:1;stroke:#333333;stroke-width:0.26458335\" id=\"path67-1\" d=\"m -98.622456,-16.799105 a 17.105251,5.3453913 0 0 1 -14.066404,5.260361 17.105251,5.3453913 0 0 1 -19.06436,-3.391295 17.105251,5.3453913 0 0 1 7.29262,-6.465326\"></path><path style=\"fill:#cccccc;fill-opacity:1;stroke:#333333;stroke-width:1.01015258\" d=\"m -430.57582,56.622232 c -7.60322,-3.995689 -14.27438,-12.784541 -23.17209,-30.52781 -3.1699,-6.321222 -6.11465,-11.094192 -6.54389,-10.606602 -0.42923,0.487601 -3.2223,4.469885 -6.20681,8.849522 -2.98451,4.379628 -8.03101,10.60835 -11.21444,13.841585 -16.51969,16.778169 -28.47236,12.672566 -38.00108,-13.052908 l -2.74496,-7.410792 -4.54569,0.546775 c -2.50012,0.300723 -9.09137,1.246407 -14.64721,2.101532 -13.1025,2.016658 -29.88411,2.032618 -36.61141,0.03485 -6.52208,-1.936877 -10.36068,-6.180396 -10.36068,-11.4536249 0,-5.2647837 5.58547,-16.3224792 13.08536,-25.9054221 3.47853,-4.444672 13.26701,-14.915024 21.75217,-23.26745 l 15.42757,-15.186229 -2.36884,-12.08789 c -4.92484,-25.130797 -6.82521,-43.966138 -6.87607,-68.151358 -0.0506,-24.04657 0.79129,-32.19184 4.98878,-48.26861 11.3547,-43.48961 42.62586,-64.39172 90.98142,-60.81335 6.06984,0.44917 12.61826,1.08523 14.55205,1.41346 1.93378,0.32823 46.99061,-5.62015 61.71359,-4.48845 56.01462,4.30562 45.74577,15.50442 66.71197,25.95468 7.4269,3.70182 11.07532,6.34077 17.1038,12.37142 13.15283,13.15756 17.77513,26.31076 16.71593,47.56689 -1.56477,31.40262 -17.95292,71.347899 -50.90349,124.07468 l -6.5196,10.432522 8.09944,16.33652 c 27.42078,55.307549 17.61634,69.399904 -31.03742,44.611448 -6.98958,-3.561101 -17.46105,-9.383105 -23.26992,-12.937792 l -10.56159,-6.463077 -5.94162,10.715264 c -15.11303,27.255239 -28.20809,37.759724 -39.60527,31.770217 z m 17.17259,-100.46158 c 17.32321,-2.122876 33.09787,-7.43846 38.17263,-12.86302 2.50435,-2.676965 4.51144,-7.230389 3.18707,-7.230389 -0.38379,0 -22.57464,-3.925665 -49.31301,-8.723687 -26.73837,-4.798033 -49.83277,-8.657119 -51.32086,-8.575761 -4.19701,0.229466 -15.96158,4.080632 -21.35983,6.992205 -15.89273,8.571791 -9.38522,20.800536 14.33719,26.942102 16.80751,4.351343 46.40969,5.895624 66.29681,3.45855 z m 62.37133,-82.713052 c 11.509,-4.30606 19.93637,-15.19884 19.93637,-25.7687 0,-10.55892 -8.29706,-21.29314 -20.03473,-25.91969 -4.49711,-1.77259 -7.84236,-2.26075 -15.80595,-2.30653 -9.26303,-0.0532 -10.64654,0.20107 -16.66752,3.06367 -8.55265,4.06627 -12.06447,7.13699 -15.68481,13.71477 -7.0572,12.8222 -1.3282,28.03832 13.39192,35.5686 9.82258,5.02488 24.04252,5.69699 34.86472,1.64788 z m -113.66743,-16.68675 c 2.82372,-0.83855 7.32315,-2.99776 9.99873,-4.79823 14.86836,-10.00531 17.38689,-26.794 5.86699,-39.10971 -16.4823,-17.62092 -51.32468,-14.09172 -61.44851,6.22414 -5.73992,11.51853 -1.96164,24.59859 9.35447,32.38428 9.28152,6.38585 24.8845,8.66827 36.22832,5.29952 z\" id=\"path79-3\" transform=\"scale(0.26458334)\"></path></g></g></g><path style=\"opacity:1;fill:#000000;fill-opacity:0;stroke:#1a1a1a;stroke-width:1.18382132;stroke-miterlimit:4;stroke-dasharray:none;filter:url(#filter5016)\" d=\"M 199.0538,62.525105 A 32.952538,30.633867 0 0 1 166.10126,93.158972 32.952538,30.633867 0 0 1 133.14872,62.525105 32.952538,30.633867 0 0 1 166.10126,31.891237 32.952538,30.633867 0 0 1 199.0538,62.525105 Z\" id=\"path4995\" transform=\"matrix(0.92046753,0,0,0.98251377,16.161482,1.9364822)\"></path><title id=\"title5472\">Ghosts of the past</title></g></g></svg>"

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./": 13,
	"./About_me": 14,
	"./About_me/": 14,
	"./About_me/index": 14,
	"./About_me/index.js": 14,
	"./Every_story_needs_a_beginning": 15,
	"./Every_story_needs_a_beginning/": 15,
	"./Every_story_needs_a_beginning/index": 15,
	"./Every_story_needs_a_beginning/index.js": 15,
	"./Ghosts_of_the_past": 16,
	"./Ghosts_of_the_past/": 16,
	"./Ghosts_of_the_past/index": 16,
	"./Ghosts_of_the_past/index.js": 16,
	"./Not_found": 17,
	"./Not_found/": 17,
	"./Not_found/index": 17,
	"./Not_found/index.js": 17,
	"./index": 13,
	"./index.tsx": 13
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 94;

/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_components__ = __webpack_require__(27);

const css_floating_ghosts = () => __WEBPACK_IMPORTED_MODULE_0_styled_components__["a" /* css */] `
  @keyframes floating {
    0% {transform: translateY(0)}
    25% {transform: translateY(-10px)}
    75% {transform: translateY(20px)}
    100% {transform: translateY(0)}
  }

  svg #ghost_3 {
    animation: floating 2.0s linear infinite;
  }

  svg #ghost_2 {
    animation: floating 2.5s linear infinite;
  }

  svg #ghost_1 {
    animation: floating 1.5s linear infinite;
  }
`;
/* harmony export (immutable) */ __webpack_exports__["a"] = css_floating_ghosts;



/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,